// Generated by jextract

package se.curl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct curl_header {
 *     char *name;
 *     char *value;
 *     size_t amount;
 *     size_t index;
 *     unsigned int origin;
 *     void *anchor;
 * }
 * }
 */
public class curl_header {

    curl_header() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        curl_h.C_POINTER.withName("name"),
        curl_h.C_POINTER.withName("value"),
        curl_h.C_LONG.withName("amount"),
        curl_h.C_LONG.withName("index"),
        curl_h.C_INT.withName("origin"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("anchor")
    ).withName("curl_header");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout value$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *value
     * }
     */
    public static final AddressLayout value$layout() {
        return value$LAYOUT;
    }

    private static final long value$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *value
     * }
     */
    public static final long value$offset() {
        return value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *value
     * }
     */
    public static MemorySegment value(MemorySegment struct) {
        return struct.get(value$LAYOUT, value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *value
     * }
     */
    public static void value(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(value$LAYOUT, value$OFFSET, fieldValue);
    }

    private static final OfLong amount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("amount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t amount
     * }
     */
    public static final OfLong amount$layout() {
        return amount$LAYOUT;
    }

    private static final long amount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t amount
     * }
     */
    public static final long amount$offset() {
        return amount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t amount
     * }
     */
    public static long amount(MemorySegment struct) {
        return struct.get(amount$LAYOUT, amount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t amount
     * }
     */
    public static void amount(MemorySegment struct, long fieldValue) {
        struct.set(amount$LAYOUT, amount$OFFSET, fieldValue);
    }

    private static final OfLong index$LAYOUT = (OfLong)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t index
     * }
     */
    public static final OfLong index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t index
     * }
     */
    public static long index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t index
     * }
     */
    public static void index(MemorySegment struct, long fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final OfInt origin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("origin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int origin
     * }
     */
    public static final OfInt origin$layout() {
        return origin$LAYOUT;
    }

    private static final long origin$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int origin
     * }
     */
    public static final long origin$offset() {
        return origin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int origin
     * }
     */
    public static int origin(MemorySegment struct) {
        return struct.get(origin$LAYOUT, origin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int origin
     * }
     */
    public static void origin(MemorySegment struct, int fieldValue) {
        struct.set(origin$LAYOUT, origin$OFFSET, fieldValue);
    }

    private static final AddressLayout anchor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("anchor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *anchor
     * }
     */
    public static final AddressLayout anchor$layout() {
        return anchor$LAYOUT;
    }

    private static final long anchor$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *anchor
     * }
     */
    public static final long anchor$offset() {
        return anchor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *anchor
     * }
     */
    public static MemorySegment anchor(MemorySegment struct) {
        return struct.get(anchor$LAYOUT, anchor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *anchor
     * }
     */
    public static void anchor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(anchor$LAYOUT, anchor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

