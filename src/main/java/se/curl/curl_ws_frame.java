// Generated by jextract

package se.curl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct curl_ws_frame {
 *     int age;
 *     int flags;
 *     curl_off_t offset;
 *     curl_off_t bytesleft;
 *     size_t len;
 * }
 * }
 */
public class curl_ws_frame {

    curl_ws_frame() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        curl_h.C_INT.withName("age"),
        curl_h.C_INT.withName("flags"),
        curl_h.C_LONG.withName("offset"),
        curl_h.C_LONG.withName("bytesleft"),
        curl_h.C_LONG.withName("len")
    ).withName("curl_ws_frame");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt age$LAYOUT = (OfInt)$LAYOUT.select(groupElement("age"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int age
     * }
     */
    public static final OfInt age$layout() {
        return age$LAYOUT;
    }

    private static final long age$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int age
     * }
     */
    public static final long age$offset() {
        return age$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int age
     * }
     */
    public static int age(MemorySegment struct) {
        return struct.get(age$LAYOUT, age$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int age
     * }
     */
    public static void age(MemorySegment struct, int fieldValue) {
        struct.set(age$LAYOUT, age$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * curl_off_t offset
     * }
     */
    public static final OfLong offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * curl_off_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * curl_off_t offset
     * }
     */
    public static long offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * curl_off_t offset
     * }
     */
    public static void offset(MemorySegment struct, long fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfLong bytesleft$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bytesleft"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * curl_off_t bytesleft
     * }
     */
    public static final OfLong bytesleft$layout() {
        return bytesleft$LAYOUT;
    }

    private static final long bytesleft$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * curl_off_t bytesleft
     * }
     */
    public static final long bytesleft$offset() {
        return bytesleft$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * curl_off_t bytesleft
     * }
     */
    public static long bytesleft(MemorySegment struct) {
        return struct.get(bytesleft$LAYOUT, bytesleft$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * curl_off_t bytesleft
     * }
     */
    public static void bytesleft(MemorySegment struct, long fieldValue) {
        struct.set(bytesleft$LAYOUT, bytesleft$OFFSET, fieldValue);
    }

    private static final OfLong len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static final OfLong len$layout() {
        return len$LAYOUT;
    }

    private static final long len$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static final long len$offset() {
        return len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static long len(MemorySegment struct) {
        return struct.get(len$LAYOUT, len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static void len(MemorySegment struct, long fieldValue) {
        struct.set(len$LAYOUT, len$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

