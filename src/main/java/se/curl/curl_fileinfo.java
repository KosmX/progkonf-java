// Generated by jextract

package se.curl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct curl_fileinfo {
 *     char *filename;
 *     curlfiletype filetype;
 *     time_t time;
 *     unsigned int perm;
 *     int uid;
 *     int gid;
 *     curl_off_t size;
 *     long hardlinks;
 *     struct {
 *         char *time;
 *         char *perm;
 *         char *user;
 *         char *group;
 *         char *target;
 *     } strings;
 *     unsigned int flags;
 *     char *b_data;
 *     size_t b_size;
 *     size_t b_used;
 * }
 * }
 */
public class curl_fileinfo {

    curl_fileinfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        curl_h.C_POINTER.withName("filename"),
        curl_h.C_INT.withName("filetype"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_LONG.withName("time"),
        curl_h.C_INT.withName("perm"),
        curl_h.C_INT.withName("uid"),
        curl_h.C_INT.withName("gid"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_LONG.withName("size"),
        curl_h.C_LONG.withName("hardlinks"),
        curl_fileinfo.strings.layout().withName("strings"),
        curl_h.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("b_data"),
        curl_h.C_LONG.withName("b_size"),
        curl_h.C_LONG.withName("b_used")
    ).withName("curl_fileinfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout filename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static final AddressLayout filename$layout() {
        return filename$LAYOUT;
    }

    private static final long filename$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static final long filename$offset() {
        return filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static MemorySegment filename(MemorySegment struct) {
        return struct.get(filename$LAYOUT, filename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static void filename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(filename$LAYOUT, filename$OFFSET, fieldValue);
    }

    private static final OfInt filetype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("filetype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * curlfiletype filetype
     * }
     */
    public static final OfInt filetype$layout() {
        return filetype$LAYOUT;
    }

    private static final long filetype$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * curlfiletype filetype
     * }
     */
    public static final long filetype$offset() {
        return filetype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * curlfiletype filetype
     * }
     */
    public static int filetype(MemorySegment struct) {
        return struct.get(filetype$LAYOUT, filetype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * curlfiletype filetype
     * }
     */
    public static void filetype(MemorySegment struct, int fieldValue) {
        struct.set(filetype$LAYOUT, filetype$OFFSET, fieldValue);
    }

    private static final OfLong time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_t time
     * }
     */
    public static final OfLong time$layout() {
        return time$LAYOUT;
    }

    private static final long time$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_t time
     * }
     */
    public static final long time$offset() {
        return time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_t time
     * }
     */
    public static long time(MemorySegment struct) {
        return struct.get(time$LAYOUT, time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_t time
     * }
     */
    public static void time(MemorySegment struct, long fieldValue) {
        struct.set(time$LAYOUT, time$OFFSET, fieldValue);
    }

    private static final OfInt perm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("perm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int perm
     * }
     */
    public static final OfInt perm$layout() {
        return perm$LAYOUT;
    }

    private static final long perm$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int perm
     * }
     */
    public static final long perm$offset() {
        return perm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int perm
     * }
     */
    public static int perm(MemorySegment struct) {
        return struct.get(perm$LAYOUT, perm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int perm
     * }
     */
    public static void perm(MemorySegment struct, int fieldValue) {
        struct.set(perm$LAYOUT, perm$OFFSET, fieldValue);
    }

    private static final OfInt uid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int uid
     * }
     */
    public static final OfInt uid$layout() {
        return uid$LAYOUT;
    }

    private static final long uid$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int uid
     * }
     */
    public static final long uid$offset() {
        return uid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int uid
     * }
     */
    public static int uid(MemorySegment struct) {
        return struct.get(uid$LAYOUT, uid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int uid
     * }
     */
    public static void uid(MemorySegment struct, int fieldValue) {
        struct.set(uid$LAYOUT, uid$OFFSET, fieldValue);
    }

    private static final OfInt gid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int gid
     * }
     */
    public static final OfInt gid$layout() {
        return gid$LAYOUT;
    }

    private static final long gid$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int gid
     * }
     */
    public static final long gid$offset() {
        return gid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int gid
     * }
     */
    public static int gid(MemorySegment struct) {
        return struct.get(gid$LAYOUT, gid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int gid
     * }
     */
    public static void gid(MemorySegment struct, int fieldValue) {
        struct.set(gid$LAYOUT, gid$OFFSET, fieldValue);
    }

    private static final OfLong size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * curl_off_t size
     * }
     */
    public static final OfLong size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * curl_off_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * curl_off_t size
     * }
     */
    public static long size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * curl_off_t size
     * }
     */
    public static void size(MemorySegment struct, long fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfLong hardlinks$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hardlinks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long hardlinks
     * }
     */
    public static final OfLong hardlinks$layout() {
        return hardlinks$LAYOUT;
    }

    private static final long hardlinks$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long hardlinks
     * }
     */
    public static final long hardlinks$offset() {
        return hardlinks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long hardlinks
     * }
     */
    public static long hardlinks(MemorySegment struct) {
        return struct.get(hardlinks$LAYOUT, hardlinks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long hardlinks
     * }
     */
    public static void hardlinks(MemorySegment struct, long fieldValue) {
        struct.set(hardlinks$LAYOUT, hardlinks$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     char *time;
     *     char *perm;
     *     char *user;
     *     char *group;
     *     char *target;
     * }
     * }
     */
    public static class strings {

        strings() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            curl_h.C_POINTER.withName("time"),
            curl_h.C_POINTER.withName("perm"),
            curl_h.C_POINTER.withName("user"),
            curl_h.C_POINTER.withName("group"),
            curl_h.C_POINTER.withName("target")
        ).withName("$anon$323:3");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout time$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("time"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char *time
         * }
         */
        public static final AddressLayout time$layout() {
            return time$LAYOUT;
        }

        private static final long time$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char *time
         * }
         */
        public static final long time$offset() {
            return time$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char *time
         * }
         */
        public static MemorySegment time(MemorySegment struct) {
            return struct.get(time$LAYOUT, time$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char *time
         * }
         */
        public static void time(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(time$LAYOUT, time$OFFSET, fieldValue);
        }

        private static final AddressLayout perm$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("perm"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char *perm
         * }
         */
        public static final AddressLayout perm$layout() {
            return perm$LAYOUT;
        }

        private static final long perm$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char *perm
         * }
         */
        public static final long perm$offset() {
            return perm$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char *perm
         * }
         */
        public static MemorySegment perm(MemorySegment struct) {
            return struct.get(perm$LAYOUT, perm$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char *perm
         * }
         */
        public static void perm(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(perm$LAYOUT, perm$OFFSET, fieldValue);
        }

        private static final AddressLayout user$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("user"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char *user
         * }
         */
        public static final AddressLayout user$layout() {
            return user$LAYOUT;
        }

        private static final long user$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char *user
         * }
         */
        public static final long user$offset() {
            return user$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char *user
         * }
         */
        public static MemorySegment user(MemorySegment struct) {
            return struct.get(user$LAYOUT, user$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char *user
         * }
         */
        public static void user(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(user$LAYOUT, user$OFFSET, fieldValue);
        }

        private static final AddressLayout group$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("group"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char *group
         * }
         */
        public static final AddressLayout group$layout() {
            return group$LAYOUT;
        }

        private static final long group$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char *group
         * }
         */
        public static final long group$offset() {
            return group$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char *group
         * }
         */
        public static MemorySegment group(MemorySegment struct) {
            return struct.get(group$LAYOUT, group$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char *group
         * }
         */
        public static void group(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(group$LAYOUT, group$OFFSET, fieldValue);
        }

        private static final AddressLayout target$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("target"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char *target
         * }
         */
        public static final AddressLayout target$layout() {
            return target$LAYOUT;
        }

        private static final long target$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char *target
         * }
         */
        public static final long target$offset() {
            return target$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char *target
         * }
         */
        public static MemorySegment target(MemorySegment struct) {
            return struct.get(target$LAYOUT, target$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char *target
         * }
         */
        public static void target(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(target$LAYOUT, target$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout strings$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("strings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     char *time;
     *     char *perm;
     *     char *user;
     *     char *group;
     *     char *target;
     * } strings
     * }
     */
    public static final GroupLayout strings$layout() {
        return strings$LAYOUT;
    }

    private static final long strings$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     char *time;
     *     char *perm;
     *     char *user;
     *     char *group;
     *     char *target;
     * } strings
     * }
     */
    public static final long strings$offset() {
        return strings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     char *time;
     *     char *perm;
     *     char *user;
     *     char *group;
     *     char *target;
     * } strings
     * }
     */
    public static MemorySegment strings(MemorySegment struct) {
        return struct.asSlice(strings$OFFSET, strings$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     char *time;
     *     char *perm;
     *     char *user;
     *     char *group;
     *     char *target;
     * } strings
     * }
     */
    public static void strings(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, strings$OFFSET, strings$LAYOUT.byteSize());
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout b_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("b_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *b_data
     * }
     */
    public static final AddressLayout b_data$layout() {
        return b_data$LAYOUT;
    }

    private static final long b_data$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *b_data
     * }
     */
    public static final long b_data$offset() {
        return b_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *b_data
     * }
     */
    public static MemorySegment b_data(MemorySegment struct) {
        return struct.get(b_data$LAYOUT, b_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *b_data
     * }
     */
    public static void b_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(b_data$LAYOUT, b_data$OFFSET, fieldValue);
    }

    private static final OfLong b_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("b_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t b_size
     * }
     */
    public static final OfLong b_size$layout() {
        return b_size$LAYOUT;
    }

    private static final long b_size$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t b_size
     * }
     */
    public static final long b_size$offset() {
        return b_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t b_size
     * }
     */
    public static long b_size(MemorySegment struct) {
        return struct.get(b_size$LAYOUT, b_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t b_size
     * }
     */
    public static void b_size(MemorySegment struct, long fieldValue) {
        struct.set(b_size$LAYOUT, b_size$OFFSET, fieldValue);
    }

    private static final OfLong b_used$LAYOUT = (OfLong)$LAYOUT.select(groupElement("b_used"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t b_used
     * }
     */
    public static final OfLong b_used$layout() {
        return b_used$LAYOUT;
    }

    private static final long b_used$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t b_used
     * }
     */
    public static final long b_used$offset() {
        return b_used$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t b_used
     * }
     */
    public static long b_used(MemorySegment struct) {
        return struct.get(b_used$LAYOUT, b_used$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t b_used
     * }
     */
    public static void b_used(MemorySegment struct, long fieldValue) {
        struct.set(b_used$LAYOUT, b_used$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

