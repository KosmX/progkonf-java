// Generated by jextract

package se.curl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct curl_version_info_data {
 *     CURLversion age;
 *     const char *version;
 *     unsigned int version_num;
 *     const char *host;
 *     int features;
 *     const char *ssl_version;
 *     long ssl_version_num;
 *     const char *libz_version;
 *     const char *const *protocols;
 *     const char *ares;
 *     int ares_num;
 *     const char *libidn;
 *     int iconv_ver_num;
 *     const char *libssh_version;
 *     unsigned int brotli_ver_num;
 *     const char *brotli_version;
 *     unsigned int nghttp2_ver_num;
 *     const char *nghttp2_version;
 *     const char *quic_version;
 *     const char *cainfo;
 *     const char *capath;
 *     unsigned int zstd_ver_num;
 *     const char *zstd_version;
 *     const char *hyper_version;
 *     const char *gsasl_version;
 *     const char *const *feature_names;
 *     const char *rtmp_version;
 * }
 * }
 */
public class curl_version_info_data {

    curl_version_info_data() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        curl_h.C_INT.withName("age"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("version"),
        curl_h.C_INT.withName("version_num"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("host"),
        curl_h.C_INT.withName("features"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("ssl_version"),
        curl_h.C_LONG.withName("ssl_version_num"),
        curl_h.C_POINTER.withName("libz_version"),
        curl_h.C_POINTER.withName("protocols"),
        curl_h.C_POINTER.withName("ares"),
        curl_h.C_INT.withName("ares_num"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("libidn"),
        curl_h.C_INT.withName("iconv_ver_num"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("libssh_version"),
        curl_h.C_INT.withName("brotli_ver_num"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("brotli_version"),
        curl_h.C_INT.withName("nghttp2_ver_num"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("nghttp2_version"),
        curl_h.C_POINTER.withName("quic_version"),
        curl_h.C_POINTER.withName("cainfo"),
        curl_h.C_POINTER.withName("capath"),
        curl_h.C_INT.withName("zstd_ver_num"),
        MemoryLayout.paddingLayout(4),
        curl_h.C_POINTER.withName("zstd_version"),
        curl_h.C_POINTER.withName("hyper_version"),
        curl_h.C_POINTER.withName("gsasl_version"),
        curl_h.C_POINTER.withName("feature_names"),
        curl_h.C_POINTER.withName("rtmp_version")
    ).withName("curl_version_info_data");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt age$LAYOUT = (OfInt)$LAYOUT.select(groupElement("age"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CURLversion age
     * }
     */
    public static final OfInt age$layout() {
        return age$LAYOUT;
    }

    private static final long age$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CURLversion age
     * }
     */
    public static final long age$offset() {
        return age$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CURLversion age
     * }
     */
    public static int age(MemorySegment struct) {
        return struct.get(age$LAYOUT, age$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CURLversion age
     * }
     */
    public static void age(MemorySegment struct, int fieldValue) {
        struct.set(age$LAYOUT, age$OFFSET, fieldValue);
    }

    private static final AddressLayout version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static final AddressLayout version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static MemorySegment version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static void version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt version_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version_num
     * }
     */
    public static final OfInt version_num$layout() {
        return version_num$LAYOUT;
    }

    private static final long version_num$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version_num
     * }
     */
    public static final long version_num$offset() {
        return version_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version_num
     * }
     */
    public static int version_num(MemorySegment struct) {
        return struct.get(version_num$LAYOUT, version_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version_num
     * }
     */
    public static void version_num(MemorySegment struct, int fieldValue) {
        struct.set(version_num$LAYOUT, version_num$OFFSET, fieldValue);
    }

    private static final AddressLayout host$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("host"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *host
     * }
     */
    public static final AddressLayout host$layout() {
        return host$LAYOUT;
    }

    private static final long host$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *host
     * }
     */
    public static final long host$offset() {
        return host$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *host
     * }
     */
    public static MemorySegment host(MemorySegment struct) {
        return struct.get(host$LAYOUT, host$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *host
     * }
     */
    public static void host(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(host$LAYOUT, host$OFFSET, fieldValue);
    }

    private static final OfInt features$LAYOUT = (OfInt)$LAYOUT.select(groupElement("features"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int features
     * }
     */
    public static final OfInt features$layout() {
        return features$LAYOUT;
    }

    private static final long features$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int features
     * }
     */
    public static final long features$offset() {
        return features$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int features
     * }
     */
    public static int features(MemorySegment struct) {
        return struct.get(features$LAYOUT, features$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int features
     * }
     */
    public static void features(MemorySegment struct, int fieldValue) {
        struct.set(features$LAYOUT, features$OFFSET, fieldValue);
    }

    private static final AddressLayout ssl_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ssl_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *ssl_version
     * }
     */
    public static final AddressLayout ssl_version$layout() {
        return ssl_version$LAYOUT;
    }

    private static final long ssl_version$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *ssl_version
     * }
     */
    public static final long ssl_version$offset() {
        return ssl_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *ssl_version
     * }
     */
    public static MemorySegment ssl_version(MemorySegment struct) {
        return struct.get(ssl_version$LAYOUT, ssl_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *ssl_version
     * }
     */
    public static void ssl_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ssl_version$LAYOUT, ssl_version$OFFSET, fieldValue);
    }

    private static final OfLong ssl_version_num$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ssl_version_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long ssl_version_num
     * }
     */
    public static final OfLong ssl_version_num$layout() {
        return ssl_version_num$LAYOUT;
    }

    private static final long ssl_version_num$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long ssl_version_num
     * }
     */
    public static final long ssl_version_num$offset() {
        return ssl_version_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long ssl_version_num
     * }
     */
    public static long ssl_version_num(MemorySegment struct) {
        return struct.get(ssl_version_num$LAYOUT, ssl_version_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long ssl_version_num
     * }
     */
    public static void ssl_version_num(MemorySegment struct, long fieldValue) {
        struct.set(ssl_version_num$LAYOUT, ssl_version_num$OFFSET, fieldValue);
    }

    private static final AddressLayout libz_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("libz_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *libz_version
     * }
     */
    public static final AddressLayout libz_version$layout() {
        return libz_version$LAYOUT;
    }

    private static final long libz_version$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *libz_version
     * }
     */
    public static final long libz_version$offset() {
        return libz_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *libz_version
     * }
     */
    public static MemorySegment libz_version(MemorySegment struct) {
        return struct.get(libz_version$LAYOUT, libz_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *libz_version
     * }
     */
    public static void libz_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(libz_version$LAYOUT, libz_version$OFFSET, fieldValue);
    }

    private static final AddressLayout protocols$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("protocols"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *protocols
     * }
     */
    public static final AddressLayout protocols$layout() {
        return protocols$LAYOUT;
    }

    private static final long protocols$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *protocols
     * }
     */
    public static final long protocols$offset() {
        return protocols$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *protocols
     * }
     */
    public static MemorySegment protocols(MemorySegment struct) {
        return struct.get(protocols$LAYOUT, protocols$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *protocols
     * }
     */
    public static void protocols(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(protocols$LAYOUT, protocols$OFFSET, fieldValue);
    }

    private static final AddressLayout ares$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ares"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *ares
     * }
     */
    public static final AddressLayout ares$layout() {
        return ares$LAYOUT;
    }

    private static final long ares$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *ares
     * }
     */
    public static final long ares$offset() {
        return ares$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *ares
     * }
     */
    public static MemorySegment ares(MemorySegment struct) {
        return struct.get(ares$LAYOUT, ares$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *ares
     * }
     */
    public static void ares(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ares$LAYOUT, ares$OFFSET, fieldValue);
    }

    private static final OfInt ares_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ares_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ares_num
     * }
     */
    public static final OfInt ares_num$layout() {
        return ares_num$LAYOUT;
    }

    private static final long ares_num$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ares_num
     * }
     */
    public static final long ares_num$offset() {
        return ares_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ares_num
     * }
     */
    public static int ares_num(MemorySegment struct) {
        return struct.get(ares_num$LAYOUT, ares_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ares_num
     * }
     */
    public static void ares_num(MemorySegment struct, int fieldValue) {
        struct.set(ares_num$LAYOUT, ares_num$OFFSET, fieldValue);
    }

    private static final AddressLayout libidn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("libidn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *libidn
     * }
     */
    public static final AddressLayout libidn$layout() {
        return libidn$LAYOUT;
    }

    private static final long libidn$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *libidn
     * }
     */
    public static final long libidn$offset() {
        return libidn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *libidn
     * }
     */
    public static MemorySegment libidn(MemorySegment struct) {
        return struct.get(libidn$LAYOUT, libidn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *libidn
     * }
     */
    public static void libidn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(libidn$LAYOUT, libidn$OFFSET, fieldValue);
    }

    private static final OfInt iconv_ver_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iconv_ver_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iconv_ver_num
     * }
     */
    public static final OfInt iconv_ver_num$layout() {
        return iconv_ver_num$LAYOUT;
    }

    private static final long iconv_ver_num$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iconv_ver_num
     * }
     */
    public static final long iconv_ver_num$offset() {
        return iconv_ver_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iconv_ver_num
     * }
     */
    public static int iconv_ver_num(MemorySegment struct) {
        return struct.get(iconv_ver_num$LAYOUT, iconv_ver_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iconv_ver_num
     * }
     */
    public static void iconv_ver_num(MemorySegment struct, int fieldValue) {
        struct.set(iconv_ver_num$LAYOUT, iconv_ver_num$OFFSET, fieldValue);
    }

    private static final AddressLayout libssh_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("libssh_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *libssh_version
     * }
     */
    public static final AddressLayout libssh_version$layout() {
        return libssh_version$LAYOUT;
    }

    private static final long libssh_version$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *libssh_version
     * }
     */
    public static final long libssh_version$offset() {
        return libssh_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *libssh_version
     * }
     */
    public static MemorySegment libssh_version(MemorySegment struct) {
        return struct.get(libssh_version$LAYOUT, libssh_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *libssh_version
     * }
     */
    public static void libssh_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(libssh_version$LAYOUT, libssh_version$OFFSET, fieldValue);
    }

    private static final OfInt brotli_ver_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("brotli_ver_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int brotli_ver_num
     * }
     */
    public static final OfInt brotli_ver_num$layout() {
        return brotli_ver_num$LAYOUT;
    }

    private static final long brotli_ver_num$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int brotli_ver_num
     * }
     */
    public static final long brotli_ver_num$offset() {
        return brotli_ver_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int brotli_ver_num
     * }
     */
    public static int brotli_ver_num(MemorySegment struct) {
        return struct.get(brotli_ver_num$LAYOUT, brotli_ver_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int brotli_ver_num
     * }
     */
    public static void brotli_ver_num(MemorySegment struct, int fieldValue) {
        struct.set(brotli_ver_num$LAYOUT, brotli_ver_num$OFFSET, fieldValue);
    }

    private static final AddressLayout brotli_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("brotli_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *brotli_version
     * }
     */
    public static final AddressLayout brotli_version$layout() {
        return brotli_version$LAYOUT;
    }

    private static final long brotli_version$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *brotli_version
     * }
     */
    public static final long brotli_version$offset() {
        return brotli_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *brotli_version
     * }
     */
    public static MemorySegment brotli_version(MemorySegment struct) {
        return struct.get(brotli_version$LAYOUT, brotli_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *brotli_version
     * }
     */
    public static void brotli_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(brotli_version$LAYOUT, brotli_version$OFFSET, fieldValue);
    }

    private static final OfInt nghttp2_ver_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nghttp2_ver_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int nghttp2_ver_num
     * }
     */
    public static final OfInt nghttp2_ver_num$layout() {
        return nghttp2_ver_num$LAYOUT;
    }

    private static final long nghttp2_ver_num$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int nghttp2_ver_num
     * }
     */
    public static final long nghttp2_ver_num$offset() {
        return nghttp2_ver_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int nghttp2_ver_num
     * }
     */
    public static int nghttp2_ver_num(MemorySegment struct) {
        return struct.get(nghttp2_ver_num$LAYOUT, nghttp2_ver_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int nghttp2_ver_num
     * }
     */
    public static void nghttp2_ver_num(MemorySegment struct, int fieldValue) {
        struct.set(nghttp2_ver_num$LAYOUT, nghttp2_ver_num$OFFSET, fieldValue);
    }

    private static final AddressLayout nghttp2_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nghttp2_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *nghttp2_version
     * }
     */
    public static final AddressLayout nghttp2_version$layout() {
        return nghttp2_version$LAYOUT;
    }

    private static final long nghttp2_version$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *nghttp2_version
     * }
     */
    public static final long nghttp2_version$offset() {
        return nghttp2_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *nghttp2_version
     * }
     */
    public static MemorySegment nghttp2_version(MemorySegment struct) {
        return struct.get(nghttp2_version$LAYOUT, nghttp2_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *nghttp2_version
     * }
     */
    public static void nghttp2_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nghttp2_version$LAYOUT, nghttp2_version$OFFSET, fieldValue);
    }

    private static final AddressLayout quic_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("quic_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *quic_version
     * }
     */
    public static final AddressLayout quic_version$layout() {
        return quic_version$LAYOUT;
    }

    private static final long quic_version$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *quic_version
     * }
     */
    public static final long quic_version$offset() {
        return quic_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *quic_version
     * }
     */
    public static MemorySegment quic_version(MemorySegment struct) {
        return struct.get(quic_version$LAYOUT, quic_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *quic_version
     * }
     */
    public static void quic_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(quic_version$LAYOUT, quic_version$OFFSET, fieldValue);
    }

    private static final AddressLayout cainfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cainfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *cainfo
     * }
     */
    public static final AddressLayout cainfo$layout() {
        return cainfo$LAYOUT;
    }

    private static final long cainfo$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *cainfo
     * }
     */
    public static final long cainfo$offset() {
        return cainfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *cainfo
     * }
     */
    public static MemorySegment cainfo(MemorySegment struct) {
        return struct.get(cainfo$LAYOUT, cainfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *cainfo
     * }
     */
    public static void cainfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cainfo$LAYOUT, cainfo$OFFSET, fieldValue);
    }

    private static final AddressLayout capath$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("capath"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *capath
     * }
     */
    public static final AddressLayout capath$layout() {
        return capath$LAYOUT;
    }

    private static final long capath$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *capath
     * }
     */
    public static final long capath$offset() {
        return capath$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *capath
     * }
     */
    public static MemorySegment capath(MemorySegment struct) {
        return struct.get(capath$LAYOUT, capath$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *capath
     * }
     */
    public static void capath(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(capath$LAYOUT, capath$OFFSET, fieldValue);
    }

    private static final OfInt zstd_ver_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("zstd_ver_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int zstd_ver_num
     * }
     */
    public static final OfInt zstd_ver_num$layout() {
        return zstd_ver_num$LAYOUT;
    }

    private static final long zstd_ver_num$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int zstd_ver_num
     * }
     */
    public static final long zstd_ver_num$offset() {
        return zstd_ver_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int zstd_ver_num
     * }
     */
    public static int zstd_ver_num(MemorySegment struct) {
        return struct.get(zstd_ver_num$LAYOUT, zstd_ver_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int zstd_ver_num
     * }
     */
    public static void zstd_ver_num(MemorySegment struct, int fieldValue) {
        struct.set(zstd_ver_num$LAYOUT, zstd_ver_num$OFFSET, fieldValue);
    }

    private static final AddressLayout zstd_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("zstd_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *zstd_version
     * }
     */
    public static final AddressLayout zstd_version$layout() {
        return zstd_version$LAYOUT;
    }

    private static final long zstd_version$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *zstd_version
     * }
     */
    public static final long zstd_version$offset() {
        return zstd_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *zstd_version
     * }
     */
    public static MemorySegment zstd_version(MemorySegment struct) {
        return struct.get(zstd_version$LAYOUT, zstd_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *zstd_version
     * }
     */
    public static void zstd_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(zstd_version$LAYOUT, zstd_version$OFFSET, fieldValue);
    }

    private static final AddressLayout hyper_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hyper_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *hyper_version
     * }
     */
    public static final AddressLayout hyper_version$layout() {
        return hyper_version$LAYOUT;
    }

    private static final long hyper_version$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *hyper_version
     * }
     */
    public static final long hyper_version$offset() {
        return hyper_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *hyper_version
     * }
     */
    public static MemorySegment hyper_version(MemorySegment struct) {
        return struct.get(hyper_version$LAYOUT, hyper_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *hyper_version
     * }
     */
    public static void hyper_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hyper_version$LAYOUT, hyper_version$OFFSET, fieldValue);
    }

    private static final AddressLayout gsasl_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gsasl_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *gsasl_version
     * }
     */
    public static final AddressLayout gsasl_version$layout() {
        return gsasl_version$LAYOUT;
    }

    private static final long gsasl_version$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *gsasl_version
     * }
     */
    public static final long gsasl_version$offset() {
        return gsasl_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *gsasl_version
     * }
     */
    public static MemorySegment gsasl_version(MemorySegment struct) {
        return struct.get(gsasl_version$LAYOUT, gsasl_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *gsasl_version
     * }
     */
    public static void gsasl_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gsasl_version$LAYOUT, gsasl_version$OFFSET, fieldValue);
    }

    private static final AddressLayout feature_names$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("feature_names"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *feature_names
     * }
     */
    public static final AddressLayout feature_names$layout() {
        return feature_names$LAYOUT;
    }

    private static final long feature_names$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *feature_names
     * }
     */
    public static final long feature_names$offset() {
        return feature_names$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *feature_names
     * }
     */
    public static MemorySegment feature_names(MemorySegment struct) {
        return struct.get(feature_names$LAYOUT, feature_names$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *feature_names
     * }
     */
    public static void feature_names(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(feature_names$LAYOUT, feature_names$OFFSET, fieldValue);
    }

    private static final AddressLayout rtmp_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rtmp_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *rtmp_version
     * }
     */
    public static final AddressLayout rtmp_version$layout() {
        return rtmp_version$LAYOUT;
    }

    private static final long rtmp_version$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *rtmp_version
     * }
     */
    public static final long rtmp_version$offset() {
        return rtmp_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *rtmp_version
     * }
     */
    public static MemorySegment rtmp_version(MemorySegment struct) {
        return struct.get(rtmp_version$LAYOUT, rtmp_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *rtmp_version
     * }
     */
    public static void rtmp_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rtmp_version$LAYOUT, rtmp_version$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

