// Generated by jextract

package se.curl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct curl_httppost {
 *     struct curl_httppost *next;
 *     char *name;
 *     long namelength;
 *     char *contents;
 *     long contentslength;
 *     char *buffer;
 *     long bufferlength;
 *     char *contenttype;
 *     struct curl_slist *contentheader;
 *     struct curl_httppost *more;
 *     long flags;
 *     char *showfilename;
 *     void *userp;
 *     curl_off_t contentlen;
 * }
 * }
 */
public class curl_httppost {

    curl_httppost() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        curl_h.C_POINTER.withName("next"),
        curl_h.C_POINTER.withName("name"),
        curl_h.C_LONG.withName("namelength"),
        curl_h.C_POINTER.withName("contents"),
        curl_h.C_LONG.withName("contentslength"),
        curl_h.C_POINTER.withName("buffer"),
        curl_h.C_LONG.withName("bufferlength"),
        curl_h.C_POINTER.withName("contenttype"),
        curl_h.C_POINTER.withName("contentheader"),
        curl_h.C_POINTER.withName("more"),
        curl_h.C_LONG.withName("flags"),
        curl_h.C_POINTER.withName("showfilename"),
        curl_h.C_POINTER.withName("userp"),
        curl_h.C_LONG.withName("contentlen")
    ).withName("curl_httppost");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct curl_httppost *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct curl_httppost *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct curl_httppost *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct curl_httppost *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfLong namelength$LAYOUT = (OfLong)$LAYOUT.select(groupElement("namelength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long namelength
     * }
     */
    public static final OfLong namelength$layout() {
        return namelength$LAYOUT;
    }

    private static final long namelength$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long namelength
     * }
     */
    public static final long namelength$offset() {
        return namelength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long namelength
     * }
     */
    public static long namelength(MemorySegment struct) {
        return struct.get(namelength$LAYOUT, namelength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long namelength
     * }
     */
    public static void namelength(MemorySegment struct, long fieldValue) {
        struct.set(namelength$LAYOUT, namelength$OFFSET, fieldValue);
    }

    private static final AddressLayout contents$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("contents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *contents
     * }
     */
    public static final AddressLayout contents$layout() {
        return contents$LAYOUT;
    }

    private static final long contents$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *contents
     * }
     */
    public static final long contents$offset() {
        return contents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *contents
     * }
     */
    public static MemorySegment contents(MemorySegment struct) {
        return struct.get(contents$LAYOUT, contents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *contents
     * }
     */
    public static void contents(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(contents$LAYOUT, contents$OFFSET, fieldValue);
    }

    private static final OfLong contentslength$LAYOUT = (OfLong)$LAYOUT.select(groupElement("contentslength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long contentslength
     * }
     */
    public static final OfLong contentslength$layout() {
        return contentslength$LAYOUT;
    }

    private static final long contentslength$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long contentslength
     * }
     */
    public static final long contentslength$offset() {
        return contentslength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long contentslength
     * }
     */
    public static long contentslength(MemorySegment struct) {
        return struct.get(contentslength$LAYOUT, contentslength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long contentslength
     * }
     */
    public static void contentslength(MemorySegment struct, long fieldValue) {
        struct.set(contentslength$LAYOUT, contentslength$OFFSET, fieldValue);
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfLong bufferlength$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bufferlength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long bufferlength
     * }
     */
    public static final OfLong bufferlength$layout() {
        return bufferlength$LAYOUT;
    }

    private static final long bufferlength$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long bufferlength
     * }
     */
    public static final long bufferlength$offset() {
        return bufferlength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long bufferlength
     * }
     */
    public static long bufferlength(MemorySegment struct) {
        return struct.get(bufferlength$LAYOUT, bufferlength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long bufferlength
     * }
     */
    public static void bufferlength(MemorySegment struct, long fieldValue) {
        struct.set(bufferlength$LAYOUT, bufferlength$OFFSET, fieldValue);
    }

    private static final AddressLayout contenttype$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("contenttype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *contenttype
     * }
     */
    public static final AddressLayout contenttype$layout() {
        return contenttype$LAYOUT;
    }

    private static final long contenttype$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *contenttype
     * }
     */
    public static final long contenttype$offset() {
        return contenttype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *contenttype
     * }
     */
    public static MemorySegment contenttype(MemorySegment struct) {
        return struct.get(contenttype$LAYOUT, contenttype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *contenttype
     * }
     */
    public static void contenttype(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(contenttype$LAYOUT, contenttype$OFFSET, fieldValue);
    }

    private static final AddressLayout contentheader$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("contentheader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct curl_slist *contentheader
     * }
     */
    public static final AddressLayout contentheader$layout() {
        return contentheader$LAYOUT;
    }

    private static final long contentheader$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct curl_slist *contentheader
     * }
     */
    public static final long contentheader$offset() {
        return contentheader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct curl_slist *contentheader
     * }
     */
    public static MemorySegment contentheader(MemorySegment struct) {
        return struct.get(contentheader$LAYOUT, contentheader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct curl_slist *contentheader
     * }
     */
    public static void contentheader(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(contentheader$LAYOUT, contentheader$OFFSET, fieldValue);
    }

    private static final AddressLayout more$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("more"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct curl_httppost *more
     * }
     */
    public static final AddressLayout more$layout() {
        return more$LAYOUT;
    }

    private static final long more$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct curl_httppost *more
     * }
     */
    public static final long more$offset() {
        return more$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct curl_httppost *more
     * }
     */
    public static MemorySegment more(MemorySegment struct) {
        return struct.get(more$LAYOUT, more$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct curl_httppost *more
     * }
     */
    public static void more(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(more$LAYOUT, more$OFFSET, fieldValue);
    }

    private static final OfLong flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long flags
     * }
     */
    public static final OfLong flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long flags
     * }
     */
    public static long flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long flags
     * }
     */
    public static void flags(MemorySegment struct, long fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout showfilename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("showfilename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *showfilename
     * }
     */
    public static final AddressLayout showfilename$layout() {
        return showfilename$LAYOUT;
    }

    private static final long showfilename$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *showfilename
     * }
     */
    public static final long showfilename$offset() {
        return showfilename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *showfilename
     * }
     */
    public static MemorySegment showfilename(MemorySegment struct) {
        return struct.get(showfilename$LAYOUT, showfilename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *showfilename
     * }
     */
    public static void showfilename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(showfilename$LAYOUT, showfilename$OFFSET, fieldValue);
    }

    private static final AddressLayout userp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userp
     * }
     */
    public static final AddressLayout userp$layout() {
        return userp$LAYOUT;
    }

    private static final long userp$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userp
     * }
     */
    public static final long userp$offset() {
        return userp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userp
     * }
     */
    public static MemorySegment userp(MemorySegment struct) {
        return struct.get(userp$LAYOUT, userp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userp
     * }
     */
    public static void userp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userp$LAYOUT, userp$OFFSET, fieldValue);
    }

    private static final OfLong contentlen$LAYOUT = (OfLong)$LAYOUT.select(groupElement("contentlen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * curl_off_t contentlen
     * }
     */
    public static final OfLong contentlen$layout() {
        return contentlen$LAYOUT;
    }

    private static final long contentlen$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * curl_off_t contentlen
     * }
     */
    public static final long contentlen$offset() {
        return contentlen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * curl_off_t contentlen
     * }
     */
    public static long contentlen(MemorySegment struct) {
        return struct.get(contentlen$LAYOUT, contentlen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * curl_off_t contentlen
     * }
     */
    public static void contentlen(MemorySegment struct, long fieldValue) {
        struct.set(contentlen$LAYOUT, contentlen$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

