// Generated by jextract

package se.curl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct curl_sockaddr {
 *     int family;
 *     int socktype;
 *     int protocol;
 *     unsigned int addrlen;
 *     struct sockaddr addr;
 * }
 * }
 */
public class curl_sockaddr {

    curl_sockaddr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        curl_h.C_INT.withName("family"),
        curl_h.C_INT.withName("socktype"),
        curl_h.C_INT.withName("protocol"),
        curl_h.C_INT.withName("addrlen"),
        sockaddr.layout().withName("addr")
    ).withName("curl_sockaddr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt family$LAYOUT = (OfInt)$LAYOUT.select(groupElement("family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int family
     * }
     */
    public static final OfInt family$layout() {
        return family$LAYOUT;
    }

    private static final long family$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int family
     * }
     */
    public static final long family$offset() {
        return family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int family
     * }
     */
    public static int family(MemorySegment struct) {
        return struct.get(family$LAYOUT, family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int family
     * }
     */
    public static void family(MemorySegment struct, int fieldValue) {
        struct.set(family$LAYOUT, family$OFFSET, fieldValue);
    }

    private static final OfInt socktype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("socktype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int socktype
     * }
     */
    public static final OfInt socktype$layout() {
        return socktype$LAYOUT;
    }

    private static final long socktype$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int socktype
     * }
     */
    public static final long socktype$offset() {
        return socktype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int socktype
     * }
     */
    public static int socktype(MemorySegment struct) {
        return struct.get(socktype$LAYOUT, socktype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int socktype
     * }
     */
    public static void socktype(MemorySegment struct, int fieldValue) {
        struct.set(socktype$LAYOUT, socktype$OFFSET, fieldValue);
    }

    private static final OfInt protocol$LAYOUT = (OfInt)$LAYOUT.select(groupElement("protocol"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int protocol
     * }
     */
    public static final OfInt protocol$layout() {
        return protocol$LAYOUT;
    }

    private static final long protocol$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int protocol
     * }
     */
    public static final long protocol$offset() {
        return protocol$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int protocol
     * }
     */
    public static int protocol(MemorySegment struct) {
        return struct.get(protocol$LAYOUT, protocol$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int protocol
     * }
     */
    public static void protocol(MemorySegment struct, int fieldValue) {
        struct.set(protocol$LAYOUT, protocol$OFFSET, fieldValue);
    }

    private static final OfInt addrlen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("addrlen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int addrlen
     * }
     */
    public static final OfInt addrlen$layout() {
        return addrlen$LAYOUT;
    }

    private static final long addrlen$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int addrlen
     * }
     */
    public static final long addrlen$offset() {
        return addrlen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int addrlen
     * }
     */
    public static int addrlen(MemorySegment struct) {
        return struct.get(addrlen$LAYOUT, addrlen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int addrlen
     * }
     */
    public static void addrlen(MemorySegment struct, int fieldValue) {
        struct.set(addrlen$LAYOUT, addrlen$OFFSET, fieldValue);
    }

    private static final GroupLayout addr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct sockaddr addr
     * }
     */
    public static final GroupLayout addr$layout() {
        return addr$LAYOUT;
    }

    private static final long addr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct sockaddr addr
     * }
     */
    public static final long addr$offset() {
        return addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct sockaddr addr
     * }
     */
    public static MemorySegment addr(MemorySegment struct) {
        return struct.asSlice(addr$OFFSET, addr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct sockaddr addr
     * }
     */
    public static void addr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, addr$OFFSET, addr$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

