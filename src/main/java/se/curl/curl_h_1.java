// Generated by jextract

package se.curl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class curl_h_1 extends curl_h_2 {

    curl_h_1() {
        // Should not be called directly
    }
    private static final int CURLPROXY_SOCKS5_HOSTNAME = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLPROXY_SOCKS5_HOSTNAME = 7
     * }
     */
    public static int CURLPROXY_SOCKS5_HOSTNAME() {
        return CURLPROXY_SOCKS5_HOSTNAME;
    }
    private static final int CURLKHTYPE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum curl_khtype.CURLKHTYPE_UNKNOWN = 0
     * }
     */
    public static int CURLKHTYPE_UNKNOWN() {
        return CURLKHTYPE_UNKNOWN;
    }
    private static final int CURLKHTYPE_RSA1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum curl_khtype.CURLKHTYPE_RSA1 = 1
     * }
     */
    public static int CURLKHTYPE_RSA1() {
        return CURLKHTYPE_RSA1;
    }
    private static final int CURLKHTYPE_RSA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum curl_khtype.CURLKHTYPE_RSA = 2
     * }
     */
    public static int CURLKHTYPE_RSA() {
        return CURLKHTYPE_RSA;
    }
    private static final int CURLKHTYPE_DSS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum curl_khtype.CURLKHTYPE_DSS = 3
     * }
     */
    public static int CURLKHTYPE_DSS() {
        return CURLKHTYPE_DSS;
    }
    private static final int CURLKHTYPE_ECDSA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum curl_khtype.CURLKHTYPE_ECDSA = 4
     * }
     */
    public static int CURLKHTYPE_ECDSA() {
        return CURLKHTYPE_ECDSA;
    }
    private static final int CURLKHTYPE_ED25519 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum curl_khtype.CURLKHTYPE_ED25519 = 5
     * }
     */
    public static int CURLKHTYPE_ED25519() {
        return CURLKHTYPE_ED25519;
    }
    private static final int CURLKHSTAT_FINE_ADD_TO_FILE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum curl_khstat.CURLKHSTAT_FINE_ADD_TO_FILE = 0
     * }
     */
    public static int CURLKHSTAT_FINE_ADD_TO_FILE() {
        return CURLKHSTAT_FINE_ADD_TO_FILE;
    }
    private static final int CURLKHSTAT_FINE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum curl_khstat.CURLKHSTAT_FINE = 1
     * }
     */
    public static int CURLKHSTAT_FINE() {
        return CURLKHSTAT_FINE;
    }
    private static final int CURLKHSTAT_REJECT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum curl_khstat.CURLKHSTAT_REJECT = 2
     * }
     */
    public static int CURLKHSTAT_REJECT() {
        return CURLKHSTAT_REJECT;
    }
    private static final int CURLKHSTAT_DEFER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum curl_khstat.CURLKHSTAT_DEFER = 3
     * }
     */
    public static int CURLKHSTAT_DEFER() {
        return CURLKHSTAT_DEFER;
    }
    private static final int CURLKHSTAT_FINE_REPLACE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum curl_khstat.CURLKHSTAT_FINE_REPLACE = 4
     * }
     */
    public static int CURLKHSTAT_FINE_REPLACE() {
        return CURLKHSTAT_FINE_REPLACE;
    }
    private static final int CURLKHSTAT_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum curl_khstat.CURLKHSTAT_LAST = 5
     * }
     */
    public static int CURLKHSTAT_LAST() {
        return CURLKHSTAT_LAST;
    }
    private static final int CURLKHMATCH_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum curl_khmatch.CURLKHMATCH_OK = 0
     * }
     */
    public static int CURLKHMATCH_OK() {
        return CURLKHMATCH_OK;
    }
    private static final int CURLKHMATCH_MISMATCH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum curl_khmatch.CURLKHMATCH_MISMATCH = 1
     * }
     */
    public static int CURLKHMATCH_MISMATCH() {
        return CURLKHMATCH_MISMATCH;
    }
    private static final int CURLKHMATCH_MISSING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum curl_khmatch.CURLKHMATCH_MISSING = 2
     * }
     */
    public static int CURLKHMATCH_MISSING() {
        return CURLKHMATCH_MISSING;
    }
    private static final int CURLKHMATCH_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum curl_khmatch.CURLKHMATCH_LAST = 3
     * }
     */
    public static int CURLKHMATCH_LAST() {
        return CURLKHMATCH_LAST;
    }
    private static final int CURLUSESSL_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUSESSL_NONE = 0
     * }
     */
    public static int CURLUSESSL_NONE() {
        return CURLUSESSL_NONE;
    }
    private static final int CURLUSESSL_TRY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUSESSL_TRY = 1
     * }
     */
    public static int CURLUSESSL_TRY() {
        return CURLUSESSL_TRY;
    }
    private static final int CURLUSESSL_CONTROL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUSESSL_CONTROL = 2
     * }
     */
    public static int CURLUSESSL_CONTROL() {
        return CURLUSESSL_CONTROL;
    }
    private static final int CURLUSESSL_ALL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUSESSL_ALL = 3
     * }
     */
    public static int CURLUSESSL_ALL() {
        return CURLUSESSL_ALL;
    }
    private static final int CURLUSESSL_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUSESSL_LAST = 4
     * }
     */
    public static int CURLUSESSL_LAST() {
        return CURLUSESSL_LAST;
    }
    private static final int CURLFTPSSL_CCC_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPSSL_CCC_NONE = 0
     * }
     */
    public static int CURLFTPSSL_CCC_NONE() {
        return CURLFTPSSL_CCC_NONE;
    }
    private static final int CURLFTPSSL_CCC_PASSIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPSSL_CCC_PASSIVE = 1
     * }
     */
    public static int CURLFTPSSL_CCC_PASSIVE() {
        return CURLFTPSSL_CCC_PASSIVE;
    }
    private static final int CURLFTPSSL_CCC_ACTIVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPSSL_CCC_ACTIVE = 2
     * }
     */
    public static int CURLFTPSSL_CCC_ACTIVE() {
        return CURLFTPSSL_CCC_ACTIVE;
    }
    private static final int CURLFTPSSL_CCC_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPSSL_CCC_LAST = 3
     * }
     */
    public static int CURLFTPSSL_CCC_LAST() {
        return CURLFTPSSL_CCC_LAST;
    }
    private static final int CURLFTPAUTH_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPAUTH_DEFAULT = 0
     * }
     */
    public static int CURLFTPAUTH_DEFAULT() {
        return CURLFTPAUTH_DEFAULT;
    }
    private static final int CURLFTPAUTH_SSL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPAUTH_SSL = 1
     * }
     */
    public static int CURLFTPAUTH_SSL() {
        return CURLFTPAUTH_SSL;
    }
    private static final int CURLFTPAUTH_TLS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPAUTH_TLS = 2
     * }
     */
    public static int CURLFTPAUTH_TLS() {
        return CURLFTPAUTH_TLS;
    }
    private static final int CURLFTPAUTH_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPAUTH_LAST = 3
     * }
     */
    public static int CURLFTPAUTH_LAST() {
        return CURLFTPAUTH_LAST;
    }
    private static final int CURLFTP_CREATE_DIR_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTP_CREATE_DIR_NONE = 0
     * }
     */
    public static int CURLFTP_CREATE_DIR_NONE() {
        return CURLFTP_CREATE_DIR_NONE;
    }
    private static final int CURLFTP_CREATE_DIR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTP_CREATE_DIR = 1
     * }
     */
    public static int CURLFTP_CREATE_DIR() {
        return CURLFTP_CREATE_DIR;
    }
    private static final int CURLFTP_CREATE_DIR_RETRY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTP_CREATE_DIR_RETRY = 2
     * }
     */
    public static int CURLFTP_CREATE_DIR_RETRY() {
        return CURLFTP_CREATE_DIR_RETRY;
    }
    private static final int CURLFTP_CREATE_DIR_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTP_CREATE_DIR_LAST = 3
     * }
     */
    public static int CURLFTP_CREATE_DIR_LAST() {
        return CURLFTP_CREATE_DIR_LAST;
    }
    private static final int CURLFTPMETHOD_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPMETHOD_DEFAULT = 0
     * }
     */
    public static int CURLFTPMETHOD_DEFAULT() {
        return CURLFTPMETHOD_DEFAULT;
    }
    private static final int CURLFTPMETHOD_MULTICWD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPMETHOD_MULTICWD = 1
     * }
     */
    public static int CURLFTPMETHOD_MULTICWD() {
        return CURLFTPMETHOD_MULTICWD;
    }
    private static final int CURLFTPMETHOD_NOCWD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPMETHOD_NOCWD = 2
     * }
     */
    public static int CURLFTPMETHOD_NOCWD() {
        return CURLFTPMETHOD_NOCWD;
    }
    private static final int CURLFTPMETHOD_SINGLECWD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPMETHOD_SINGLECWD = 3
     * }
     */
    public static int CURLFTPMETHOD_SINGLECWD() {
        return CURLFTPMETHOD_SINGLECWD;
    }
    private static final int CURLFTPMETHOD_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFTPMETHOD_LAST = 4
     * }
     */
    public static int CURLFTPMETHOD_LAST() {
        return CURLFTPMETHOD_LAST;
    }
    private static final int CURLSTS_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSTS_OK = 0
     * }
     */
    public static int CURLSTS_OK() {
        return CURLSTS_OK;
    }
    private static final int CURLSTS_DONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSTS_DONE = 1
     * }
     */
    public static int CURLSTS_DONE() {
        return CURLSTS_DONE;
    }
    private static final int CURLSTS_FAIL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSTS_FAIL = 2
     * }
     */
    public static int CURLSTS_FAIL() {
        return CURLSTS_FAIL;
    }
    private static final int CURLOPT_WRITEDATA = (int)10001L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_WRITEDATA = 10001
     * }
     */
    public static int CURLOPT_WRITEDATA() {
        return CURLOPT_WRITEDATA;
    }
    private static final int CURLOPT_URL = (int)10002L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_URL = 10002
     * }
     */
    public static int CURLOPT_URL() {
        return CURLOPT_URL;
    }
    private static final int CURLOPT_PORT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PORT = 3
     * }
     */
    public static int CURLOPT_PORT() {
        return CURLOPT_PORT;
    }
    private static final int CURLOPT_PROXY = (int)10004L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY = 10004
     * }
     */
    public static int CURLOPT_PROXY() {
        return CURLOPT_PROXY;
    }
    private static final int CURLOPT_USERPWD = (int)10005L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_USERPWD = 10005
     * }
     */
    public static int CURLOPT_USERPWD() {
        return CURLOPT_USERPWD;
    }
    private static final int CURLOPT_PROXYUSERPWD = (int)10006L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXYUSERPWD = 10006
     * }
     */
    public static int CURLOPT_PROXYUSERPWD() {
        return CURLOPT_PROXYUSERPWD;
    }
    private static final int CURLOPT_RANGE = (int)10007L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RANGE = 10007
     * }
     */
    public static int CURLOPT_RANGE() {
        return CURLOPT_RANGE;
    }
    private static final int CURLOPT_READDATA = (int)10009L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_READDATA = 10009
     * }
     */
    public static int CURLOPT_READDATA() {
        return CURLOPT_READDATA;
    }
    private static final int CURLOPT_ERRORBUFFER = (int)10010L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ERRORBUFFER = 10010
     * }
     */
    public static int CURLOPT_ERRORBUFFER() {
        return CURLOPT_ERRORBUFFER;
    }
    private static final int CURLOPT_WRITEFUNCTION = (int)20011L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_WRITEFUNCTION = 20011
     * }
     */
    public static int CURLOPT_WRITEFUNCTION() {
        return CURLOPT_WRITEFUNCTION;
    }
    private static final int CURLOPT_READFUNCTION = (int)20012L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_READFUNCTION = 20012
     * }
     */
    public static int CURLOPT_READFUNCTION() {
        return CURLOPT_READFUNCTION;
    }
    private static final int CURLOPT_TIMEOUT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TIMEOUT = 13
     * }
     */
    public static int CURLOPT_TIMEOUT() {
        return CURLOPT_TIMEOUT;
    }
    private static final int CURLOPT_INFILESIZE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_INFILESIZE = 14
     * }
     */
    public static int CURLOPT_INFILESIZE() {
        return CURLOPT_INFILESIZE;
    }
    private static final int CURLOPT_POSTFIELDS = (int)10015L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_POSTFIELDS = 10015
     * }
     */
    public static int CURLOPT_POSTFIELDS() {
        return CURLOPT_POSTFIELDS;
    }
    private static final int CURLOPT_REFERER = (int)10016L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_REFERER = 10016
     * }
     */
    public static int CURLOPT_REFERER() {
        return CURLOPT_REFERER;
    }
    private static final int CURLOPT_FTPPORT = (int)10017L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTPPORT = 10017
     * }
     */
    public static int CURLOPT_FTPPORT() {
        return CURLOPT_FTPPORT;
    }
    private static final int CURLOPT_USERAGENT = (int)10018L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_USERAGENT = 10018
     * }
     */
    public static int CURLOPT_USERAGENT() {
        return CURLOPT_USERAGENT;
    }
    private static final int CURLOPT_LOW_SPEED_LIMIT = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_LOW_SPEED_LIMIT = 19
     * }
     */
    public static int CURLOPT_LOW_SPEED_LIMIT() {
        return CURLOPT_LOW_SPEED_LIMIT;
    }
    private static final int CURLOPT_LOW_SPEED_TIME = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_LOW_SPEED_TIME = 20
     * }
     */
    public static int CURLOPT_LOW_SPEED_TIME() {
        return CURLOPT_LOW_SPEED_TIME;
    }
    private static final int CURLOPT_RESUME_FROM = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RESUME_FROM = 21
     * }
     */
    public static int CURLOPT_RESUME_FROM() {
        return CURLOPT_RESUME_FROM;
    }
    private static final int CURLOPT_COOKIE = (int)10022L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_COOKIE = 10022
     * }
     */
    public static int CURLOPT_COOKIE() {
        return CURLOPT_COOKIE;
    }
    private static final int CURLOPT_HTTPHEADER = (int)10023L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTPHEADER = 10023
     * }
     */
    public static int CURLOPT_HTTPHEADER() {
        return CURLOPT_HTTPHEADER;
    }
    private static final int CURLOPT_HTTPPOST = (int)10024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTPPOST = 10024
     * }
     */
    public static int CURLOPT_HTTPPOST() {
        return CURLOPT_HTTPPOST;
    }
    private static final int CURLOPT_SSLCERT = (int)10025L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLCERT = 10025
     * }
     */
    public static int CURLOPT_SSLCERT() {
        return CURLOPT_SSLCERT;
    }
    private static final int CURLOPT_KEYPASSWD = (int)10026L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_KEYPASSWD = 10026
     * }
     */
    public static int CURLOPT_KEYPASSWD() {
        return CURLOPT_KEYPASSWD;
    }
    private static final int CURLOPT_CRLF = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CRLF = 27
     * }
     */
    public static int CURLOPT_CRLF() {
        return CURLOPT_CRLF;
    }
    private static final int CURLOPT_QUOTE = (int)10028L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_QUOTE = 10028
     * }
     */
    public static int CURLOPT_QUOTE() {
        return CURLOPT_QUOTE;
    }
    private static final int CURLOPT_HEADERDATA = (int)10029L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HEADERDATA = 10029
     * }
     */
    public static int CURLOPT_HEADERDATA() {
        return CURLOPT_HEADERDATA;
    }
    private static final int CURLOPT_COOKIEFILE = (int)10031L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_COOKIEFILE = 10031
     * }
     */
    public static int CURLOPT_COOKIEFILE() {
        return CURLOPT_COOKIEFILE;
    }
    private static final int CURLOPT_SSLVERSION = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLVERSION = 32
     * }
     */
    public static int CURLOPT_SSLVERSION() {
        return CURLOPT_SSLVERSION;
    }
    private static final int CURLOPT_TIMECONDITION = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TIMECONDITION = 33
     * }
     */
    public static int CURLOPT_TIMECONDITION() {
        return CURLOPT_TIMECONDITION;
    }
    private static final int CURLOPT_TIMEVALUE = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TIMEVALUE = 34
     * }
     */
    public static int CURLOPT_TIMEVALUE() {
        return CURLOPT_TIMEVALUE;
    }
    private static final int CURLOPT_CUSTOMREQUEST = (int)10036L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CUSTOMREQUEST = 10036
     * }
     */
    public static int CURLOPT_CUSTOMREQUEST() {
        return CURLOPT_CUSTOMREQUEST;
    }
    private static final int CURLOPT_STDERR = (int)10037L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_STDERR = 10037
     * }
     */
    public static int CURLOPT_STDERR() {
        return CURLOPT_STDERR;
    }
    private static final int CURLOPT_POSTQUOTE = (int)10039L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_POSTQUOTE = 10039
     * }
     */
    public static int CURLOPT_POSTQUOTE() {
        return CURLOPT_POSTQUOTE;
    }
    private static final int CURLOPT_VERBOSE = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_VERBOSE = 41
     * }
     */
    public static int CURLOPT_VERBOSE() {
        return CURLOPT_VERBOSE;
    }
    private static final int CURLOPT_HEADER = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HEADER = 42
     * }
     */
    public static int CURLOPT_HEADER() {
        return CURLOPT_HEADER;
    }
    private static final int CURLOPT_NOPROGRESS = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_NOPROGRESS = 43
     * }
     */
    public static int CURLOPT_NOPROGRESS() {
        return CURLOPT_NOPROGRESS;
    }
    private static final int CURLOPT_NOBODY = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_NOBODY = 44
     * }
     */
    public static int CURLOPT_NOBODY() {
        return CURLOPT_NOBODY;
    }
    private static final int CURLOPT_FAILONERROR = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FAILONERROR = 45
     * }
     */
    public static int CURLOPT_FAILONERROR() {
        return CURLOPT_FAILONERROR;
    }
    private static final int CURLOPT_UPLOAD = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_UPLOAD = 46
     * }
     */
    public static int CURLOPT_UPLOAD() {
        return CURLOPT_UPLOAD;
    }
    private static final int CURLOPT_POST = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_POST = 47
     * }
     */
    public static int CURLOPT_POST() {
        return CURLOPT_POST;
    }
    private static final int CURLOPT_DIRLISTONLY = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DIRLISTONLY = 48
     * }
     */
    public static int CURLOPT_DIRLISTONLY() {
        return CURLOPT_DIRLISTONLY;
    }
    private static final int CURLOPT_APPEND = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_APPEND = 50
     * }
     */
    public static int CURLOPT_APPEND() {
        return CURLOPT_APPEND;
    }
    private static final int CURLOPT_NETRC = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_NETRC = 51
     * }
     */
    public static int CURLOPT_NETRC() {
        return CURLOPT_NETRC;
    }
    private static final int CURLOPT_FOLLOWLOCATION = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FOLLOWLOCATION = 52
     * }
     */
    public static int CURLOPT_FOLLOWLOCATION() {
        return CURLOPT_FOLLOWLOCATION;
    }
    private static final int CURLOPT_TRANSFERTEXT = (int)53L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TRANSFERTEXT = 53
     * }
     */
    public static int CURLOPT_TRANSFERTEXT() {
        return CURLOPT_TRANSFERTEXT;
    }
    private static final int CURLOPT_PUT = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PUT = 54
     * }
     */
    public static int CURLOPT_PUT() {
        return CURLOPT_PUT;
    }
    private static final int CURLOPT_PROGRESSFUNCTION = (int)20056L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROGRESSFUNCTION = 20056
     * }
     */
    public static int CURLOPT_PROGRESSFUNCTION() {
        return CURLOPT_PROGRESSFUNCTION;
    }
    private static final int CURLOPT_XFERINFODATA = (int)10057L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_XFERINFODATA = 10057
     * }
     */
    public static int CURLOPT_XFERINFODATA() {
        return CURLOPT_XFERINFODATA;
    }
    private static final int CURLOPT_AUTOREFERER = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_AUTOREFERER = 58
     * }
     */
    public static int CURLOPT_AUTOREFERER() {
        return CURLOPT_AUTOREFERER;
    }
    private static final int CURLOPT_PROXYPORT = (int)59L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXYPORT = 59
     * }
     */
    public static int CURLOPT_PROXYPORT() {
        return CURLOPT_PROXYPORT;
    }
    private static final int CURLOPT_POSTFIELDSIZE = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_POSTFIELDSIZE = 60
     * }
     */
    public static int CURLOPT_POSTFIELDSIZE() {
        return CURLOPT_POSTFIELDSIZE;
    }
    private static final int CURLOPT_HTTPPROXYTUNNEL = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTPPROXYTUNNEL = 61
     * }
     */
    public static int CURLOPT_HTTPPROXYTUNNEL() {
        return CURLOPT_HTTPPROXYTUNNEL;
    }
    private static final int CURLOPT_INTERFACE = (int)10062L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_INTERFACE = 10062
     * }
     */
    public static int CURLOPT_INTERFACE() {
        return CURLOPT_INTERFACE;
    }
    private static final int CURLOPT_KRBLEVEL = (int)10063L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_KRBLEVEL = 10063
     * }
     */
    public static int CURLOPT_KRBLEVEL() {
        return CURLOPT_KRBLEVEL;
    }
    private static final int CURLOPT_SSL_VERIFYPEER = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_VERIFYPEER = 64
     * }
     */
    public static int CURLOPT_SSL_VERIFYPEER() {
        return CURLOPT_SSL_VERIFYPEER;
    }
    private static final int CURLOPT_CAINFO = (int)10065L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CAINFO = 10065
     * }
     */
    public static int CURLOPT_CAINFO() {
        return CURLOPT_CAINFO;
    }
    private static final int CURLOPT_MAXREDIRS = (int)68L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAXREDIRS = 68
     * }
     */
    public static int CURLOPT_MAXREDIRS() {
        return CURLOPT_MAXREDIRS;
    }
    private static final int CURLOPT_FILETIME = (int)69L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FILETIME = 69
     * }
     */
    public static int CURLOPT_FILETIME() {
        return CURLOPT_FILETIME;
    }
    private static final int CURLOPT_TELNETOPTIONS = (int)10070L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TELNETOPTIONS = 10070
     * }
     */
    public static int CURLOPT_TELNETOPTIONS() {
        return CURLOPT_TELNETOPTIONS;
    }
    private static final int CURLOPT_MAXCONNECTS = (int)71L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAXCONNECTS = 71
     * }
     */
    public static int CURLOPT_MAXCONNECTS() {
        return CURLOPT_MAXCONNECTS;
    }
    private static final int CURLOPT_FRESH_CONNECT = (int)74L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FRESH_CONNECT = 74
     * }
     */
    public static int CURLOPT_FRESH_CONNECT() {
        return CURLOPT_FRESH_CONNECT;
    }
    private static final int CURLOPT_FORBID_REUSE = (int)75L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FORBID_REUSE = 75
     * }
     */
    public static int CURLOPT_FORBID_REUSE() {
        return CURLOPT_FORBID_REUSE;
    }
    private static final int CURLOPT_RANDOM_FILE = (int)10076L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RANDOM_FILE = 10076
     * }
     */
    public static int CURLOPT_RANDOM_FILE() {
        return CURLOPT_RANDOM_FILE;
    }
    private static final int CURLOPT_EGDSOCKET = (int)10077L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_EGDSOCKET = 10077
     * }
     */
    public static int CURLOPT_EGDSOCKET() {
        return CURLOPT_EGDSOCKET;
    }
    private static final int CURLOPT_CONNECTTIMEOUT = (int)78L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CONNECTTIMEOUT = 78
     * }
     */
    public static int CURLOPT_CONNECTTIMEOUT() {
        return CURLOPT_CONNECTTIMEOUT;
    }
    private static final int CURLOPT_HEADERFUNCTION = (int)20079L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HEADERFUNCTION = 20079
     * }
     */
    public static int CURLOPT_HEADERFUNCTION() {
        return CURLOPT_HEADERFUNCTION;
    }
    private static final int CURLOPT_HTTPGET = (int)80L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTPGET = 80
     * }
     */
    public static int CURLOPT_HTTPGET() {
        return CURLOPT_HTTPGET;
    }
    private static final int CURLOPT_SSL_VERIFYHOST = (int)81L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_VERIFYHOST = 81
     * }
     */
    public static int CURLOPT_SSL_VERIFYHOST() {
        return CURLOPT_SSL_VERIFYHOST;
    }
    private static final int CURLOPT_COOKIEJAR = (int)10082L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_COOKIEJAR = 10082
     * }
     */
    public static int CURLOPT_COOKIEJAR() {
        return CURLOPT_COOKIEJAR;
    }
    private static final int CURLOPT_SSL_CIPHER_LIST = (int)10083L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_CIPHER_LIST = 10083
     * }
     */
    public static int CURLOPT_SSL_CIPHER_LIST() {
        return CURLOPT_SSL_CIPHER_LIST;
    }
    private static final int CURLOPT_HTTP_VERSION = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTP_VERSION = 84
     * }
     */
    public static int CURLOPT_HTTP_VERSION() {
        return CURLOPT_HTTP_VERSION;
    }
    private static final int CURLOPT_FTP_USE_EPSV = (int)85L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_USE_EPSV = 85
     * }
     */
    public static int CURLOPT_FTP_USE_EPSV() {
        return CURLOPT_FTP_USE_EPSV;
    }
    private static final int CURLOPT_SSLCERTTYPE = (int)10086L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLCERTTYPE = 10086
     * }
     */
    public static int CURLOPT_SSLCERTTYPE() {
        return CURLOPT_SSLCERTTYPE;
    }
    private static final int CURLOPT_SSLKEY = (int)10087L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLKEY = 10087
     * }
     */
    public static int CURLOPT_SSLKEY() {
        return CURLOPT_SSLKEY;
    }
    private static final int CURLOPT_SSLKEYTYPE = (int)10088L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLKEYTYPE = 10088
     * }
     */
    public static int CURLOPT_SSLKEYTYPE() {
        return CURLOPT_SSLKEYTYPE;
    }
    private static final int CURLOPT_SSLENGINE = (int)10089L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLENGINE = 10089
     * }
     */
    public static int CURLOPT_SSLENGINE() {
        return CURLOPT_SSLENGINE;
    }
    private static final int CURLOPT_SSLENGINE_DEFAULT = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLENGINE_DEFAULT = 90
     * }
     */
    public static int CURLOPT_SSLENGINE_DEFAULT() {
        return CURLOPT_SSLENGINE_DEFAULT;
    }
    private static final int CURLOPT_DNS_USE_GLOBAL_CACHE = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DNS_USE_GLOBAL_CACHE = 91
     * }
     */
    public static int CURLOPT_DNS_USE_GLOBAL_CACHE() {
        return CURLOPT_DNS_USE_GLOBAL_CACHE;
    }
    private static final int CURLOPT_DNS_CACHE_TIMEOUT = (int)92L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DNS_CACHE_TIMEOUT = 92
     * }
     */
    public static int CURLOPT_DNS_CACHE_TIMEOUT() {
        return CURLOPT_DNS_CACHE_TIMEOUT;
    }
    private static final int CURLOPT_PREQUOTE = (int)10093L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PREQUOTE = 10093
     * }
     */
    public static int CURLOPT_PREQUOTE() {
        return CURLOPT_PREQUOTE;
    }
    private static final int CURLOPT_DEBUGFUNCTION = (int)20094L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DEBUGFUNCTION = 20094
     * }
     */
    public static int CURLOPT_DEBUGFUNCTION() {
        return CURLOPT_DEBUGFUNCTION;
    }
    private static final int CURLOPT_DEBUGDATA = (int)10095L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DEBUGDATA = 10095
     * }
     */
    public static int CURLOPT_DEBUGDATA() {
        return CURLOPT_DEBUGDATA;
    }
    private static final int CURLOPT_COOKIESESSION = (int)96L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_COOKIESESSION = 96
     * }
     */
    public static int CURLOPT_COOKIESESSION() {
        return CURLOPT_COOKIESESSION;
    }
    private static final int CURLOPT_CAPATH = (int)10097L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CAPATH = 10097
     * }
     */
    public static int CURLOPT_CAPATH() {
        return CURLOPT_CAPATH;
    }
    private static final int CURLOPT_BUFFERSIZE = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_BUFFERSIZE = 98
     * }
     */
    public static int CURLOPT_BUFFERSIZE() {
        return CURLOPT_BUFFERSIZE;
    }
    private static final int CURLOPT_NOSIGNAL = (int)99L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_NOSIGNAL = 99
     * }
     */
    public static int CURLOPT_NOSIGNAL() {
        return CURLOPT_NOSIGNAL;
    }
    private static final int CURLOPT_SHARE = (int)10100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SHARE = 10100
     * }
     */
    public static int CURLOPT_SHARE() {
        return CURLOPT_SHARE;
    }
    private static final int CURLOPT_PROXYTYPE = (int)101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXYTYPE = 101
     * }
     */
    public static int CURLOPT_PROXYTYPE() {
        return CURLOPT_PROXYTYPE;
    }
    private static final int CURLOPT_ACCEPT_ENCODING = (int)10102L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ACCEPT_ENCODING = 10102
     * }
     */
    public static int CURLOPT_ACCEPT_ENCODING() {
        return CURLOPT_ACCEPT_ENCODING;
    }
    private static final int CURLOPT_PRIVATE = (int)10103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PRIVATE = 10103
     * }
     */
    public static int CURLOPT_PRIVATE() {
        return CURLOPT_PRIVATE;
    }
    private static final int CURLOPT_HTTP200ALIASES = (int)10104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTP200ALIASES = 10104
     * }
     */
    public static int CURLOPT_HTTP200ALIASES() {
        return CURLOPT_HTTP200ALIASES;
    }
    private static final int CURLOPT_UNRESTRICTED_AUTH = (int)105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_UNRESTRICTED_AUTH = 105
     * }
     */
    public static int CURLOPT_UNRESTRICTED_AUTH() {
        return CURLOPT_UNRESTRICTED_AUTH;
    }
    private static final int CURLOPT_FTP_USE_EPRT = (int)106L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_USE_EPRT = 106
     * }
     */
    public static int CURLOPT_FTP_USE_EPRT() {
        return CURLOPT_FTP_USE_EPRT;
    }
    private static final int CURLOPT_HTTPAUTH = (int)107L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTPAUTH = 107
     * }
     */
    public static int CURLOPT_HTTPAUTH() {
        return CURLOPT_HTTPAUTH;
    }
    private static final int CURLOPT_SSL_CTX_FUNCTION = (int)20108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_CTX_FUNCTION = 20108
     * }
     */
    public static int CURLOPT_SSL_CTX_FUNCTION() {
        return CURLOPT_SSL_CTX_FUNCTION;
    }
    private static final int CURLOPT_SSL_CTX_DATA = (int)10109L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_CTX_DATA = 10109
     * }
     */
    public static int CURLOPT_SSL_CTX_DATA() {
        return CURLOPT_SSL_CTX_DATA;
    }
    private static final int CURLOPT_FTP_CREATE_MISSING_DIRS = (int)110L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_CREATE_MISSING_DIRS = 110
     * }
     */
    public static int CURLOPT_FTP_CREATE_MISSING_DIRS() {
        return CURLOPT_FTP_CREATE_MISSING_DIRS;
    }
    private static final int CURLOPT_PROXYAUTH = (int)111L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXYAUTH = 111
     * }
     */
    public static int CURLOPT_PROXYAUTH() {
        return CURLOPT_PROXYAUTH;
    }
    private static final int CURLOPT_SERVER_RESPONSE_TIMEOUT = (int)112L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SERVER_RESPONSE_TIMEOUT = 112
     * }
     */
    public static int CURLOPT_SERVER_RESPONSE_TIMEOUT() {
        return CURLOPT_SERVER_RESPONSE_TIMEOUT;
    }
    private static final int CURLOPT_IPRESOLVE = (int)113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_IPRESOLVE = 113
     * }
     */
    public static int CURLOPT_IPRESOLVE() {
        return CURLOPT_IPRESOLVE;
    }
    private static final int CURLOPT_MAXFILESIZE = (int)114L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAXFILESIZE = 114
     * }
     */
    public static int CURLOPT_MAXFILESIZE() {
        return CURLOPT_MAXFILESIZE;
    }
    private static final int CURLOPT_INFILESIZE_LARGE = (int)30115L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_INFILESIZE_LARGE = 30115
     * }
     */
    public static int CURLOPT_INFILESIZE_LARGE() {
        return CURLOPT_INFILESIZE_LARGE;
    }
    private static final int CURLOPT_RESUME_FROM_LARGE = (int)30116L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RESUME_FROM_LARGE = 30116
     * }
     */
    public static int CURLOPT_RESUME_FROM_LARGE() {
        return CURLOPT_RESUME_FROM_LARGE;
    }
    private static final int CURLOPT_MAXFILESIZE_LARGE = (int)30117L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAXFILESIZE_LARGE = 30117
     * }
     */
    public static int CURLOPT_MAXFILESIZE_LARGE() {
        return CURLOPT_MAXFILESIZE_LARGE;
    }
    private static final int CURLOPT_NETRC_FILE = (int)10118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_NETRC_FILE = 10118
     * }
     */
    public static int CURLOPT_NETRC_FILE() {
        return CURLOPT_NETRC_FILE;
    }
    private static final int CURLOPT_USE_SSL = (int)119L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_USE_SSL = 119
     * }
     */
    public static int CURLOPT_USE_SSL() {
        return CURLOPT_USE_SSL;
    }
    private static final int CURLOPT_POSTFIELDSIZE_LARGE = (int)30120L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_POSTFIELDSIZE_LARGE = 30120
     * }
     */
    public static int CURLOPT_POSTFIELDSIZE_LARGE() {
        return CURLOPT_POSTFIELDSIZE_LARGE;
    }
    private static final int CURLOPT_TCP_NODELAY = (int)121L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TCP_NODELAY = 121
     * }
     */
    public static int CURLOPT_TCP_NODELAY() {
        return CURLOPT_TCP_NODELAY;
    }
    private static final int CURLOPT_FTPSSLAUTH = (int)129L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTPSSLAUTH = 129
     * }
     */
    public static int CURLOPT_FTPSSLAUTH() {
        return CURLOPT_FTPSSLAUTH;
    }
    private static final int CURLOPT_IOCTLFUNCTION = (int)20130L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_IOCTLFUNCTION = 20130
     * }
     */
    public static int CURLOPT_IOCTLFUNCTION() {
        return CURLOPT_IOCTLFUNCTION;
    }
    private static final int CURLOPT_IOCTLDATA = (int)10131L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_IOCTLDATA = 10131
     * }
     */
    public static int CURLOPT_IOCTLDATA() {
        return CURLOPT_IOCTLDATA;
    }
    private static final int CURLOPT_FTP_ACCOUNT = (int)10134L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_ACCOUNT = 10134
     * }
     */
    public static int CURLOPT_FTP_ACCOUNT() {
        return CURLOPT_FTP_ACCOUNT;
    }
    private static final int CURLOPT_COOKIELIST = (int)10135L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_COOKIELIST = 10135
     * }
     */
    public static int CURLOPT_COOKIELIST() {
        return CURLOPT_COOKIELIST;
    }
    private static final int CURLOPT_IGNORE_CONTENT_LENGTH = (int)136L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_IGNORE_CONTENT_LENGTH = 136
     * }
     */
    public static int CURLOPT_IGNORE_CONTENT_LENGTH() {
        return CURLOPT_IGNORE_CONTENT_LENGTH;
    }
    private static final int CURLOPT_FTP_SKIP_PASV_IP = (int)137L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_SKIP_PASV_IP = 137
     * }
     */
    public static int CURLOPT_FTP_SKIP_PASV_IP() {
        return CURLOPT_FTP_SKIP_PASV_IP;
    }
    private static final int CURLOPT_FTP_FILEMETHOD = (int)138L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_FILEMETHOD = 138
     * }
     */
    public static int CURLOPT_FTP_FILEMETHOD() {
        return CURLOPT_FTP_FILEMETHOD;
    }
    private static final int CURLOPT_LOCALPORT = (int)139L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_LOCALPORT = 139
     * }
     */
    public static int CURLOPT_LOCALPORT() {
        return CURLOPT_LOCALPORT;
    }
    private static final int CURLOPT_LOCALPORTRANGE = (int)140L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_LOCALPORTRANGE = 140
     * }
     */
    public static int CURLOPT_LOCALPORTRANGE() {
        return CURLOPT_LOCALPORTRANGE;
    }
    private static final int CURLOPT_CONNECT_ONLY = (int)141L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CONNECT_ONLY = 141
     * }
     */
    public static int CURLOPT_CONNECT_ONLY() {
        return CURLOPT_CONNECT_ONLY;
    }
    private static final int CURLOPT_CONV_FROM_NETWORK_FUNCTION = (int)20142L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CONV_FROM_NETWORK_FUNCTION = 20142
     * }
     */
    public static int CURLOPT_CONV_FROM_NETWORK_FUNCTION() {
        return CURLOPT_CONV_FROM_NETWORK_FUNCTION;
    }
    private static final int CURLOPT_CONV_TO_NETWORK_FUNCTION = (int)20143L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CONV_TO_NETWORK_FUNCTION = 20143
     * }
     */
    public static int CURLOPT_CONV_TO_NETWORK_FUNCTION() {
        return CURLOPT_CONV_TO_NETWORK_FUNCTION;
    }
    private static final int CURLOPT_CONV_FROM_UTF8_FUNCTION = (int)20144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CONV_FROM_UTF8_FUNCTION = 20144
     * }
     */
    public static int CURLOPT_CONV_FROM_UTF8_FUNCTION() {
        return CURLOPT_CONV_FROM_UTF8_FUNCTION;
    }
    private static final int CURLOPT_MAX_SEND_SPEED_LARGE = (int)30145L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAX_SEND_SPEED_LARGE = 30145
     * }
     */
    public static int CURLOPT_MAX_SEND_SPEED_LARGE() {
        return CURLOPT_MAX_SEND_SPEED_LARGE;
    }
    private static final int CURLOPT_MAX_RECV_SPEED_LARGE = (int)30146L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAX_RECV_SPEED_LARGE = 30146
     * }
     */
    public static int CURLOPT_MAX_RECV_SPEED_LARGE() {
        return CURLOPT_MAX_RECV_SPEED_LARGE;
    }
    private static final int CURLOPT_FTP_ALTERNATIVE_TO_USER = (int)10147L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_ALTERNATIVE_TO_USER = 10147
     * }
     */
    public static int CURLOPT_FTP_ALTERNATIVE_TO_USER() {
        return CURLOPT_FTP_ALTERNATIVE_TO_USER;
    }
    private static final int CURLOPT_SOCKOPTFUNCTION = (int)20148L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SOCKOPTFUNCTION = 20148
     * }
     */
    public static int CURLOPT_SOCKOPTFUNCTION() {
        return CURLOPT_SOCKOPTFUNCTION;
    }
    private static final int CURLOPT_SOCKOPTDATA = (int)10149L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SOCKOPTDATA = 10149
     * }
     */
    public static int CURLOPT_SOCKOPTDATA() {
        return CURLOPT_SOCKOPTDATA;
    }
    private static final int CURLOPT_SSL_SESSIONID_CACHE = (int)150L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_SESSIONID_CACHE = 150
     * }
     */
    public static int CURLOPT_SSL_SESSIONID_CACHE() {
        return CURLOPT_SSL_SESSIONID_CACHE;
    }
    private static final int CURLOPT_SSH_AUTH_TYPES = (int)151L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_AUTH_TYPES = 151
     * }
     */
    public static int CURLOPT_SSH_AUTH_TYPES() {
        return CURLOPT_SSH_AUTH_TYPES;
    }
    private static final int CURLOPT_SSH_PUBLIC_KEYFILE = (int)10152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_PUBLIC_KEYFILE = 10152
     * }
     */
    public static int CURLOPT_SSH_PUBLIC_KEYFILE() {
        return CURLOPT_SSH_PUBLIC_KEYFILE;
    }
    private static final int CURLOPT_SSH_PRIVATE_KEYFILE = (int)10153L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_PRIVATE_KEYFILE = 10153
     * }
     */
    public static int CURLOPT_SSH_PRIVATE_KEYFILE() {
        return CURLOPT_SSH_PRIVATE_KEYFILE;
    }
    private static final int CURLOPT_FTP_SSL_CCC = (int)154L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_SSL_CCC = 154
     * }
     */
    public static int CURLOPT_FTP_SSL_CCC() {
        return CURLOPT_FTP_SSL_CCC;
    }
    private static final int CURLOPT_TIMEOUT_MS = (int)155L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TIMEOUT_MS = 155
     * }
     */
    public static int CURLOPT_TIMEOUT_MS() {
        return CURLOPT_TIMEOUT_MS;
    }
    private static final int CURLOPT_CONNECTTIMEOUT_MS = (int)156L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CONNECTTIMEOUT_MS = 156
     * }
     */
    public static int CURLOPT_CONNECTTIMEOUT_MS() {
        return CURLOPT_CONNECTTIMEOUT_MS;
    }
    private static final int CURLOPT_HTTP_TRANSFER_DECODING = (int)157L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTP_TRANSFER_DECODING = 157
     * }
     */
    public static int CURLOPT_HTTP_TRANSFER_DECODING() {
        return CURLOPT_HTTP_TRANSFER_DECODING;
    }
    private static final int CURLOPT_HTTP_CONTENT_DECODING = (int)158L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTP_CONTENT_DECODING = 158
     * }
     */
    public static int CURLOPT_HTTP_CONTENT_DECODING() {
        return CURLOPT_HTTP_CONTENT_DECODING;
    }
    private static final int CURLOPT_NEW_FILE_PERMS = (int)159L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_NEW_FILE_PERMS = 159
     * }
     */
    public static int CURLOPT_NEW_FILE_PERMS() {
        return CURLOPT_NEW_FILE_PERMS;
    }
    private static final int CURLOPT_NEW_DIRECTORY_PERMS = (int)160L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_NEW_DIRECTORY_PERMS = 160
     * }
     */
    public static int CURLOPT_NEW_DIRECTORY_PERMS() {
        return CURLOPT_NEW_DIRECTORY_PERMS;
    }
    private static final int CURLOPT_POSTREDIR = (int)161L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_POSTREDIR = 161
     * }
     */
    public static int CURLOPT_POSTREDIR() {
        return CURLOPT_POSTREDIR;
    }
    private static final int CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = (int)10162L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = 10162
     * }
     */
    public static int CURLOPT_SSH_HOST_PUBLIC_KEY_MD5() {
        return CURLOPT_SSH_HOST_PUBLIC_KEY_MD5;
    }
    private static final int CURLOPT_OPENSOCKETFUNCTION = (int)20163L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_OPENSOCKETFUNCTION = 20163
     * }
     */
    public static int CURLOPT_OPENSOCKETFUNCTION() {
        return CURLOPT_OPENSOCKETFUNCTION;
    }
    private static final int CURLOPT_OPENSOCKETDATA = (int)10164L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_OPENSOCKETDATA = 10164
     * }
     */
    public static int CURLOPT_OPENSOCKETDATA() {
        return CURLOPT_OPENSOCKETDATA;
    }
    private static final int CURLOPT_COPYPOSTFIELDS = (int)10165L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_COPYPOSTFIELDS = 10165
     * }
     */
    public static int CURLOPT_COPYPOSTFIELDS() {
        return CURLOPT_COPYPOSTFIELDS;
    }
    private static final int CURLOPT_PROXY_TRANSFER_MODE = (int)166L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_TRANSFER_MODE = 166
     * }
     */
    public static int CURLOPT_PROXY_TRANSFER_MODE() {
        return CURLOPT_PROXY_TRANSFER_MODE;
    }
    private static final int CURLOPT_SEEKFUNCTION = (int)20167L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SEEKFUNCTION = 20167
     * }
     */
    public static int CURLOPT_SEEKFUNCTION() {
        return CURLOPT_SEEKFUNCTION;
    }
    private static final int CURLOPT_SEEKDATA = (int)10168L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SEEKDATA = 10168
     * }
     */
    public static int CURLOPT_SEEKDATA() {
        return CURLOPT_SEEKDATA;
    }
    private static final int CURLOPT_CRLFILE = (int)10169L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CRLFILE = 10169
     * }
     */
    public static int CURLOPT_CRLFILE() {
        return CURLOPT_CRLFILE;
    }
    private static final int CURLOPT_ISSUERCERT = (int)10170L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ISSUERCERT = 10170
     * }
     */
    public static int CURLOPT_ISSUERCERT() {
        return CURLOPT_ISSUERCERT;
    }
    private static final int CURLOPT_ADDRESS_SCOPE = (int)171L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ADDRESS_SCOPE = 171
     * }
     */
    public static int CURLOPT_ADDRESS_SCOPE() {
        return CURLOPT_ADDRESS_SCOPE;
    }
    private static final int CURLOPT_CERTINFO = (int)172L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CERTINFO = 172
     * }
     */
    public static int CURLOPT_CERTINFO() {
        return CURLOPT_CERTINFO;
    }
    private static final int CURLOPT_USERNAME = (int)10173L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_USERNAME = 10173
     * }
     */
    public static int CURLOPT_USERNAME() {
        return CURLOPT_USERNAME;
    }
    private static final int CURLOPT_PASSWORD = (int)10174L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PASSWORD = 10174
     * }
     */
    public static int CURLOPT_PASSWORD() {
        return CURLOPT_PASSWORD;
    }
    private static final int CURLOPT_PROXYUSERNAME = (int)10175L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXYUSERNAME = 10175
     * }
     */
    public static int CURLOPT_PROXYUSERNAME() {
        return CURLOPT_PROXYUSERNAME;
    }
    private static final int CURLOPT_PROXYPASSWORD = (int)10176L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXYPASSWORD = 10176
     * }
     */
    public static int CURLOPT_PROXYPASSWORD() {
        return CURLOPT_PROXYPASSWORD;
    }
    private static final int CURLOPT_NOPROXY = (int)10177L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_NOPROXY = 10177
     * }
     */
    public static int CURLOPT_NOPROXY() {
        return CURLOPT_NOPROXY;
    }
    private static final int CURLOPT_TFTP_BLKSIZE = (int)178L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TFTP_BLKSIZE = 178
     * }
     */
    public static int CURLOPT_TFTP_BLKSIZE() {
        return CURLOPT_TFTP_BLKSIZE;
    }
    private static final int CURLOPT_SOCKS5_GSSAPI_SERVICE = (int)10179L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SOCKS5_GSSAPI_SERVICE = 10179
     * }
     */
    public static int CURLOPT_SOCKS5_GSSAPI_SERVICE() {
        return CURLOPT_SOCKS5_GSSAPI_SERVICE;
    }
    private static final int CURLOPT_SOCKS5_GSSAPI_NEC = (int)180L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SOCKS5_GSSAPI_NEC = 180
     * }
     */
    public static int CURLOPT_SOCKS5_GSSAPI_NEC() {
        return CURLOPT_SOCKS5_GSSAPI_NEC;
    }
    private static final int CURLOPT_PROTOCOLS = (int)181L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROTOCOLS = 181
     * }
     */
    public static int CURLOPT_PROTOCOLS() {
        return CURLOPT_PROTOCOLS;
    }
    private static final int CURLOPT_REDIR_PROTOCOLS = (int)182L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_REDIR_PROTOCOLS = 182
     * }
     */
    public static int CURLOPT_REDIR_PROTOCOLS() {
        return CURLOPT_REDIR_PROTOCOLS;
    }
    private static final int CURLOPT_SSH_KNOWNHOSTS = (int)10183L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_KNOWNHOSTS = 10183
     * }
     */
    public static int CURLOPT_SSH_KNOWNHOSTS() {
        return CURLOPT_SSH_KNOWNHOSTS;
    }
    private static final int CURLOPT_SSH_KEYFUNCTION = (int)20184L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_KEYFUNCTION = 20184
     * }
     */
    public static int CURLOPT_SSH_KEYFUNCTION() {
        return CURLOPT_SSH_KEYFUNCTION;
    }
    private static final int CURLOPT_SSH_KEYDATA = (int)10185L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_KEYDATA = 10185
     * }
     */
    public static int CURLOPT_SSH_KEYDATA() {
        return CURLOPT_SSH_KEYDATA;
    }
    private static final int CURLOPT_MAIL_FROM = (int)10186L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAIL_FROM = 10186
     * }
     */
    public static int CURLOPT_MAIL_FROM() {
        return CURLOPT_MAIL_FROM;
    }
    private static final int CURLOPT_MAIL_RCPT = (int)10187L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAIL_RCPT = 10187
     * }
     */
    public static int CURLOPT_MAIL_RCPT() {
        return CURLOPT_MAIL_RCPT;
    }
    private static final int CURLOPT_FTP_USE_PRET = (int)188L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FTP_USE_PRET = 188
     * }
     */
    public static int CURLOPT_FTP_USE_PRET() {
        return CURLOPT_FTP_USE_PRET;
    }
    private static final int CURLOPT_RTSP_REQUEST = (int)189L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RTSP_REQUEST = 189
     * }
     */
    public static int CURLOPT_RTSP_REQUEST() {
        return CURLOPT_RTSP_REQUEST;
    }
    private static final int CURLOPT_RTSP_SESSION_ID = (int)10190L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RTSP_SESSION_ID = 10190
     * }
     */
    public static int CURLOPT_RTSP_SESSION_ID() {
        return CURLOPT_RTSP_SESSION_ID;
    }
    private static final int CURLOPT_RTSP_STREAM_URI = (int)10191L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RTSP_STREAM_URI = 10191
     * }
     */
    public static int CURLOPT_RTSP_STREAM_URI() {
        return CURLOPT_RTSP_STREAM_URI;
    }
    private static final int CURLOPT_RTSP_TRANSPORT = (int)10192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RTSP_TRANSPORT = 10192
     * }
     */
    public static int CURLOPT_RTSP_TRANSPORT() {
        return CURLOPT_RTSP_TRANSPORT;
    }
    private static final int CURLOPT_RTSP_CLIENT_CSEQ = (int)193L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RTSP_CLIENT_CSEQ = 193
     * }
     */
    public static int CURLOPT_RTSP_CLIENT_CSEQ() {
        return CURLOPT_RTSP_CLIENT_CSEQ;
    }
    private static final int CURLOPT_RTSP_SERVER_CSEQ = (int)194L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RTSP_SERVER_CSEQ = 194
     * }
     */
    public static int CURLOPT_RTSP_SERVER_CSEQ() {
        return CURLOPT_RTSP_SERVER_CSEQ;
    }
    private static final int CURLOPT_INTERLEAVEDATA = (int)10195L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_INTERLEAVEDATA = 10195
     * }
     */
    public static int CURLOPT_INTERLEAVEDATA() {
        return CURLOPT_INTERLEAVEDATA;
    }
    private static final int CURLOPT_INTERLEAVEFUNCTION = (int)20196L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_INTERLEAVEFUNCTION = 20196
     * }
     */
    public static int CURLOPT_INTERLEAVEFUNCTION() {
        return CURLOPT_INTERLEAVEFUNCTION;
    }
    private static final int CURLOPT_WILDCARDMATCH = (int)197L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_WILDCARDMATCH = 197
     * }
     */
    public static int CURLOPT_WILDCARDMATCH() {
        return CURLOPT_WILDCARDMATCH;
    }
    private static final int CURLOPT_CHUNK_BGN_FUNCTION = (int)20198L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CHUNK_BGN_FUNCTION = 20198
     * }
     */
    public static int CURLOPT_CHUNK_BGN_FUNCTION() {
        return CURLOPT_CHUNK_BGN_FUNCTION;
    }
    private static final int CURLOPT_CHUNK_END_FUNCTION = (int)20199L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CHUNK_END_FUNCTION = 20199
     * }
     */
    public static int CURLOPT_CHUNK_END_FUNCTION() {
        return CURLOPT_CHUNK_END_FUNCTION;
    }
    private static final int CURLOPT_FNMATCH_FUNCTION = (int)20200L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FNMATCH_FUNCTION = 20200
     * }
     */
    public static int CURLOPT_FNMATCH_FUNCTION() {
        return CURLOPT_FNMATCH_FUNCTION;
    }
    private static final int CURLOPT_CHUNK_DATA = (int)10201L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CHUNK_DATA = 10201
     * }
     */
    public static int CURLOPT_CHUNK_DATA() {
        return CURLOPT_CHUNK_DATA;
    }
    private static final int CURLOPT_FNMATCH_DATA = (int)10202L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_FNMATCH_DATA = 10202
     * }
     */
    public static int CURLOPT_FNMATCH_DATA() {
        return CURLOPT_FNMATCH_DATA;
    }
    private static final int CURLOPT_RESOLVE = (int)10203L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RESOLVE = 10203
     * }
     */
    public static int CURLOPT_RESOLVE() {
        return CURLOPT_RESOLVE;
    }
    private static final int CURLOPT_TLSAUTH_USERNAME = (int)10204L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TLSAUTH_USERNAME = 10204
     * }
     */
    public static int CURLOPT_TLSAUTH_USERNAME() {
        return CURLOPT_TLSAUTH_USERNAME;
    }
    private static final int CURLOPT_TLSAUTH_PASSWORD = (int)10205L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TLSAUTH_PASSWORD = 10205
     * }
     */
    public static int CURLOPT_TLSAUTH_PASSWORD() {
        return CURLOPT_TLSAUTH_PASSWORD;
    }
    private static final int CURLOPT_TLSAUTH_TYPE = (int)10206L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TLSAUTH_TYPE = 10206
     * }
     */
    public static int CURLOPT_TLSAUTH_TYPE() {
        return CURLOPT_TLSAUTH_TYPE;
    }
    private static final int CURLOPT_TRANSFER_ENCODING = (int)207L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TRANSFER_ENCODING = 207
     * }
     */
    public static int CURLOPT_TRANSFER_ENCODING() {
        return CURLOPT_TRANSFER_ENCODING;
    }
    private static final int CURLOPT_CLOSESOCKETFUNCTION = (int)20208L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CLOSESOCKETFUNCTION = 20208
     * }
     */
    public static int CURLOPT_CLOSESOCKETFUNCTION() {
        return CURLOPT_CLOSESOCKETFUNCTION;
    }
    private static final int CURLOPT_CLOSESOCKETDATA = (int)10209L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CLOSESOCKETDATA = 10209
     * }
     */
    public static int CURLOPT_CLOSESOCKETDATA() {
        return CURLOPT_CLOSESOCKETDATA;
    }
    private static final int CURLOPT_GSSAPI_DELEGATION = (int)210L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_GSSAPI_DELEGATION = 210
     * }
     */
    public static int CURLOPT_GSSAPI_DELEGATION() {
        return CURLOPT_GSSAPI_DELEGATION;
    }
    private static final int CURLOPT_DNS_SERVERS = (int)10211L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DNS_SERVERS = 10211
     * }
     */
    public static int CURLOPT_DNS_SERVERS() {
        return CURLOPT_DNS_SERVERS;
    }
    private static final int CURLOPT_ACCEPTTIMEOUT_MS = (int)212L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ACCEPTTIMEOUT_MS = 212
     * }
     */
    public static int CURLOPT_ACCEPTTIMEOUT_MS() {
        return CURLOPT_ACCEPTTIMEOUT_MS;
    }
    private static final int CURLOPT_TCP_KEEPALIVE = (int)213L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TCP_KEEPALIVE = 213
     * }
     */
    public static int CURLOPT_TCP_KEEPALIVE() {
        return CURLOPT_TCP_KEEPALIVE;
    }
    private static final int CURLOPT_TCP_KEEPIDLE = (int)214L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TCP_KEEPIDLE = 214
     * }
     */
    public static int CURLOPT_TCP_KEEPIDLE() {
        return CURLOPT_TCP_KEEPIDLE;
    }
    private static final int CURLOPT_TCP_KEEPINTVL = (int)215L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TCP_KEEPINTVL = 215
     * }
     */
    public static int CURLOPT_TCP_KEEPINTVL() {
        return CURLOPT_TCP_KEEPINTVL;
    }
    private static final int CURLOPT_SSL_OPTIONS = (int)216L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_OPTIONS = 216
     * }
     */
    public static int CURLOPT_SSL_OPTIONS() {
        return CURLOPT_SSL_OPTIONS;
    }
    private static final int CURLOPT_MAIL_AUTH = (int)10217L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAIL_AUTH = 10217
     * }
     */
    public static int CURLOPT_MAIL_AUTH() {
        return CURLOPT_MAIL_AUTH;
    }
    private static final int CURLOPT_SASL_IR = (int)218L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SASL_IR = 218
     * }
     */
    public static int CURLOPT_SASL_IR() {
        return CURLOPT_SASL_IR;
    }
    private static final int CURLOPT_XFERINFOFUNCTION = (int)20219L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_XFERINFOFUNCTION = 20219
     * }
     */
    public static int CURLOPT_XFERINFOFUNCTION() {
        return CURLOPT_XFERINFOFUNCTION;
    }
    private static final int CURLOPT_XOAUTH2_BEARER = (int)10220L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_XOAUTH2_BEARER = 10220
     * }
     */
    public static int CURLOPT_XOAUTH2_BEARER() {
        return CURLOPT_XOAUTH2_BEARER;
    }
    private static final int CURLOPT_DNS_INTERFACE = (int)10221L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DNS_INTERFACE = 10221
     * }
     */
    public static int CURLOPT_DNS_INTERFACE() {
        return CURLOPT_DNS_INTERFACE;
    }
    private static final int CURLOPT_DNS_LOCAL_IP4 = (int)10222L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DNS_LOCAL_IP4 = 10222
     * }
     */
    public static int CURLOPT_DNS_LOCAL_IP4() {
        return CURLOPT_DNS_LOCAL_IP4;
    }
    private static final int CURLOPT_DNS_LOCAL_IP6 = (int)10223L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DNS_LOCAL_IP6 = 10223
     * }
     */
    public static int CURLOPT_DNS_LOCAL_IP6() {
        return CURLOPT_DNS_LOCAL_IP6;
    }
    private static final int CURLOPT_LOGIN_OPTIONS = (int)10224L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_LOGIN_OPTIONS = 10224
     * }
     */
    public static int CURLOPT_LOGIN_OPTIONS() {
        return CURLOPT_LOGIN_OPTIONS;
    }
    private static final int CURLOPT_SSL_ENABLE_NPN = (int)225L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_ENABLE_NPN = 225
     * }
     */
    public static int CURLOPT_SSL_ENABLE_NPN() {
        return CURLOPT_SSL_ENABLE_NPN;
    }
    private static final int CURLOPT_SSL_ENABLE_ALPN = (int)226L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_ENABLE_ALPN = 226
     * }
     */
    public static int CURLOPT_SSL_ENABLE_ALPN() {
        return CURLOPT_SSL_ENABLE_ALPN;
    }
    private static final int CURLOPT_EXPECT_100_TIMEOUT_MS = (int)227L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_EXPECT_100_TIMEOUT_MS = 227
     * }
     */
    public static int CURLOPT_EXPECT_100_TIMEOUT_MS() {
        return CURLOPT_EXPECT_100_TIMEOUT_MS;
    }
    private static final int CURLOPT_PROXYHEADER = (int)10228L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXYHEADER = 10228
     * }
     */
    public static int CURLOPT_PROXYHEADER() {
        return CURLOPT_PROXYHEADER;
    }
    private static final int CURLOPT_HEADEROPT = (int)229L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HEADEROPT = 229
     * }
     */
    public static int CURLOPT_HEADEROPT() {
        return CURLOPT_HEADEROPT;
    }
    private static final int CURLOPT_PINNEDPUBLICKEY = (int)10230L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PINNEDPUBLICKEY = 10230
     * }
     */
    public static int CURLOPT_PINNEDPUBLICKEY() {
        return CURLOPT_PINNEDPUBLICKEY;
    }
    private static final int CURLOPT_UNIX_SOCKET_PATH = (int)10231L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_UNIX_SOCKET_PATH = 10231
     * }
     */
    public static int CURLOPT_UNIX_SOCKET_PATH() {
        return CURLOPT_UNIX_SOCKET_PATH;
    }
    private static final int CURLOPT_SSL_VERIFYSTATUS = (int)232L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_VERIFYSTATUS = 232
     * }
     */
    public static int CURLOPT_SSL_VERIFYSTATUS() {
        return CURLOPT_SSL_VERIFYSTATUS;
    }
    private static final int CURLOPT_SSL_FALSESTART = (int)233L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_FALSESTART = 233
     * }
     */
    public static int CURLOPT_SSL_FALSESTART() {
        return CURLOPT_SSL_FALSESTART;
    }
    private static final int CURLOPT_PATH_AS_IS = (int)234L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PATH_AS_IS = 234
     * }
     */
    public static int CURLOPT_PATH_AS_IS() {
        return CURLOPT_PATH_AS_IS;
    }
    private static final int CURLOPT_PROXY_SERVICE_NAME = (int)10235L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SERVICE_NAME = 10235
     * }
     */
    public static int CURLOPT_PROXY_SERVICE_NAME() {
        return CURLOPT_PROXY_SERVICE_NAME;
    }
    private static final int CURLOPT_SERVICE_NAME = (int)10236L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SERVICE_NAME = 10236
     * }
     */
    public static int CURLOPT_SERVICE_NAME() {
        return CURLOPT_SERVICE_NAME;
    }
    private static final int CURLOPT_PIPEWAIT = (int)237L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PIPEWAIT = 237
     * }
     */
    public static int CURLOPT_PIPEWAIT() {
        return CURLOPT_PIPEWAIT;
    }
    private static final int CURLOPT_DEFAULT_PROTOCOL = (int)10238L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DEFAULT_PROTOCOL = 10238
     * }
     */
    public static int CURLOPT_DEFAULT_PROTOCOL() {
        return CURLOPT_DEFAULT_PROTOCOL;
    }
    private static final int CURLOPT_STREAM_WEIGHT = (int)239L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_STREAM_WEIGHT = 239
     * }
     */
    public static int CURLOPT_STREAM_WEIGHT() {
        return CURLOPT_STREAM_WEIGHT;
    }
    private static final int CURLOPT_STREAM_DEPENDS = (int)10240L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_STREAM_DEPENDS = 10240
     * }
     */
    public static int CURLOPT_STREAM_DEPENDS() {
        return CURLOPT_STREAM_DEPENDS;
    }
    private static final int CURLOPT_STREAM_DEPENDS_E = (int)10241L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_STREAM_DEPENDS_E = 10241
     * }
     */
    public static int CURLOPT_STREAM_DEPENDS_E() {
        return CURLOPT_STREAM_DEPENDS_E;
    }
    private static final int CURLOPT_TFTP_NO_OPTIONS = (int)242L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TFTP_NO_OPTIONS = 242
     * }
     */
    public static int CURLOPT_TFTP_NO_OPTIONS() {
        return CURLOPT_TFTP_NO_OPTIONS;
    }
    private static final int CURLOPT_CONNECT_TO = (int)10243L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CONNECT_TO = 10243
     * }
     */
    public static int CURLOPT_CONNECT_TO() {
        return CURLOPT_CONNECT_TO;
    }
    private static final int CURLOPT_TCP_FASTOPEN = (int)244L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TCP_FASTOPEN = 244
     * }
     */
    public static int CURLOPT_TCP_FASTOPEN() {
        return CURLOPT_TCP_FASTOPEN;
    }
    private static final int CURLOPT_KEEP_SENDING_ON_ERROR = (int)245L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_KEEP_SENDING_ON_ERROR = 245
     * }
     */
    public static int CURLOPT_KEEP_SENDING_ON_ERROR() {
        return CURLOPT_KEEP_SENDING_ON_ERROR;
    }
    private static final int CURLOPT_PROXY_CAINFO = (int)10246L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_CAINFO = 10246
     * }
     */
    public static int CURLOPT_PROXY_CAINFO() {
        return CURLOPT_PROXY_CAINFO;
    }
    private static final int CURLOPT_PROXY_CAPATH = (int)10247L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_CAPATH = 10247
     * }
     */
    public static int CURLOPT_PROXY_CAPATH() {
        return CURLOPT_PROXY_CAPATH;
    }
    private static final int CURLOPT_PROXY_SSL_VERIFYPEER = (int)248L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSL_VERIFYPEER = 248
     * }
     */
    public static int CURLOPT_PROXY_SSL_VERIFYPEER() {
        return CURLOPT_PROXY_SSL_VERIFYPEER;
    }
    private static final int CURLOPT_PROXY_SSL_VERIFYHOST = (int)249L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSL_VERIFYHOST = 249
     * }
     */
    public static int CURLOPT_PROXY_SSL_VERIFYHOST() {
        return CURLOPT_PROXY_SSL_VERIFYHOST;
    }
    private static final int CURLOPT_PROXY_SSLVERSION = (int)250L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSLVERSION = 250
     * }
     */
    public static int CURLOPT_PROXY_SSLVERSION() {
        return CURLOPT_PROXY_SSLVERSION;
    }
    private static final int CURLOPT_PROXY_TLSAUTH_USERNAME = (int)10251L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_TLSAUTH_USERNAME = 10251
     * }
     */
    public static int CURLOPT_PROXY_TLSAUTH_USERNAME() {
        return CURLOPT_PROXY_TLSAUTH_USERNAME;
    }
    private static final int CURLOPT_PROXY_TLSAUTH_PASSWORD = (int)10252L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_TLSAUTH_PASSWORD = 10252
     * }
     */
    public static int CURLOPT_PROXY_TLSAUTH_PASSWORD() {
        return CURLOPT_PROXY_TLSAUTH_PASSWORD;
    }
    private static final int CURLOPT_PROXY_TLSAUTH_TYPE = (int)10253L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_TLSAUTH_TYPE = 10253
     * }
     */
    public static int CURLOPT_PROXY_TLSAUTH_TYPE() {
        return CURLOPT_PROXY_TLSAUTH_TYPE;
    }
    private static final int CURLOPT_PROXY_SSLCERT = (int)10254L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSLCERT = 10254
     * }
     */
    public static int CURLOPT_PROXY_SSLCERT() {
        return CURLOPT_PROXY_SSLCERT;
    }
    private static final int CURLOPT_PROXY_SSLCERTTYPE = (int)10255L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSLCERTTYPE = 10255
     * }
     */
    public static int CURLOPT_PROXY_SSLCERTTYPE() {
        return CURLOPT_PROXY_SSLCERTTYPE;
    }
    private static final int CURLOPT_PROXY_SSLKEY = (int)10256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSLKEY = 10256
     * }
     */
    public static int CURLOPT_PROXY_SSLKEY() {
        return CURLOPT_PROXY_SSLKEY;
    }
    private static final int CURLOPT_PROXY_SSLKEYTYPE = (int)10257L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSLKEYTYPE = 10257
     * }
     */
    public static int CURLOPT_PROXY_SSLKEYTYPE() {
        return CURLOPT_PROXY_SSLKEYTYPE;
    }
    private static final int CURLOPT_PROXY_KEYPASSWD = (int)10258L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_KEYPASSWD = 10258
     * }
     */
    public static int CURLOPT_PROXY_KEYPASSWD() {
        return CURLOPT_PROXY_KEYPASSWD;
    }
    private static final int CURLOPT_PROXY_SSL_CIPHER_LIST = (int)10259L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSL_CIPHER_LIST = 10259
     * }
     */
    public static int CURLOPT_PROXY_SSL_CIPHER_LIST() {
        return CURLOPT_PROXY_SSL_CIPHER_LIST;
    }
    private static final int CURLOPT_PROXY_CRLFILE = (int)10260L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_CRLFILE = 10260
     * }
     */
    public static int CURLOPT_PROXY_CRLFILE() {
        return CURLOPT_PROXY_CRLFILE;
    }
    private static final int CURLOPT_PROXY_SSL_OPTIONS = (int)261L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSL_OPTIONS = 261
     * }
     */
    public static int CURLOPT_PROXY_SSL_OPTIONS() {
        return CURLOPT_PROXY_SSL_OPTIONS;
    }
    private static final int CURLOPT_PRE_PROXY = (int)10262L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PRE_PROXY = 10262
     * }
     */
    public static int CURLOPT_PRE_PROXY() {
        return CURLOPT_PRE_PROXY;
    }
    private static final int CURLOPT_PROXY_PINNEDPUBLICKEY = (int)10263L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_PINNEDPUBLICKEY = 10263
     * }
     */
    public static int CURLOPT_PROXY_PINNEDPUBLICKEY() {
        return CURLOPT_PROXY_PINNEDPUBLICKEY;
    }
    private static final int CURLOPT_ABSTRACT_UNIX_SOCKET = (int)10264L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ABSTRACT_UNIX_SOCKET = 10264
     * }
     */
    public static int CURLOPT_ABSTRACT_UNIX_SOCKET() {
        return CURLOPT_ABSTRACT_UNIX_SOCKET;
    }
    private static final int CURLOPT_SUPPRESS_CONNECT_HEADERS = (int)265L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SUPPRESS_CONNECT_HEADERS = 265
     * }
     */
    public static int CURLOPT_SUPPRESS_CONNECT_HEADERS() {
        return CURLOPT_SUPPRESS_CONNECT_HEADERS;
    }
    private static final int CURLOPT_REQUEST_TARGET = (int)10266L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_REQUEST_TARGET = 10266
     * }
     */
    public static int CURLOPT_REQUEST_TARGET() {
        return CURLOPT_REQUEST_TARGET;
    }
    private static final int CURLOPT_SOCKS5_AUTH = (int)267L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SOCKS5_AUTH = 267
     * }
     */
    public static int CURLOPT_SOCKS5_AUTH() {
        return CURLOPT_SOCKS5_AUTH;
    }
    private static final int CURLOPT_SSH_COMPRESSION = (int)268L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_COMPRESSION = 268
     * }
     */
    public static int CURLOPT_SSH_COMPRESSION() {
        return CURLOPT_SSH_COMPRESSION;
    }
    private static final int CURLOPT_MIMEPOST = (int)10269L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MIMEPOST = 10269
     * }
     */
    public static int CURLOPT_MIMEPOST() {
        return CURLOPT_MIMEPOST;
    }
    private static final int CURLOPT_TIMEVALUE_LARGE = (int)30270L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TIMEVALUE_LARGE = 30270
     * }
     */
    public static int CURLOPT_TIMEVALUE_LARGE() {
        return CURLOPT_TIMEVALUE_LARGE;
    }
    private static final int CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS = (int)271L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS = 271
     * }
     */
    public static int CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS() {
        return CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS;
    }
    private static final int CURLOPT_RESOLVER_START_FUNCTION = (int)20272L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RESOLVER_START_FUNCTION = 20272
     * }
     */
    public static int CURLOPT_RESOLVER_START_FUNCTION() {
        return CURLOPT_RESOLVER_START_FUNCTION;
    }
    private static final int CURLOPT_RESOLVER_START_DATA = (int)10273L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_RESOLVER_START_DATA = 10273
     * }
     */
    public static int CURLOPT_RESOLVER_START_DATA() {
        return CURLOPT_RESOLVER_START_DATA;
    }
    private static final int CURLOPT_HAPROXYPROTOCOL = (int)274L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HAPROXYPROTOCOL = 274
     * }
     */
    public static int CURLOPT_HAPROXYPROTOCOL() {
        return CURLOPT_HAPROXYPROTOCOL;
    }
    private static final int CURLOPT_DNS_SHUFFLE_ADDRESSES = (int)275L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DNS_SHUFFLE_ADDRESSES = 275
     * }
     */
    public static int CURLOPT_DNS_SHUFFLE_ADDRESSES() {
        return CURLOPT_DNS_SHUFFLE_ADDRESSES;
    }
    private static final int CURLOPT_TLS13_CIPHERS = (int)10276L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TLS13_CIPHERS = 10276
     * }
     */
    public static int CURLOPT_TLS13_CIPHERS() {
        return CURLOPT_TLS13_CIPHERS;
    }
    private static final int CURLOPT_PROXY_TLS13_CIPHERS = (int)10277L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_TLS13_CIPHERS = 10277
     * }
     */
    public static int CURLOPT_PROXY_TLS13_CIPHERS() {
        return CURLOPT_PROXY_TLS13_CIPHERS;
    }
    private static final int CURLOPT_DISALLOW_USERNAME_IN_URL = (int)278L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DISALLOW_USERNAME_IN_URL = 278
     * }
     */
    public static int CURLOPT_DISALLOW_USERNAME_IN_URL() {
        return CURLOPT_DISALLOW_USERNAME_IN_URL;
    }
    private static final int CURLOPT_DOH_URL = (int)10279L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DOH_URL = 10279
     * }
     */
    public static int CURLOPT_DOH_URL() {
        return CURLOPT_DOH_URL;
    }
    private static final int CURLOPT_UPLOAD_BUFFERSIZE = (int)280L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_UPLOAD_BUFFERSIZE = 280
     * }
     */
    public static int CURLOPT_UPLOAD_BUFFERSIZE() {
        return CURLOPT_UPLOAD_BUFFERSIZE;
    }
    private static final int CURLOPT_UPKEEP_INTERVAL_MS = (int)281L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_UPKEEP_INTERVAL_MS = 281
     * }
     */
    public static int CURLOPT_UPKEEP_INTERVAL_MS() {
        return CURLOPT_UPKEEP_INTERVAL_MS;
    }
    private static final int CURLOPT_CURLU = (int)10282L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CURLU = 10282
     * }
     */
    public static int CURLOPT_CURLU() {
        return CURLOPT_CURLU;
    }
    private static final int CURLOPT_TRAILERFUNCTION = (int)20283L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TRAILERFUNCTION = 20283
     * }
     */
    public static int CURLOPT_TRAILERFUNCTION() {
        return CURLOPT_TRAILERFUNCTION;
    }
    private static final int CURLOPT_TRAILERDATA = (int)10284L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TRAILERDATA = 10284
     * }
     */
    public static int CURLOPT_TRAILERDATA() {
        return CURLOPT_TRAILERDATA;
    }
    private static final int CURLOPT_HTTP09_ALLOWED = (int)285L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HTTP09_ALLOWED = 285
     * }
     */
    public static int CURLOPT_HTTP09_ALLOWED() {
        return CURLOPT_HTTP09_ALLOWED;
    }
    private static final int CURLOPT_ALTSVC_CTRL = (int)286L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ALTSVC_CTRL = 286
     * }
     */
    public static int CURLOPT_ALTSVC_CTRL() {
        return CURLOPT_ALTSVC_CTRL;
    }
    private static final int CURLOPT_ALTSVC = (int)10287L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ALTSVC = 10287
     * }
     */
    public static int CURLOPT_ALTSVC() {
        return CURLOPT_ALTSVC;
    }
    private static final int CURLOPT_MAXAGE_CONN = (int)288L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAXAGE_CONN = 288
     * }
     */
    public static int CURLOPT_MAXAGE_CONN() {
        return CURLOPT_MAXAGE_CONN;
    }
    private static final int CURLOPT_SASL_AUTHZID = (int)10289L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SASL_AUTHZID = 10289
     * }
     */
    public static int CURLOPT_SASL_AUTHZID() {
        return CURLOPT_SASL_AUTHZID;
    }
    private static final int CURLOPT_MAIL_RCPT_ALLOWFAILS = (int)290L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAIL_RCPT_ALLOWFAILS = 290
     * }
     */
    public static int CURLOPT_MAIL_RCPT_ALLOWFAILS() {
        return CURLOPT_MAIL_RCPT_ALLOWFAILS;
    }
    private static final int CURLOPT_SSLCERT_BLOB = (int)40291L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLCERT_BLOB = 40291
     * }
     */
    public static int CURLOPT_SSLCERT_BLOB() {
        return CURLOPT_SSLCERT_BLOB;
    }
    private static final int CURLOPT_SSLKEY_BLOB = (int)40292L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSLKEY_BLOB = 40292
     * }
     */
    public static int CURLOPT_SSLKEY_BLOB() {
        return CURLOPT_SSLKEY_BLOB;
    }
    private static final int CURLOPT_PROXY_SSLCERT_BLOB = (int)40293L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSLCERT_BLOB = 40293
     * }
     */
    public static int CURLOPT_PROXY_SSLCERT_BLOB() {
        return CURLOPT_PROXY_SSLCERT_BLOB;
    }
    private static final int CURLOPT_PROXY_SSLKEY_BLOB = (int)40294L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_SSLKEY_BLOB = 40294
     * }
     */
    public static int CURLOPT_PROXY_SSLKEY_BLOB() {
        return CURLOPT_PROXY_SSLKEY_BLOB;
    }
    private static final int CURLOPT_ISSUERCERT_BLOB = (int)40295L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ISSUERCERT_BLOB = 40295
     * }
     */
    public static int CURLOPT_ISSUERCERT_BLOB() {
        return CURLOPT_ISSUERCERT_BLOB;
    }
    private static final int CURLOPT_PROXY_ISSUERCERT = (int)10296L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_ISSUERCERT = 10296
     * }
     */
    public static int CURLOPT_PROXY_ISSUERCERT() {
        return CURLOPT_PROXY_ISSUERCERT;
    }
    private static final int CURLOPT_PROXY_ISSUERCERT_BLOB = (int)40297L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_ISSUERCERT_BLOB = 40297
     * }
     */
    public static int CURLOPT_PROXY_ISSUERCERT_BLOB() {
        return CURLOPT_PROXY_ISSUERCERT_BLOB;
    }
    private static final int CURLOPT_SSL_EC_CURVES = (int)10298L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSL_EC_CURVES = 10298
     * }
     */
    public static int CURLOPT_SSL_EC_CURVES() {
        return CURLOPT_SSL_EC_CURVES;
    }
    private static final int CURLOPT_HSTS_CTRL = (int)299L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HSTS_CTRL = 299
     * }
     */
    public static int CURLOPT_HSTS_CTRL() {
        return CURLOPT_HSTS_CTRL;
    }
    private static final int CURLOPT_HSTS = (int)10300L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HSTS = 10300
     * }
     */
    public static int CURLOPT_HSTS() {
        return CURLOPT_HSTS;
    }
    private static final int CURLOPT_HSTSREADFUNCTION = (int)20301L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HSTSREADFUNCTION = 20301
     * }
     */
    public static int CURLOPT_HSTSREADFUNCTION() {
        return CURLOPT_HSTSREADFUNCTION;
    }
    private static final int CURLOPT_HSTSREADDATA = (int)10302L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HSTSREADDATA = 10302
     * }
     */
    public static int CURLOPT_HSTSREADDATA() {
        return CURLOPT_HSTSREADDATA;
    }
    private static final int CURLOPT_HSTSWRITEFUNCTION = (int)20303L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HSTSWRITEFUNCTION = 20303
     * }
     */
    public static int CURLOPT_HSTSWRITEFUNCTION() {
        return CURLOPT_HSTSWRITEFUNCTION;
    }
    private static final int CURLOPT_HSTSWRITEDATA = (int)10304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HSTSWRITEDATA = 10304
     * }
     */
    public static int CURLOPT_HSTSWRITEDATA() {
        return CURLOPT_HSTSWRITEDATA;
    }
    private static final int CURLOPT_AWS_SIGV4 = (int)10305L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_AWS_SIGV4 = 10305
     * }
     */
    public static int CURLOPT_AWS_SIGV4() {
        return CURLOPT_AWS_SIGV4;
    }
    private static final int CURLOPT_DOH_SSL_VERIFYPEER = (int)306L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DOH_SSL_VERIFYPEER = 306
     * }
     */
    public static int CURLOPT_DOH_SSL_VERIFYPEER() {
        return CURLOPT_DOH_SSL_VERIFYPEER;
    }
    private static final int CURLOPT_DOH_SSL_VERIFYHOST = (int)307L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DOH_SSL_VERIFYHOST = 307
     * }
     */
    public static int CURLOPT_DOH_SSL_VERIFYHOST() {
        return CURLOPT_DOH_SSL_VERIFYHOST;
    }
    private static final int CURLOPT_DOH_SSL_VERIFYSTATUS = (int)308L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_DOH_SSL_VERIFYSTATUS = 308
     * }
     */
    public static int CURLOPT_DOH_SSL_VERIFYSTATUS() {
        return CURLOPT_DOH_SSL_VERIFYSTATUS;
    }
    private static final int CURLOPT_CAINFO_BLOB = (int)40309L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CAINFO_BLOB = 40309
     * }
     */
    public static int CURLOPT_CAINFO_BLOB() {
        return CURLOPT_CAINFO_BLOB;
    }
    private static final int CURLOPT_PROXY_CAINFO_BLOB = (int)40310L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROXY_CAINFO_BLOB = 40310
     * }
     */
    public static int CURLOPT_PROXY_CAINFO_BLOB() {
        return CURLOPT_PROXY_CAINFO_BLOB;
    }
    private static final int CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256 = (int)10311L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256 = 10311
     * }
     */
    public static int CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256() {
        return CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256;
    }
    private static final int CURLOPT_PREREQFUNCTION = (int)20312L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PREREQFUNCTION = 20312
     * }
     */
    public static int CURLOPT_PREREQFUNCTION() {
        return CURLOPT_PREREQFUNCTION;
    }
    private static final int CURLOPT_PREREQDATA = (int)10313L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PREREQDATA = 10313
     * }
     */
    public static int CURLOPT_PREREQDATA() {
        return CURLOPT_PREREQDATA;
    }
    private static final int CURLOPT_MAXLIFETIME_CONN = (int)314L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MAXLIFETIME_CONN = 314
     * }
     */
    public static int CURLOPT_MAXLIFETIME_CONN() {
        return CURLOPT_MAXLIFETIME_CONN;
    }
    private static final int CURLOPT_MIME_OPTIONS = (int)315L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_MIME_OPTIONS = 315
     * }
     */
    public static int CURLOPT_MIME_OPTIONS() {
        return CURLOPT_MIME_OPTIONS;
    }
    private static final int CURLOPT_SSH_HOSTKEYFUNCTION = (int)20316L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_HOSTKEYFUNCTION = 20316
     * }
     */
    public static int CURLOPT_SSH_HOSTKEYFUNCTION() {
        return CURLOPT_SSH_HOSTKEYFUNCTION;
    }
    private static final int CURLOPT_SSH_HOSTKEYDATA = (int)10317L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SSH_HOSTKEYDATA = 10317
     * }
     */
    public static int CURLOPT_SSH_HOSTKEYDATA() {
        return CURLOPT_SSH_HOSTKEYDATA;
    }
    private static final int CURLOPT_PROTOCOLS_STR = (int)10318L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_PROTOCOLS_STR = 10318
     * }
     */
    public static int CURLOPT_PROTOCOLS_STR() {
        return CURLOPT_PROTOCOLS_STR;
    }
    private static final int CURLOPT_REDIR_PROTOCOLS_STR = (int)10319L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_REDIR_PROTOCOLS_STR = 10319
     * }
     */
    public static int CURLOPT_REDIR_PROTOCOLS_STR() {
        return CURLOPT_REDIR_PROTOCOLS_STR;
    }
    private static final int CURLOPT_WS_OPTIONS = (int)320L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_WS_OPTIONS = 320
     * }
     */
    public static int CURLOPT_WS_OPTIONS() {
        return CURLOPT_WS_OPTIONS;
    }
    private static final int CURLOPT_CA_CACHE_TIMEOUT = (int)321L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_CA_CACHE_TIMEOUT = 321
     * }
     */
    public static int CURLOPT_CA_CACHE_TIMEOUT() {
        return CURLOPT_CA_CACHE_TIMEOUT;
    }
    private static final int CURLOPT_QUICK_EXIT = (int)322L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_QUICK_EXIT = 322
     * }
     */
    public static int CURLOPT_QUICK_EXIT() {
        return CURLOPT_QUICK_EXIT;
    }
    private static final int CURLOPT_HAPROXY_CLIENT_IP = (int)10323L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_HAPROXY_CLIENT_IP = 10323
     * }
     */
    public static int CURLOPT_HAPROXY_CLIENT_IP() {
        return CURLOPT_HAPROXY_CLIENT_IP;
    }
    private static final int CURLOPT_SERVER_RESPONSE_TIMEOUT_MS = (int)324L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_SERVER_RESPONSE_TIMEOUT_MS = 324
     * }
     */
    public static int CURLOPT_SERVER_RESPONSE_TIMEOUT_MS() {
        return CURLOPT_SERVER_RESPONSE_TIMEOUT_MS;
    }
    private static final int CURLOPT_ECH = (int)10325L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_ECH = 10325
     * }
     */
    public static int CURLOPT_ECH() {
        return CURLOPT_ECH;
    }
    private static final int CURLOPT_TCP_KEEPCNT = (int)326L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_TCP_KEEPCNT = 326
     * }
     */
    public static int CURLOPT_TCP_KEEPCNT() {
        return CURLOPT_TCP_KEEPCNT;
    }
    private static final int CURLOPT_LASTENTRY = (int)327L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOPT_LASTENTRY = 327
     * }
     */
    public static int CURLOPT_LASTENTRY() {
        return CURLOPT_LASTENTRY;
    }
    private static final int CURL_HTTP_VERSION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_NONE = 0
     * }
     */
    public static int CURL_HTTP_VERSION_NONE() {
        return CURL_HTTP_VERSION_NONE;
    }
    private static final int CURL_HTTP_VERSION_1_0 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_1_0 = 1
     * }
     */
    public static int CURL_HTTP_VERSION_1_0() {
        return CURL_HTTP_VERSION_1_0;
    }
    private static final int CURL_HTTP_VERSION_1_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_1_1 = 2
     * }
     */
    public static int CURL_HTTP_VERSION_1_1() {
        return CURL_HTTP_VERSION_1_1;
    }
    private static final int CURL_HTTP_VERSION_2_0 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_2_0 = 3
     * }
     */
    public static int CURL_HTTP_VERSION_2_0() {
        return CURL_HTTP_VERSION_2_0;
    }
    private static final int CURL_HTTP_VERSION_2TLS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_2TLS = 4
     * }
     */
    public static int CURL_HTTP_VERSION_2TLS() {
        return CURL_HTTP_VERSION_2TLS;
    }
    private static final int CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE = 5
     * }
     */
    public static int CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE() {
        return CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE;
    }
    private static final int CURL_HTTP_VERSION_3 = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_3 = 30
     * }
     */
    public static int CURL_HTTP_VERSION_3() {
        return CURL_HTTP_VERSION_3;
    }
    private static final int CURL_HTTP_VERSION_3ONLY = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_3ONLY = 31
     * }
     */
    public static int CURL_HTTP_VERSION_3ONLY() {
        return CURL_HTTP_VERSION_3ONLY;
    }
    private static final int CURL_HTTP_VERSION_LAST = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_HTTP_VERSION_LAST = 32
     * }
     */
    public static int CURL_HTTP_VERSION_LAST() {
        return CURL_HTTP_VERSION_LAST;
    }
    private static final int CURL_RTSPREQ_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_NONE = 0
     * }
     */
    public static int CURL_RTSPREQ_NONE() {
        return CURL_RTSPREQ_NONE;
    }
    private static final int CURL_RTSPREQ_OPTIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_OPTIONS = 1
     * }
     */
    public static int CURL_RTSPREQ_OPTIONS() {
        return CURL_RTSPREQ_OPTIONS;
    }
    private static final int CURL_RTSPREQ_DESCRIBE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_DESCRIBE = 2
     * }
     */
    public static int CURL_RTSPREQ_DESCRIBE() {
        return CURL_RTSPREQ_DESCRIBE;
    }
    private static final int CURL_RTSPREQ_ANNOUNCE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_ANNOUNCE = 3
     * }
     */
    public static int CURL_RTSPREQ_ANNOUNCE() {
        return CURL_RTSPREQ_ANNOUNCE;
    }
    private static final int CURL_RTSPREQ_SETUP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_SETUP = 4
     * }
     */
    public static int CURL_RTSPREQ_SETUP() {
        return CURL_RTSPREQ_SETUP;
    }
    private static final int CURL_RTSPREQ_PLAY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_PLAY = 5
     * }
     */
    public static int CURL_RTSPREQ_PLAY() {
        return CURL_RTSPREQ_PLAY;
    }
    private static final int CURL_RTSPREQ_PAUSE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_PAUSE = 6
     * }
     */
    public static int CURL_RTSPREQ_PAUSE() {
        return CURL_RTSPREQ_PAUSE;
    }
    private static final int CURL_RTSPREQ_TEARDOWN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_TEARDOWN = 7
     * }
     */
    public static int CURL_RTSPREQ_TEARDOWN() {
        return CURL_RTSPREQ_TEARDOWN;
    }
    private static final int CURL_RTSPREQ_GET_PARAMETER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_GET_PARAMETER = 8
     * }
     */
    public static int CURL_RTSPREQ_GET_PARAMETER() {
        return CURL_RTSPREQ_GET_PARAMETER;
    }
    private static final int CURL_RTSPREQ_SET_PARAMETER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_SET_PARAMETER = 9
     * }
     */
    public static int CURL_RTSPREQ_SET_PARAMETER() {
        return CURL_RTSPREQ_SET_PARAMETER;
    }
    private static final int CURL_RTSPREQ_RECORD = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_RECORD = 10
     * }
     */
    public static int CURL_RTSPREQ_RECORD() {
        return CURL_RTSPREQ_RECORD;
    }
    private static final int CURL_RTSPREQ_RECEIVE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_RECEIVE = 11
     * }
     */
    public static int CURL_RTSPREQ_RECEIVE() {
        return CURL_RTSPREQ_RECEIVE;
    }
    private static final int CURL_RTSPREQ_LAST = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_RTSPREQ_LAST = 12
     * }
     */
    public static int CURL_RTSPREQ_LAST() {
        return CURL_RTSPREQ_LAST;
    }
    private static final int CURL_NETRC_IGNORED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CURL_NETRC_OPTION.CURL_NETRC_IGNORED = 0
     * }
     */
    public static int CURL_NETRC_IGNORED() {
        return CURL_NETRC_IGNORED;
    }
    private static final int CURL_NETRC_OPTIONAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CURL_NETRC_OPTION.CURL_NETRC_OPTIONAL = 1
     * }
     */
    public static int CURL_NETRC_OPTIONAL() {
        return CURL_NETRC_OPTIONAL;
    }
    private static final int CURL_NETRC_REQUIRED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CURL_NETRC_OPTION.CURL_NETRC_REQUIRED = 2
     * }
     */
    public static int CURL_NETRC_REQUIRED() {
        return CURL_NETRC_REQUIRED;
    }
    private static final int CURL_NETRC_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum CURL_NETRC_OPTION.CURL_NETRC_LAST = 3
     * }
     */
    public static int CURL_NETRC_LAST() {
        return CURL_NETRC_LAST;
    }
    private static final int CURL_TLSAUTH_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CURL_TLSAUTH.CURL_TLSAUTH_NONE = 0
     * }
     */
    public static int CURL_TLSAUTH_NONE() {
        return CURL_TLSAUTH_NONE;
    }
    private static final int CURL_TLSAUTH_SRP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CURL_TLSAUTH.CURL_TLSAUTH_SRP = 1
     * }
     */
    public static int CURL_TLSAUTH_SRP() {
        return CURL_TLSAUTH_SRP;
    }
    private static final int CURL_TLSAUTH_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CURL_TLSAUTH.CURL_TLSAUTH_LAST = 2
     * }
     */
    public static int CURL_TLSAUTH_LAST() {
        return CURL_TLSAUTH_LAST;
    }
    private static final int CURL_TIMECOND_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_TIMECOND_NONE = 0
     * }
     */
    public static int CURL_TIMECOND_NONE() {
        return CURL_TIMECOND_NONE;
    }
    private static final int CURL_TIMECOND_IFMODSINCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_TIMECOND_IFMODSINCE = 1
     * }
     */
    public static int CURL_TIMECOND_IFMODSINCE() {
        return CURL_TIMECOND_IFMODSINCE;
    }
    private static final int CURL_TIMECOND_IFUNMODSINCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_TIMECOND_IFUNMODSINCE = 2
     * }
     */
    public static int CURL_TIMECOND_IFUNMODSINCE() {
        return CURL_TIMECOND_IFUNMODSINCE;
    }
    private static final int CURL_TIMECOND_LASTMOD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_TIMECOND_LASTMOD = 3
     * }
     */
    public static int CURL_TIMECOND_LASTMOD() {
        return CURL_TIMECOND_LASTMOD;
    }
    private static final int CURL_TIMECOND_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_TIMECOND_LAST = 4
     * }
     */
    public static int CURL_TIMECOND_LAST() {
        return CURL_TIMECOND_LAST;
    }

    private static class curl_strequal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_strequal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int curl_strequal(const char *s1, const char *s2)
     * }
     */
    public static FunctionDescriptor curl_strequal$descriptor() {
        return curl_strequal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int curl_strequal(const char *s1, const char *s2)
     * }
     */
    public static MethodHandle curl_strequal$handle() {
        return curl_strequal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int curl_strequal(const char *s1, const char *s2)
     * }
     */
    public static MemorySegment curl_strequal$address() {
        return curl_strequal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int curl_strequal(const char *s1, const char *s2)
     * }
     */
    public static int curl_strequal(MemorySegment s1, MemorySegment s2) {
        var mh$ = curl_strequal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_strequal", s1, s2);
            }
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_strnequal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_LONG
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_strnequal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int curl_strnequal(const char *s1, const char *s2, size_t n)
     * }
     */
    public static FunctionDescriptor curl_strnequal$descriptor() {
        return curl_strnequal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int curl_strnequal(const char *s1, const char *s2, size_t n)
     * }
     */
    public static MethodHandle curl_strnequal$handle() {
        return curl_strnequal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int curl_strnequal(const char *s1, const char *s2, size_t n)
     * }
     */
    public static MemorySegment curl_strnequal$address() {
        return curl_strnequal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int curl_strnequal(const char *s1, const char *s2, size_t n)
     * }
     */
    public static int curl_strnequal(MemorySegment s1, MemorySegment s2, long n) {
        var mh$ = curl_strnequal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_strnequal", s1, s2, n);
            }
            return (int)mh$.invokeExact(s1, s2, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * curl_mime *curl_mime_init(CURL *easy)
     * }
     */
    public static FunctionDescriptor curl_mime_init$descriptor() {
        return curl_mime_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * curl_mime *curl_mime_init(CURL *easy)
     * }
     */
    public static MethodHandle curl_mime_init$handle() {
        return curl_mime_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * curl_mime *curl_mime_init(CURL *easy)
     * }
     */
    public static MemorySegment curl_mime_init$address() {
        return curl_mime_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * curl_mime *curl_mime_init(CURL *easy)
     * }
     */
    public static MemorySegment curl_mime_init(MemorySegment easy) {
        var mh$ = curl_mime_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_init", easy);
            }
            return (MemorySegment)mh$.invokeExact(easy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void curl_mime_free(curl_mime *mime)
     * }
     */
    public static FunctionDescriptor curl_mime_free$descriptor() {
        return curl_mime_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void curl_mime_free(curl_mime *mime)
     * }
     */
    public static MethodHandle curl_mime_free$handle() {
        return curl_mime_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void curl_mime_free(curl_mime *mime)
     * }
     */
    public static MemorySegment curl_mime_free$address() {
        return curl_mime_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void curl_mime_free(curl_mime *mime)
     * }
     */
    public static void curl_mime_free(MemorySegment mime) {
        var mh$ = curl_mime_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_free", mime);
            }
            mh$.invokeExact(mime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_addpart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_addpart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * curl_mimepart *curl_mime_addpart(curl_mime *mime)
     * }
     */
    public static FunctionDescriptor curl_mime_addpart$descriptor() {
        return curl_mime_addpart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * curl_mimepart *curl_mime_addpart(curl_mime *mime)
     * }
     */
    public static MethodHandle curl_mime_addpart$handle() {
        return curl_mime_addpart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * curl_mimepart *curl_mime_addpart(curl_mime *mime)
     * }
     */
    public static MemorySegment curl_mime_addpart$address() {
        return curl_mime_addpart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * curl_mimepart *curl_mime_addpart(curl_mime *mime)
     * }
     */
    public static MemorySegment curl_mime_addpart(MemorySegment mime) {
        var mh$ = curl_mime_addpart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_addpart", mime);
            }
            return (MemorySegment)mh$.invokeExact(mime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_name(curl_mimepart *part, const char *name)
     * }
     */
    public static FunctionDescriptor curl_mime_name$descriptor() {
        return curl_mime_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_name(curl_mimepart *part, const char *name)
     * }
     */
    public static MethodHandle curl_mime_name$handle() {
        return curl_mime_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_name(curl_mimepart *part, const char *name)
     * }
     */
    public static MemorySegment curl_mime_name$address() {
        return curl_mime_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_name(curl_mimepart *part, const char *name)
     * }
     */
    public static int curl_mime_name(MemorySegment part, MemorySegment name) {
        var mh$ = curl_mime_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_name", part, name);
            }
            return (int)mh$.invokeExact(part, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_filename(curl_mimepart *part, const char *filename)
     * }
     */
    public static FunctionDescriptor curl_mime_filename$descriptor() {
        return curl_mime_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_filename(curl_mimepart *part, const char *filename)
     * }
     */
    public static MethodHandle curl_mime_filename$handle() {
        return curl_mime_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_filename(curl_mimepart *part, const char *filename)
     * }
     */
    public static MemorySegment curl_mime_filename$address() {
        return curl_mime_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_filename(curl_mimepart *part, const char *filename)
     * }
     */
    public static int curl_mime_filename(MemorySegment part, MemorySegment filename) {
        var mh$ = curl_mime_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_filename", part, filename);
            }
            return (int)mh$.invokeExact(part, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_type(curl_mimepart *part, const char *mimetype)
     * }
     */
    public static FunctionDescriptor curl_mime_type$descriptor() {
        return curl_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_type(curl_mimepart *part, const char *mimetype)
     * }
     */
    public static MethodHandle curl_mime_type$handle() {
        return curl_mime_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_type(curl_mimepart *part, const char *mimetype)
     * }
     */
    public static MemorySegment curl_mime_type$address() {
        return curl_mime_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_type(curl_mimepart *part, const char *mimetype)
     * }
     */
    public static int curl_mime_type(MemorySegment part, MemorySegment mimetype) {
        var mh$ = curl_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_type", part, mimetype);
            }
            return (int)mh$.invokeExact(part, mimetype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_encoder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_encoder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_encoder(curl_mimepart *part, const char *encoding)
     * }
     */
    public static FunctionDescriptor curl_mime_encoder$descriptor() {
        return curl_mime_encoder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_encoder(curl_mimepart *part, const char *encoding)
     * }
     */
    public static MethodHandle curl_mime_encoder$handle() {
        return curl_mime_encoder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_encoder(curl_mimepart *part, const char *encoding)
     * }
     */
    public static MemorySegment curl_mime_encoder$address() {
        return curl_mime_encoder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_encoder(curl_mimepart *part, const char *encoding)
     * }
     */
    public static int curl_mime_encoder(MemorySegment part, MemorySegment encoding) {
        var mh$ = curl_mime_encoder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_encoder", part, encoding);
            }
            return (int)mh$.invokeExact(part, encoding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_LONG
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_data(curl_mimepart *part, const char *data, size_t datasize)
     * }
     */
    public static FunctionDescriptor curl_mime_data$descriptor() {
        return curl_mime_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_data(curl_mimepart *part, const char *data, size_t datasize)
     * }
     */
    public static MethodHandle curl_mime_data$handle() {
        return curl_mime_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_data(curl_mimepart *part, const char *data, size_t datasize)
     * }
     */
    public static MemorySegment curl_mime_data$address() {
        return curl_mime_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_data(curl_mimepart *part, const char *data, size_t datasize)
     * }
     */
    public static int curl_mime_data(MemorySegment part, MemorySegment data, long datasize) {
        var mh$ = curl_mime_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_data", part, data, datasize);
            }
            return (int)mh$.invokeExact(part, data, datasize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_filedata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_filedata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_filedata(curl_mimepart *part, const char *filename)
     * }
     */
    public static FunctionDescriptor curl_mime_filedata$descriptor() {
        return curl_mime_filedata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_filedata(curl_mimepart *part, const char *filename)
     * }
     */
    public static MethodHandle curl_mime_filedata$handle() {
        return curl_mime_filedata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_filedata(curl_mimepart *part, const char *filename)
     * }
     */
    public static MemorySegment curl_mime_filedata$address() {
        return curl_mime_filedata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_filedata(curl_mimepart *part, const char *filename)
     * }
     */
    public static int curl_mime_filedata(MemorySegment part, MemorySegment filename) {
        var mh$ = curl_mime_filedata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_filedata", part, filename);
            }
            return (int)mh$.invokeExact(part, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_data_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_LONG,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_data_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_data_cb(curl_mimepart *part, curl_off_t datasize, curl_read_callback readfunc, curl_seek_callback seekfunc, curl_free_callback freefunc, void *arg)
     * }
     */
    public static FunctionDescriptor curl_mime_data_cb$descriptor() {
        return curl_mime_data_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_data_cb(curl_mimepart *part, curl_off_t datasize, curl_read_callback readfunc, curl_seek_callback seekfunc, curl_free_callback freefunc, void *arg)
     * }
     */
    public static MethodHandle curl_mime_data_cb$handle() {
        return curl_mime_data_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_data_cb(curl_mimepart *part, curl_off_t datasize, curl_read_callback readfunc, curl_seek_callback seekfunc, curl_free_callback freefunc, void *arg)
     * }
     */
    public static MemorySegment curl_mime_data_cb$address() {
        return curl_mime_data_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_data_cb(curl_mimepart *part, curl_off_t datasize, curl_read_callback readfunc, curl_seek_callback seekfunc, curl_free_callback freefunc, void *arg)
     * }
     */
    public static int curl_mime_data_cb(MemorySegment part, long datasize, MemorySegment readfunc, MemorySegment seekfunc, MemorySegment freefunc, MemorySegment arg) {
        var mh$ = curl_mime_data_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_data_cb", part, datasize, readfunc, seekfunc, freefunc, arg);
            }
            return (int)mh$.invokeExact(part, datasize, readfunc, seekfunc, freefunc, arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_subparts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_subparts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_subparts(curl_mimepart *part, curl_mime *subparts)
     * }
     */
    public static FunctionDescriptor curl_mime_subparts$descriptor() {
        return curl_mime_subparts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_subparts(curl_mimepart *part, curl_mime *subparts)
     * }
     */
    public static MethodHandle curl_mime_subparts$handle() {
        return curl_mime_subparts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_subparts(curl_mimepart *part, curl_mime *subparts)
     * }
     */
    public static MemorySegment curl_mime_subparts$address() {
        return curl_mime_subparts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_subparts(curl_mimepart *part, curl_mime *subparts)
     * }
     */
    public static int curl_mime_subparts(MemorySegment part, MemorySegment subparts) {
        var mh$ = curl_mime_subparts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_subparts", part, subparts);
            }
            return (int)mh$.invokeExact(part, subparts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mime_headers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mime_headers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_mime_headers(curl_mimepart *part, struct curl_slist *headers, int take_ownership)
     * }
     */
    public static FunctionDescriptor curl_mime_headers$descriptor() {
        return curl_mime_headers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_mime_headers(curl_mimepart *part, struct curl_slist *headers, int take_ownership)
     * }
     */
    public static MethodHandle curl_mime_headers$handle() {
        return curl_mime_headers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_mime_headers(curl_mimepart *part, struct curl_slist *headers, int take_ownership)
     * }
     */
    public static MemorySegment curl_mime_headers$address() {
        return curl_mime_headers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_mime_headers(curl_mimepart *part, struct curl_slist *headers, int take_ownership)
     * }
     */
    public static int curl_mime_headers(MemorySegment part, MemorySegment headers, int take_ownership) {
        var mh$ = curl_mime_headers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mime_headers", part, headers, take_ownership);
            }
            return (int)mh$.invokeExact(part, headers, take_ownership);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLFORM_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_NOTHING = 0
     * }
     */
    public static int CURLFORM_NOTHING() {
        return CURLFORM_NOTHING;
    }
    private static final int CURLFORM_COPYNAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_COPYNAME = 1
     * }
     */
    public static int CURLFORM_COPYNAME() {
        return CURLFORM_COPYNAME;
    }
    private static final int CURLFORM_PTRNAME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_PTRNAME = 2
     * }
     */
    public static int CURLFORM_PTRNAME() {
        return CURLFORM_PTRNAME;
    }
    private static final int CURLFORM_NAMELENGTH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_NAMELENGTH = 3
     * }
     */
    public static int CURLFORM_NAMELENGTH() {
        return CURLFORM_NAMELENGTH;
    }
    private static final int CURLFORM_COPYCONTENTS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_COPYCONTENTS = 4
     * }
     */
    public static int CURLFORM_COPYCONTENTS() {
        return CURLFORM_COPYCONTENTS;
    }
    private static final int CURLFORM_PTRCONTENTS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_PTRCONTENTS = 5
     * }
     */
    public static int CURLFORM_PTRCONTENTS() {
        return CURLFORM_PTRCONTENTS;
    }
    private static final int CURLFORM_CONTENTSLENGTH = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_CONTENTSLENGTH = 6
     * }
     */
    public static int CURLFORM_CONTENTSLENGTH() {
        return CURLFORM_CONTENTSLENGTH;
    }
    private static final int CURLFORM_FILECONTENT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_FILECONTENT = 7
     * }
     */
    public static int CURLFORM_FILECONTENT() {
        return CURLFORM_FILECONTENT;
    }
    private static final int CURLFORM_ARRAY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_ARRAY = 8
     * }
     */
    public static int CURLFORM_ARRAY() {
        return CURLFORM_ARRAY;
    }
    private static final int CURLFORM_OBSOLETE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_OBSOLETE = 9
     * }
     */
    public static int CURLFORM_OBSOLETE() {
        return CURLFORM_OBSOLETE;
    }
    private static final int CURLFORM_FILE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_FILE = 10
     * }
     */
    public static int CURLFORM_FILE() {
        return CURLFORM_FILE;
    }
    private static final int CURLFORM_BUFFER = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_BUFFER = 11
     * }
     */
    public static int CURLFORM_BUFFER() {
        return CURLFORM_BUFFER;
    }
    private static final int CURLFORM_BUFFERPTR = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_BUFFERPTR = 12
     * }
     */
    public static int CURLFORM_BUFFERPTR() {
        return CURLFORM_BUFFERPTR;
    }
    private static final int CURLFORM_BUFFERLENGTH = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_BUFFERLENGTH = 13
     * }
     */
    public static int CURLFORM_BUFFERLENGTH() {
        return CURLFORM_BUFFERLENGTH;
    }
    private static final int CURLFORM_CONTENTTYPE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_CONTENTTYPE = 14
     * }
     */
    public static int CURLFORM_CONTENTTYPE() {
        return CURLFORM_CONTENTTYPE;
    }
    private static final int CURLFORM_CONTENTHEADER = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_CONTENTHEADER = 15
     * }
     */
    public static int CURLFORM_CONTENTHEADER() {
        return CURLFORM_CONTENTHEADER;
    }
    private static final int CURLFORM_FILENAME = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_FILENAME = 16
     * }
     */
    public static int CURLFORM_FILENAME() {
        return CURLFORM_FILENAME;
    }
    private static final int CURLFORM_END = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_END = 17
     * }
     */
    public static int CURLFORM_END() {
        return CURLFORM_END;
    }
    private static final int CURLFORM_OBSOLETE2 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_OBSOLETE2 = 18
     * }
     */
    public static int CURLFORM_OBSOLETE2() {
        return CURLFORM_OBSOLETE2;
    }
    private static final int CURLFORM_STREAM = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_STREAM = 19
     * }
     */
    public static int CURLFORM_STREAM() {
        return CURLFORM_STREAM;
    }
    private static final int CURLFORM_CONTENTLEN = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_CONTENTLEN = 20
     * }
     */
    public static int CURLFORM_CONTENTLEN() {
        return CURLFORM_CONTENTLEN;
    }
    private static final int CURLFORM_LASTENTRY = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLFORM_LASTENTRY = 21
     * }
     */
    public static int CURLFORM_LASTENTRY() {
        return CURLFORM_LASTENTRY;
    }
    private static final int CURL_FORMADD_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_OK = 0
     * }
     */
    public static int CURL_FORMADD_OK() {
        return CURL_FORMADD_OK;
    }
    private static final int CURL_FORMADD_MEMORY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_MEMORY = 1
     * }
     */
    public static int CURL_FORMADD_MEMORY() {
        return CURL_FORMADD_MEMORY;
    }
    private static final int CURL_FORMADD_OPTION_TWICE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_OPTION_TWICE = 2
     * }
     */
    public static int CURL_FORMADD_OPTION_TWICE() {
        return CURL_FORMADD_OPTION_TWICE;
    }
    private static final int CURL_FORMADD_NULL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_NULL = 3
     * }
     */
    public static int CURL_FORMADD_NULL() {
        return CURL_FORMADD_NULL;
    }
    private static final int CURL_FORMADD_UNKNOWN_OPTION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_UNKNOWN_OPTION = 4
     * }
     */
    public static int CURL_FORMADD_UNKNOWN_OPTION() {
        return CURL_FORMADD_UNKNOWN_OPTION;
    }
    private static final int CURL_FORMADD_INCOMPLETE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_INCOMPLETE = 5
     * }
     */
    public static int CURL_FORMADD_INCOMPLETE() {
        return CURL_FORMADD_INCOMPLETE;
    }
    private static final int CURL_FORMADD_ILLEGAL_ARRAY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_ILLEGAL_ARRAY = 6
     * }
     */
    public static int CURL_FORMADD_ILLEGAL_ARRAY() {
        return CURL_FORMADD_ILLEGAL_ARRAY;
    }
    private static final int CURL_FORMADD_DISABLED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_DISABLED = 7
     * }
     */
    public static int CURL_FORMADD_DISABLED() {
        return CURL_FORMADD_DISABLED;
    }
    private static final int CURL_FORMADD_LAST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_FORMADD_LAST = 8
     * }
     */
    public static int CURL_FORMADD_LAST() {
        return CURL_FORMADD_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CURLFORMcode curl_formadd(struct curl_httppost **httppost, struct curl_httppost **last_post, ...)
     * }
     */
    public static class curl_formadd {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER,
                curl_h.C_POINTER
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_formadd");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_formadd(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CURLFORMcode curl_formadd(struct curl_httppost **httppost, struct curl_httppost **last_post, ...)
         * }
         */
        public static curl_formadd makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_formadd(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment httppost, MemorySegment last_post, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_formadd", httppost, last_post, x2);
                }
                return (int)spreader.invokeExact(httppost, last_post, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class curl_formget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_formget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int curl_formget(struct curl_httppost *form, void *arg, curl_formget_callback append)
     * }
     */
    public static FunctionDescriptor curl_formget$descriptor() {
        return curl_formget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int curl_formget(struct curl_httppost *form, void *arg, curl_formget_callback append)
     * }
     */
    public static MethodHandle curl_formget$handle() {
        return curl_formget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int curl_formget(struct curl_httppost *form, void *arg, curl_formget_callback append)
     * }
     */
    public static MemorySegment curl_formget$address() {
        return curl_formget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int curl_formget(struct curl_httppost *form, void *arg, curl_formget_callback append)
     * }
     */
    public static int curl_formget(MemorySegment form, MemorySegment arg, MemorySegment append) {
        var mh$ = curl_formget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_formget", form, arg, append);
            }
            return (int)mh$.invokeExact(form, arg, append);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_formfree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_formfree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void curl_formfree(struct curl_httppost *form)
     * }
     */
    public static FunctionDescriptor curl_formfree$descriptor() {
        return curl_formfree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void curl_formfree(struct curl_httppost *form)
     * }
     */
    public static MethodHandle curl_formfree$handle() {
        return curl_formfree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void curl_formfree(struct curl_httppost *form)
     * }
     */
    public static MemorySegment curl_formfree$address() {
        return curl_formfree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void curl_formfree(struct curl_httppost *form)
     * }
     */
    public static void curl_formfree(MemorySegment form) {
        var mh$ = curl_formfree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_formfree", form);
            }
            mh$.invokeExact(form);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_getenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_getenv(const char *variable)
     * }
     */
    public static FunctionDescriptor curl_getenv$descriptor() {
        return curl_getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_getenv(const char *variable)
     * }
     */
    public static MethodHandle curl_getenv$handle() {
        return curl_getenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_getenv(const char *variable)
     * }
     */
    public static MemorySegment curl_getenv$address() {
        return curl_getenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_getenv(const char *variable)
     * }
     */
    public static MemorySegment curl_getenv(MemorySegment variable) {
        var mh$ = curl_getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_getenv", variable);
            }
            return (MemorySegment)mh$.invokeExact(variable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER    );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_version()
     * }
     */
    public static FunctionDescriptor curl_version$descriptor() {
        return curl_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_version()
     * }
     */
    public static MethodHandle curl_version$handle() {
        return curl_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_version()
     * }
     */
    public static MemorySegment curl_version$address() {
        return curl_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_version()
     * }
     */
    public static MemorySegment curl_version() {
        var mh$ = curl_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_version");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_escape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_escape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_easy_escape(CURL *handle, const char *string, int length)
     * }
     */
    public static FunctionDescriptor curl_easy_escape$descriptor() {
        return curl_easy_escape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_easy_escape(CURL *handle, const char *string, int length)
     * }
     */
    public static MethodHandle curl_easy_escape$handle() {
        return curl_easy_escape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_easy_escape(CURL *handle, const char *string, int length)
     * }
     */
    public static MemorySegment curl_easy_escape$address() {
        return curl_easy_escape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_easy_escape(CURL *handle, const char *string, int length)
     * }
     */
    public static MemorySegment curl_easy_escape(MemorySegment handle, MemorySegment string, int length) {
        var mh$ = curl_easy_escape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_escape", handle, string, length);
            }
            return (MemorySegment)mh$.invokeExact(handle, string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_escape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_escape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_escape(const char *string, int length)
     * }
     */
    public static FunctionDescriptor curl_escape$descriptor() {
        return curl_escape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_escape(const char *string, int length)
     * }
     */
    public static MethodHandle curl_escape$handle() {
        return curl_escape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_escape(const char *string, int length)
     * }
     */
    public static MemorySegment curl_escape$address() {
        return curl_escape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_escape(const char *string, int length)
     * }
     */
    public static MemorySegment curl_escape(MemorySegment string, int length) {
        var mh$ = curl_escape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_escape", string, length);
            }
            return (MemorySegment)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_unescape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_unescape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_easy_unescape(CURL *handle, const char *string, int length, int *outlength)
     * }
     */
    public static FunctionDescriptor curl_easy_unescape$descriptor() {
        return curl_easy_unescape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_easy_unescape(CURL *handle, const char *string, int length, int *outlength)
     * }
     */
    public static MethodHandle curl_easy_unescape$handle() {
        return curl_easy_unescape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_easy_unescape(CURL *handle, const char *string, int length, int *outlength)
     * }
     */
    public static MemorySegment curl_easy_unescape$address() {
        return curl_easy_unescape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_easy_unescape(CURL *handle, const char *string, int length, int *outlength)
     * }
     */
    public static MemorySegment curl_easy_unescape(MemorySegment handle, MemorySegment string, int length, MemorySegment outlength) {
        var mh$ = curl_easy_unescape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_unescape", handle, string, length, outlength);
            }
            return (MemorySegment)mh$.invokeExact(handle, string, length, outlength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_unescape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_unescape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_unescape(const char *string, int length)
     * }
     */
    public static FunctionDescriptor curl_unescape$descriptor() {
        return curl_unescape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_unescape(const char *string, int length)
     * }
     */
    public static MethodHandle curl_unescape$handle() {
        return curl_unescape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_unescape(const char *string, int length)
     * }
     */
    public static MemorySegment curl_unescape$address() {
        return curl_unescape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_unescape(const char *string, int length)
     * }
     */
    public static MemorySegment curl_unescape(MemorySegment string, int length) {
        var mh$ = curl_unescape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_unescape", string, length);
            }
            return (MemorySegment)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void curl_free(void *p)
     * }
     */
    public static FunctionDescriptor curl_free$descriptor() {
        return curl_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void curl_free(void *p)
     * }
     */
    public static MethodHandle curl_free$handle() {
        return curl_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void curl_free(void *p)
     * }
     */
    public static MemorySegment curl_free$address() {
        return curl_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void curl_free(void *p)
     * }
     */
    public static void curl_free(MemorySegment p) {
        var mh$ = curl_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_free", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_global_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_LONG
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_global_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_global_init(long flags)
     * }
     */
    public static FunctionDescriptor curl_global_init$descriptor() {
        return curl_global_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_global_init(long flags)
     * }
     */
    public static MethodHandle curl_global_init$handle() {
        return curl_global_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_global_init(long flags)
     * }
     */
    public static MemorySegment curl_global_init$address() {
        return curl_global_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_global_init(long flags)
     * }
     */
    public static int curl_global_init(long flags) {
        var mh$ = curl_global_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_global_init", flags);
            }
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_global_init_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_LONG,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_global_init_mem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_global_init_mem(long flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c)
     * }
     */
    public static FunctionDescriptor curl_global_init_mem$descriptor() {
        return curl_global_init_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_global_init_mem(long flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c)
     * }
     */
    public static MethodHandle curl_global_init_mem$handle() {
        return curl_global_init_mem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_global_init_mem(long flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c)
     * }
     */
    public static MemorySegment curl_global_init_mem$address() {
        return curl_global_init_mem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_global_init_mem(long flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c)
     * }
     */
    public static int curl_global_init_mem(long flags, MemorySegment m, MemorySegment f, MemorySegment r, MemorySegment s, MemorySegment c) {
        var mh$ = curl_global_init_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_global_init_mem", flags, m, f, r, s, c);
            }
            return (int)mh$.invokeExact(flags, m, f, r, s, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_global_cleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_global_cleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void curl_global_cleanup()
     * }
     */
    public static FunctionDescriptor curl_global_cleanup$descriptor() {
        return curl_global_cleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void curl_global_cleanup()
     * }
     */
    public static MethodHandle curl_global_cleanup$handle() {
        return curl_global_cleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void curl_global_cleanup()
     * }
     */
    public static MemorySegment curl_global_cleanup$address() {
        return curl_global_cleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void curl_global_cleanup()
     * }
     */
    public static void curl_global_cleanup() {
        var mh$ = curl_global_cleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_global_cleanup");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_global_trace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_global_trace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_global_trace(const char *config)
     * }
     */
    public static FunctionDescriptor curl_global_trace$descriptor() {
        return curl_global_trace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_global_trace(const char *config)
     * }
     */
    public static MethodHandle curl_global_trace$handle() {
        return curl_global_trace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_global_trace(const char *config)
     * }
     */
    public static MemorySegment curl_global_trace$address() {
        return curl_global_trace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_global_trace(const char *config)
     * }
     */
    public static int curl_global_trace(MemorySegment config) {
        var mh$ = curl_global_trace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_global_trace", config);
            }
            return (int)mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLSSLSET_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSSLSET_OK = 0
     * }
     */
    public static int CURLSSLSET_OK() {
        return CURLSSLSET_OK;
    }
    private static final int CURLSSLSET_UNKNOWN_BACKEND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSSLSET_UNKNOWN_BACKEND = 1
     * }
     */
    public static int CURLSSLSET_UNKNOWN_BACKEND() {
        return CURLSSLSET_UNKNOWN_BACKEND;
    }
    private static final int CURLSSLSET_TOO_LATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSSLSET_TOO_LATE = 2
     * }
     */
    public static int CURLSSLSET_TOO_LATE() {
        return CURLSSLSET_TOO_LATE;
    }
    private static final int CURLSSLSET_NO_BACKENDS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSSLSET_NO_BACKENDS = 3
     * }
     */
    public static int CURLSSLSET_NO_BACKENDS() {
        return CURLSSLSET_NO_BACKENDS;
    }

    private static class curl_global_sslset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_global_sslset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLsslset curl_global_sslset(curl_sslbackend id, const char *name, const curl_ssl_backend ***avail)
     * }
     */
    public static FunctionDescriptor curl_global_sslset$descriptor() {
        return curl_global_sslset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLsslset curl_global_sslset(curl_sslbackend id, const char *name, const curl_ssl_backend ***avail)
     * }
     */
    public static MethodHandle curl_global_sslset$handle() {
        return curl_global_sslset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLsslset curl_global_sslset(curl_sslbackend id, const char *name, const curl_ssl_backend ***avail)
     * }
     */
    public static MemorySegment curl_global_sslset$address() {
        return curl_global_sslset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLsslset curl_global_sslset(curl_sslbackend id, const char *name, const curl_ssl_backend ***avail)
     * }
     */
    public static int curl_global_sslset(int id, MemorySegment name, MemorySegment avail) {
        var mh$ = curl_global_sslset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_global_sslset", id, name, avail);
            }
            return (int)mh$.invokeExact(id, name, avail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_slist_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_slist_append");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct curl_slist *curl_slist_append(struct curl_slist *list, const char *data)
     * }
     */
    public static FunctionDescriptor curl_slist_append$descriptor() {
        return curl_slist_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct curl_slist *curl_slist_append(struct curl_slist *list, const char *data)
     * }
     */
    public static MethodHandle curl_slist_append$handle() {
        return curl_slist_append.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct curl_slist *curl_slist_append(struct curl_slist *list, const char *data)
     * }
     */
    public static MemorySegment curl_slist_append$address() {
        return curl_slist_append.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct curl_slist *curl_slist_append(struct curl_slist *list, const char *data)
     * }
     */
    public static MemorySegment curl_slist_append(MemorySegment list, MemorySegment data) {
        var mh$ = curl_slist_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_slist_append", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_slist_free_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_slist_free_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void curl_slist_free_all(struct curl_slist *list)
     * }
     */
    public static FunctionDescriptor curl_slist_free_all$descriptor() {
        return curl_slist_free_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void curl_slist_free_all(struct curl_slist *list)
     * }
     */
    public static MethodHandle curl_slist_free_all$handle() {
        return curl_slist_free_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void curl_slist_free_all(struct curl_slist *list)
     * }
     */
    public static MemorySegment curl_slist_free_all$address() {
        return curl_slist_free_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void curl_slist_free_all(struct curl_slist *list)
     * }
     */
    public static void curl_slist_free_all(MemorySegment list) {
        var mh$ = curl_slist_free_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_slist_free_all", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_getdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_LONG,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_getdate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * time_t curl_getdate(const char *p, const time_t *unused)
     * }
     */
    public static FunctionDescriptor curl_getdate$descriptor() {
        return curl_getdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * time_t curl_getdate(const char *p, const time_t *unused)
     * }
     */
    public static MethodHandle curl_getdate$handle() {
        return curl_getdate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * time_t curl_getdate(const char *p, const time_t *unused)
     * }
     */
    public static MemorySegment curl_getdate$address() {
        return curl_getdate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * time_t curl_getdate(const char *p, const time_t *unused)
     * }
     */
    public static long curl_getdate(MemorySegment p, MemorySegment unused) {
        var mh$ = curl_getdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_getdate", p, unused);
            }
            return (long)mh$.invokeExact(p, unused);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLINFO_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_NONE = 0
     * }
     */
    public static int CURLINFO_NONE() {
        return CURLINFO_NONE;
    }
    private static final int CURLINFO_EFFECTIVE_URL = (int)1048577L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_EFFECTIVE_URL = 1048577
     * }
     */
    public static int CURLINFO_EFFECTIVE_URL() {
        return CURLINFO_EFFECTIVE_URL;
    }
    private static final int CURLINFO_RESPONSE_CODE = (int)2097154L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_RESPONSE_CODE = 2097154
     * }
     */
    public static int CURLINFO_RESPONSE_CODE() {
        return CURLINFO_RESPONSE_CODE;
    }
    private static final int CURLINFO_TOTAL_TIME = (int)3145731L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_TOTAL_TIME = 3145731
     * }
     */
    public static int CURLINFO_TOTAL_TIME() {
        return CURLINFO_TOTAL_TIME;
    }
    private static final int CURLINFO_NAMELOOKUP_TIME = (int)3145732L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_NAMELOOKUP_TIME = 3145732
     * }
     */
    public static int CURLINFO_NAMELOOKUP_TIME() {
        return CURLINFO_NAMELOOKUP_TIME;
    }
    private static final int CURLINFO_CONNECT_TIME = (int)3145733L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONNECT_TIME = 3145733
     * }
     */
    public static int CURLINFO_CONNECT_TIME() {
        return CURLINFO_CONNECT_TIME;
    }
    private static final int CURLINFO_PRETRANSFER_TIME = (int)3145734L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PRETRANSFER_TIME = 3145734
     * }
     */
    public static int CURLINFO_PRETRANSFER_TIME() {
        return CURLINFO_PRETRANSFER_TIME;
    }
    private static final int CURLINFO_SIZE_UPLOAD = (int)3145735L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SIZE_UPLOAD = 3145735
     * }
     */
    public static int CURLINFO_SIZE_UPLOAD() {
        return CURLINFO_SIZE_UPLOAD;
    }
    private static final int CURLINFO_SIZE_UPLOAD_T = (int)6291463L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SIZE_UPLOAD_T = 6291463
     * }
     */
    public static int CURLINFO_SIZE_UPLOAD_T() {
        return CURLINFO_SIZE_UPLOAD_T;
    }
    private static final int CURLINFO_SIZE_DOWNLOAD = (int)3145736L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SIZE_DOWNLOAD = 3145736
     * }
     */
    public static int CURLINFO_SIZE_DOWNLOAD() {
        return CURLINFO_SIZE_DOWNLOAD;
    }
    private static final int CURLINFO_SIZE_DOWNLOAD_T = (int)6291464L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SIZE_DOWNLOAD_T = 6291464
     * }
     */
    public static int CURLINFO_SIZE_DOWNLOAD_T() {
        return CURLINFO_SIZE_DOWNLOAD_T;
    }
    private static final int CURLINFO_SPEED_DOWNLOAD = (int)3145737L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SPEED_DOWNLOAD = 3145737
     * }
     */
    public static int CURLINFO_SPEED_DOWNLOAD() {
        return CURLINFO_SPEED_DOWNLOAD;
    }
    private static final int CURLINFO_SPEED_DOWNLOAD_T = (int)6291465L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SPEED_DOWNLOAD_T = 6291465
     * }
     */
    public static int CURLINFO_SPEED_DOWNLOAD_T() {
        return CURLINFO_SPEED_DOWNLOAD_T;
    }
    private static final int CURLINFO_SPEED_UPLOAD = (int)3145738L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SPEED_UPLOAD = 3145738
     * }
     */
    public static int CURLINFO_SPEED_UPLOAD() {
        return CURLINFO_SPEED_UPLOAD;
    }
    private static final int CURLINFO_SPEED_UPLOAD_T = (int)6291466L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SPEED_UPLOAD_T = 6291466
     * }
     */
    public static int CURLINFO_SPEED_UPLOAD_T() {
        return CURLINFO_SPEED_UPLOAD_T;
    }
    private static final int CURLINFO_HEADER_SIZE = (int)2097163L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_HEADER_SIZE = 2097163
     * }
     */
    public static int CURLINFO_HEADER_SIZE() {
        return CURLINFO_HEADER_SIZE;
    }
    private static final int CURLINFO_REQUEST_SIZE = (int)2097164L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_REQUEST_SIZE = 2097164
     * }
     */
    public static int CURLINFO_REQUEST_SIZE() {
        return CURLINFO_REQUEST_SIZE;
    }
    private static final int CURLINFO_SSL_VERIFYRESULT = (int)2097165L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SSL_VERIFYRESULT = 2097165
     * }
     */
    public static int CURLINFO_SSL_VERIFYRESULT() {
        return CURLINFO_SSL_VERIFYRESULT;
    }
    private static final int CURLINFO_FILETIME = (int)2097166L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_FILETIME = 2097166
     * }
     */
    public static int CURLINFO_FILETIME() {
        return CURLINFO_FILETIME;
    }
    private static final int CURLINFO_FILETIME_T = (int)6291470L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_FILETIME_T = 6291470
     * }
     */
    public static int CURLINFO_FILETIME_T() {
        return CURLINFO_FILETIME_T;
    }
    private static final int CURLINFO_CONTENT_LENGTH_DOWNLOAD = (int)3145743L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONTENT_LENGTH_DOWNLOAD = 3145743
     * }
     */
    public static int CURLINFO_CONTENT_LENGTH_DOWNLOAD() {
        return CURLINFO_CONTENT_LENGTH_DOWNLOAD;
    }
    private static final int CURLINFO_CONTENT_LENGTH_DOWNLOAD_T = (int)6291471L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONTENT_LENGTH_DOWNLOAD_T = 6291471
     * }
     */
    public static int CURLINFO_CONTENT_LENGTH_DOWNLOAD_T() {
        return CURLINFO_CONTENT_LENGTH_DOWNLOAD_T;
    }
    private static final int CURLINFO_CONTENT_LENGTH_UPLOAD = (int)3145744L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONTENT_LENGTH_UPLOAD = 3145744
     * }
     */
    public static int CURLINFO_CONTENT_LENGTH_UPLOAD() {
        return CURLINFO_CONTENT_LENGTH_UPLOAD;
    }
    private static final int CURLINFO_CONTENT_LENGTH_UPLOAD_T = (int)6291472L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONTENT_LENGTH_UPLOAD_T = 6291472
     * }
     */
    public static int CURLINFO_CONTENT_LENGTH_UPLOAD_T() {
        return CURLINFO_CONTENT_LENGTH_UPLOAD_T;
    }
    private static final int CURLINFO_STARTTRANSFER_TIME = (int)3145745L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_STARTTRANSFER_TIME = 3145745
     * }
     */
    public static int CURLINFO_STARTTRANSFER_TIME() {
        return CURLINFO_STARTTRANSFER_TIME;
    }
    private static final int CURLINFO_CONTENT_TYPE = (int)1048594L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONTENT_TYPE = 1048594
     * }
     */
    public static int CURLINFO_CONTENT_TYPE() {
        return CURLINFO_CONTENT_TYPE;
    }
    private static final int CURLINFO_REDIRECT_TIME = (int)3145747L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_REDIRECT_TIME = 3145747
     * }
     */
    public static int CURLINFO_REDIRECT_TIME() {
        return CURLINFO_REDIRECT_TIME;
    }
    private static final int CURLINFO_REDIRECT_COUNT = (int)2097172L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_REDIRECT_COUNT = 2097172
     * }
     */
    public static int CURLINFO_REDIRECT_COUNT() {
        return CURLINFO_REDIRECT_COUNT;
    }
    private static final int CURLINFO_PRIVATE = (int)1048597L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PRIVATE = 1048597
     * }
     */
    public static int CURLINFO_PRIVATE() {
        return CURLINFO_PRIVATE;
    }
    private static final int CURLINFO_HTTP_CONNECTCODE = (int)2097174L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_HTTP_CONNECTCODE = 2097174
     * }
     */
    public static int CURLINFO_HTTP_CONNECTCODE() {
        return CURLINFO_HTTP_CONNECTCODE;
    }
    private static final int CURLINFO_HTTPAUTH_AVAIL = (int)2097175L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_HTTPAUTH_AVAIL = 2097175
     * }
     */
    public static int CURLINFO_HTTPAUTH_AVAIL() {
        return CURLINFO_HTTPAUTH_AVAIL;
    }
    private static final int CURLINFO_PROXYAUTH_AVAIL = (int)2097176L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PROXYAUTH_AVAIL = 2097176
     * }
     */
    public static int CURLINFO_PROXYAUTH_AVAIL() {
        return CURLINFO_PROXYAUTH_AVAIL;
    }
    private static final int CURLINFO_OS_ERRNO = (int)2097177L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_OS_ERRNO = 2097177
     * }
     */
    public static int CURLINFO_OS_ERRNO() {
        return CURLINFO_OS_ERRNO;
    }
    private static final int CURLINFO_NUM_CONNECTS = (int)2097178L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_NUM_CONNECTS = 2097178
     * }
     */
    public static int CURLINFO_NUM_CONNECTS() {
        return CURLINFO_NUM_CONNECTS;
    }
    private static final int CURLINFO_SSL_ENGINES = (int)4194331L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SSL_ENGINES = 4194331
     * }
     */
    public static int CURLINFO_SSL_ENGINES() {
        return CURLINFO_SSL_ENGINES;
    }
    private static final int CURLINFO_COOKIELIST = (int)4194332L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_COOKIELIST = 4194332
     * }
     */
    public static int CURLINFO_COOKIELIST() {
        return CURLINFO_COOKIELIST;
    }
    private static final int CURLINFO_LASTSOCKET = (int)2097181L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_LASTSOCKET = 2097181
     * }
     */
    public static int CURLINFO_LASTSOCKET() {
        return CURLINFO_LASTSOCKET;
    }
    private static final int CURLINFO_FTP_ENTRY_PATH = (int)1048606L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_FTP_ENTRY_PATH = 1048606
     * }
     */
    public static int CURLINFO_FTP_ENTRY_PATH() {
        return CURLINFO_FTP_ENTRY_PATH;
    }
    private static final int CURLINFO_REDIRECT_URL = (int)1048607L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_REDIRECT_URL = 1048607
     * }
     */
    public static int CURLINFO_REDIRECT_URL() {
        return CURLINFO_REDIRECT_URL;
    }
    private static final int CURLINFO_PRIMARY_IP = (int)1048608L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PRIMARY_IP = 1048608
     * }
     */
    public static int CURLINFO_PRIMARY_IP() {
        return CURLINFO_PRIMARY_IP;
    }
    private static final int CURLINFO_APPCONNECT_TIME = (int)3145761L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_APPCONNECT_TIME = 3145761
     * }
     */
    public static int CURLINFO_APPCONNECT_TIME() {
        return CURLINFO_APPCONNECT_TIME;
    }
    private static final int CURLINFO_CERTINFO = (int)4194338L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CERTINFO = 4194338
     * }
     */
    public static int CURLINFO_CERTINFO() {
        return CURLINFO_CERTINFO;
    }
    private static final int CURLINFO_CONDITION_UNMET = (int)2097187L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONDITION_UNMET = 2097187
     * }
     */
    public static int CURLINFO_CONDITION_UNMET() {
        return CURLINFO_CONDITION_UNMET;
    }
    private static final int CURLINFO_RTSP_SESSION_ID = (int)1048612L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_RTSP_SESSION_ID = 1048612
     * }
     */
    public static int CURLINFO_RTSP_SESSION_ID() {
        return CURLINFO_RTSP_SESSION_ID;
    }
    private static final int CURLINFO_RTSP_CLIENT_CSEQ = (int)2097189L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_RTSP_CLIENT_CSEQ = 2097189
     * }
     */
    public static int CURLINFO_RTSP_CLIENT_CSEQ() {
        return CURLINFO_RTSP_CLIENT_CSEQ;
    }
    private static final int CURLINFO_RTSP_SERVER_CSEQ = (int)2097190L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_RTSP_SERVER_CSEQ = 2097190
     * }
     */
    public static int CURLINFO_RTSP_SERVER_CSEQ() {
        return CURLINFO_RTSP_SERVER_CSEQ;
    }
    private static final int CURLINFO_RTSP_CSEQ_RECV = (int)2097191L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_RTSP_CSEQ_RECV = 2097191
     * }
     */
    public static int CURLINFO_RTSP_CSEQ_RECV() {
        return CURLINFO_RTSP_CSEQ_RECV;
    }
    private static final int CURLINFO_PRIMARY_PORT = (int)2097192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PRIMARY_PORT = 2097192
     * }
     */
    public static int CURLINFO_PRIMARY_PORT() {
        return CURLINFO_PRIMARY_PORT;
    }
    private static final int CURLINFO_LOCAL_IP = (int)1048617L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_LOCAL_IP = 1048617
     * }
     */
    public static int CURLINFO_LOCAL_IP() {
        return CURLINFO_LOCAL_IP;
    }
    private static final int CURLINFO_LOCAL_PORT = (int)2097194L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_LOCAL_PORT = 2097194
     * }
     */
    public static int CURLINFO_LOCAL_PORT() {
        return CURLINFO_LOCAL_PORT;
    }
    private static final int CURLINFO_TLS_SESSION = (int)4194347L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_TLS_SESSION = 4194347
     * }
     */
    public static int CURLINFO_TLS_SESSION() {
        return CURLINFO_TLS_SESSION;
    }
    private static final int CURLINFO_ACTIVESOCKET = (int)5242924L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_ACTIVESOCKET = 5242924
     * }
     */
    public static int CURLINFO_ACTIVESOCKET() {
        return CURLINFO_ACTIVESOCKET;
    }
    private static final int CURLINFO_TLS_SSL_PTR = (int)4194349L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_TLS_SSL_PTR = 4194349
     * }
     */
    public static int CURLINFO_TLS_SSL_PTR() {
        return CURLINFO_TLS_SSL_PTR;
    }
    private static final int CURLINFO_HTTP_VERSION = (int)2097198L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_HTTP_VERSION = 2097198
     * }
     */
    public static int CURLINFO_HTTP_VERSION() {
        return CURLINFO_HTTP_VERSION;
    }
    private static final int CURLINFO_PROXY_SSL_VERIFYRESULT = (int)2097199L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PROXY_SSL_VERIFYRESULT = 2097199
     * }
     */
    public static int CURLINFO_PROXY_SSL_VERIFYRESULT() {
        return CURLINFO_PROXY_SSL_VERIFYRESULT;
    }
    private static final int CURLINFO_PROTOCOL = (int)2097200L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PROTOCOL = 2097200
     * }
     */
    public static int CURLINFO_PROTOCOL() {
        return CURLINFO_PROTOCOL;
    }
    private static final int CURLINFO_SCHEME = (int)1048625L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_SCHEME = 1048625
     * }
     */
    public static int CURLINFO_SCHEME() {
        return CURLINFO_SCHEME;
    }
    private static final int CURLINFO_TOTAL_TIME_T = (int)6291506L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_TOTAL_TIME_T = 6291506
     * }
     */
    public static int CURLINFO_TOTAL_TIME_T() {
        return CURLINFO_TOTAL_TIME_T;
    }
    private static final int CURLINFO_NAMELOOKUP_TIME_T = (int)6291507L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_NAMELOOKUP_TIME_T = 6291507
     * }
     */
    public static int CURLINFO_NAMELOOKUP_TIME_T() {
        return CURLINFO_NAMELOOKUP_TIME_T;
    }
    private static final int CURLINFO_CONNECT_TIME_T = (int)6291508L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONNECT_TIME_T = 6291508
     * }
     */
    public static int CURLINFO_CONNECT_TIME_T() {
        return CURLINFO_CONNECT_TIME_T;
    }
    private static final int CURLINFO_PRETRANSFER_TIME_T = (int)6291509L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PRETRANSFER_TIME_T = 6291509
     * }
     */
    public static int CURLINFO_PRETRANSFER_TIME_T() {
        return CURLINFO_PRETRANSFER_TIME_T;
    }
    private static final int CURLINFO_STARTTRANSFER_TIME_T = (int)6291510L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_STARTTRANSFER_TIME_T = 6291510
     * }
     */
    public static int CURLINFO_STARTTRANSFER_TIME_T() {
        return CURLINFO_STARTTRANSFER_TIME_T;
    }
    private static final int CURLINFO_REDIRECT_TIME_T = (int)6291511L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_REDIRECT_TIME_T = 6291511
     * }
     */
    public static int CURLINFO_REDIRECT_TIME_T() {
        return CURLINFO_REDIRECT_TIME_T;
    }
    private static final int CURLINFO_APPCONNECT_TIME_T = (int)6291512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_APPCONNECT_TIME_T = 6291512
     * }
     */
    public static int CURLINFO_APPCONNECT_TIME_T() {
        return CURLINFO_APPCONNECT_TIME_T;
    }
    private static final int CURLINFO_RETRY_AFTER = (int)6291513L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_RETRY_AFTER = 6291513
     * }
     */
    public static int CURLINFO_RETRY_AFTER() {
        return CURLINFO_RETRY_AFTER;
    }
    private static final int CURLINFO_EFFECTIVE_METHOD = (int)1048634L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_EFFECTIVE_METHOD = 1048634
     * }
     */
    public static int CURLINFO_EFFECTIVE_METHOD() {
        return CURLINFO_EFFECTIVE_METHOD;
    }
    private static final int CURLINFO_PROXY_ERROR = (int)2097211L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_PROXY_ERROR = 2097211
     * }
     */
    public static int CURLINFO_PROXY_ERROR() {
        return CURLINFO_PROXY_ERROR;
    }
    private static final int CURLINFO_REFERER = (int)1048636L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_REFERER = 1048636
     * }
     */
    public static int CURLINFO_REFERER() {
        return CURLINFO_REFERER;
    }
    private static final int CURLINFO_CAINFO = (int)1048637L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CAINFO = 1048637
     * }
     */
    public static int CURLINFO_CAINFO() {
        return CURLINFO_CAINFO;
    }
    private static final int CURLINFO_CAPATH = (int)1048638L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CAPATH = 1048638
     * }
     */
    public static int CURLINFO_CAPATH() {
        return CURLINFO_CAPATH;
    }
    private static final int CURLINFO_XFER_ID = (int)6291519L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_XFER_ID = 6291519
     * }
     */
    public static int CURLINFO_XFER_ID() {
        return CURLINFO_XFER_ID;
    }
    private static final int CURLINFO_CONN_ID = (int)6291520L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_CONN_ID = 6291520
     * }
     */
    public static int CURLINFO_CONN_ID() {
        return CURLINFO_CONN_ID;
    }
    private static final int CURLINFO_QUEUE_TIME_T = (int)6291521L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_QUEUE_TIME_T = 6291521
     * }
     */
    public static int CURLINFO_QUEUE_TIME_T() {
        return CURLINFO_QUEUE_TIME_T;
    }
    private static final int CURLINFO_USED_PROXY = (int)2097218L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_USED_PROXY = 2097218
     * }
     */
    public static int CURLINFO_USED_PROXY() {
        return CURLINFO_USED_PROXY;
    }
    private static final int CURLINFO_POSTTRANSFER_TIME_T = (int)6291523L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_POSTTRANSFER_TIME_T = 6291523
     * }
     */
    public static int CURLINFO_POSTTRANSFER_TIME_T() {
        return CURLINFO_POSTTRANSFER_TIME_T;
    }
    private static final int CURLINFO_LASTONE = (int)67L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLINFO_LASTONE = 67
     * }
     */
    public static int CURLINFO_LASTONE() {
        return CURLINFO_LASTONE;
    }
    private static final int CURLCLOSEPOLICY_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLCLOSEPOLICY_NONE = 0
     * }
     */
    public static int CURLCLOSEPOLICY_NONE() {
        return CURLCLOSEPOLICY_NONE;
    }
    private static final int CURLCLOSEPOLICY_OLDEST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLCLOSEPOLICY_OLDEST = 1
     * }
     */
    public static int CURLCLOSEPOLICY_OLDEST() {
        return CURLCLOSEPOLICY_OLDEST;
    }
    private static final int CURLCLOSEPOLICY_LEAST_RECENTLY_USED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLCLOSEPOLICY_LEAST_RECENTLY_USED = 2
     * }
     */
    public static int CURLCLOSEPOLICY_LEAST_RECENTLY_USED() {
        return CURLCLOSEPOLICY_LEAST_RECENTLY_USED;
    }
    private static final int CURLCLOSEPOLICY_LEAST_TRAFFIC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLCLOSEPOLICY_LEAST_TRAFFIC = 3
     * }
     */
    public static int CURLCLOSEPOLICY_LEAST_TRAFFIC() {
        return CURLCLOSEPOLICY_LEAST_TRAFFIC;
    }
    private static final int CURLCLOSEPOLICY_SLOWEST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLCLOSEPOLICY_SLOWEST = 4
     * }
     */
    public static int CURLCLOSEPOLICY_SLOWEST() {
        return CURLCLOSEPOLICY_SLOWEST;
    }
    private static final int CURLCLOSEPOLICY_CALLBACK = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLCLOSEPOLICY_CALLBACK = 5
     * }
     */
    public static int CURLCLOSEPOLICY_CALLBACK() {
        return CURLCLOSEPOLICY_CALLBACK;
    }
    private static final int CURLCLOSEPOLICY_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLCLOSEPOLICY_LAST = 6
     * }
     */
    public static int CURLCLOSEPOLICY_LAST() {
        return CURLCLOSEPOLICY_LAST;
    }
    private static final int CURL_LOCK_DATA_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_NONE = 0
     * }
     */
    public static int CURL_LOCK_DATA_NONE() {
        return CURL_LOCK_DATA_NONE;
    }
    private static final int CURL_LOCK_DATA_SHARE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_SHARE = 1
     * }
     */
    public static int CURL_LOCK_DATA_SHARE() {
        return CURL_LOCK_DATA_SHARE;
    }
    private static final int CURL_LOCK_DATA_COOKIE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_COOKIE = 2
     * }
     */
    public static int CURL_LOCK_DATA_COOKIE() {
        return CURL_LOCK_DATA_COOKIE;
    }
    private static final int CURL_LOCK_DATA_DNS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_DNS = 3
     * }
     */
    public static int CURL_LOCK_DATA_DNS() {
        return CURL_LOCK_DATA_DNS;
    }
    private static final int CURL_LOCK_DATA_SSL_SESSION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_SSL_SESSION = 4
     * }
     */
    public static int CURL_LOCK_DATA_SSL_SESSION() {
        return CURL_LOCK_DATA_SSL_SESSION;
    }
    private static final int CURL_LOCK_DATA_CONNECT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_CONNECT = 5
     * }
     */
    public static int CURL_LOCK_DATA_CONNECT() {
        return CURL_LOCK_DATA_CONNECT;
    }
    private static final int CURL_LOCK_DATA_PSL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_PSL = 6
     * }
     */
    public static int CURL_LOCK_DATA_PSL() {
        return CURL_LOCK_DATA_PSL;
    }
    private static final int CURL_LOCK_DATA_HSTS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_HSTS = 7
     * }
     */
    public static int CURL_LOCK_DATA_HSTS() {
        return CURL_LOCK_DATA_HSTS;
    }
    private static final int CURL_LOCK_DATA_LAST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_DATA_LAST = 8
     * }
     */
    public static int CURL_LOCK_DATA_LAST() {
        return CURL_LOCK_DATA_LAST;
    }
    private static final int CURL_LOCK_ACCESS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_ACCESS_NONE = 0
     * }
     */
    public static int CURL_LOCK_ACCESS_NONE() {
        return CURL_LOCK_ACCESS_NONE;
    }
    private static final int CURL_LOCK_ACCESS_SHARED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_ACCESS_SHARED = 1
     * }
     */
    public static int CURL_LOCK_ACCESS_SHARED() {
        return CURL_LOCK_ACCESS_SHARED;
    }
    private static final int CURL_LOCK_ACCESS_SINGLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_ACCESS_SINGLE = 2
     * }
     */
    public static int CURL_LOCK_ACCESS_SINGLE() {
        return CURL_LOCK_ACCESS_SINGLE;
    }
    private static final int CURL_LOCK_ACCESS_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURL_LOCK_ACCESS_LAST = 3
     * }
     */
    public static int CURL_LOCK_ACCESS_LAST() {
        return CURL_LOCK_ACCESS_LAST;
    }
    private static final int CURLSHE_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHE_OK = 0
     * }
     */
    public static int CURLSHE_OK() {
        return CURLSHE_OK;
    }
    private static final int CURLSHE_BAD_OPTION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHE_BAD_OPTION = 1
     * }
     */
    public static int CURLSHE_BAD_OPTION() {
        return CURLSHE_BAD_OPTION;
    }
    private static final int CURLSHE_IN_USE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHE_IN_USE = 2
     * }
     */
    public static int CURLSHE_IN_USE() {
        return CURLSHE_IN_USE;
    }
    private static final int CURLSHE_INVALID = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHE_INVALID = 3
     * }
     */
    public static int CURLSHE_INVALID() {
        return CURLSHE_INVALID;
    }
    private static final int CURLSHE_NOMEM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHE_NOMEM = 4
     * }
     */
    public static int CURLSHE_NOMEM() {
        return CURLSHE_NOMEM;
    }
    private static final int CURLSHE_NOT_BUILT_IN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHE_NOT_BUILT_IN = 5
     * }
     */
    public static int CURLSHE_NOT_BUILT_IN() {
        return CURLSHE_NOT_BUILT_IN;
    }
    private static final int CURLSHE_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHE_LAST = 6
     * }
     */
    public static int CURLSHE_LAST() {
        return CURLSHE_LAST;
    }
    private static final int CURLSHOPT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHOPT_NONE = 0
     * }
     */
    public static int CURLSHOPT_NONE() {
        return CURLSHOPT_NONE;
    }
    private static final int CURLSHOPT_SHARE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHOPT_SHARE = 1
     * }
     */
    public static int CURLSHOPT_SHARE() {
        return CURLSHOPT_SHARE;
    }
    private static final int CURLSHOPT_UNSHARE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHOPT_UNSHARE = 2
     * }
     */
    public static int CURLSHOPT_UNSHARE() {
        return CURLSHOPT_UNSHARE;
    }
    private static final int CURLSHOPT_LOCKFUNC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHOPT_LOCKFUNC = 3
     * }
     */
    public static int CURLSHOPT_LOCKFUNC() {
        return CURLSHOPT_LOCKFUNC;
    }
    private static final int CURLSHOPT_UNLOCKFUNC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHOPT_UNLOCKFUNC = 4
     * }
     */
    public static int CURLSHOPT_UNLOCKFUNC() {
        return CURLSHOPT_UNLOCKFUNC;
    }
    private static final int CURLSHOPT_USERDATA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHOPT_USERDATA = 5
     * }
     */
    public static int CURLSHOPT_USERDATA() {
        return CURLSHOPT_USERDATA;
    }
    private static final int CURLSHOPT_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLSHOPT_LAST = 6
     * }
     */
    public static int CURLSHOPT_LAST() {
        return CURLSHOPT_LAST;
    }

    private static class curl_share_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER    );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_share_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLSH *curl_share_init()
     * }
     */
    public static FunctionDescriptor curl_share_init$descriptor() {
        return curl_share_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLSH *curl_share_init()
     * }
     */
    public static MethodHandle curl_share_init$handle() {
        return curl_share_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLSH *curl_share_init()
     * }
     */
    public static MemorySegment curl_share_init$address() {
        return curl_share_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLSH *curl_share_init()
     * }
     */
    public static MemorySegment curl_share_init() {
        var mh$ = curl_share_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_share_init");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CURLSHcode curl_share_setopt(CURLSH *share, CURLSHoption option, ...)
     * }
     */
    public static class curl_share_setopt {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER,
                curl_h.C_INT
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_share_setopt");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_share_setopt(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CURLSHcode curl_share_setopt(CURLSH *share, CURLSHoption option, ...)
         * }
         */
        public static curl_share_setopt makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_share_setopt(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment share, int option, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_share_setopt", share, option, x2);
                }
                return (int)spreader.invokeExact(share, option, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class curl_share_cleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_share_cleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLSHcode curl_share_cleanup(CURLSH *share)
     * }
     */
    public static FunctionDescriptor curl_share_cleanup$descriptor() {
        return curl_share_cleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLSHcode curl_share_cleanup(CURLSH *share)
     * }
     */
    public static MethodHandle curl_share_cleanup$handle() {
        return curl_share_cleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLSHcode curl_share_cleanup(CURLSH *share)
     * }
     */
    public static MemorySegment curl_share_cleanup$address() {
        return curl_share_cleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLSHcode curl_share_cleanup(CURLSH *share)
     * }
     */
    public static int curl_share_cleanup(MemorySegment share) {
        var mh$ = curl_share_cleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_share_cleanup", share);
            }
            return (int)mh$.invokeExact(share);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLVERSION_FIRST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_FIRST = 0
     * }
     */
    public static int CURLVERSION_FIRST() {
        return CURLVERSION_FIRST;
    }
    private static final int CURLVERSION_SECOND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_SECOND = 1
     * }
     */
    public static int CURLVERSION_SECOND() {
        return CURLVERSION_SECOND;
    }
    private static final int CURLVERSION_THIRD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_THIRD = 2
     * }
     */
    public static int CURLVERSION_THIRD() {
        return CURLVERSION_THIRD;
    }
    private static final int CURLVERSION_FOURTH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_FOURTH = 3
     * }
     */
    public static int CURLVERSION_FOURTH() {
        return CURLVERSION_FOURTH;
    }
    private static final int CURLVERSION_FIFTH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_FIFTH = 4
     * }
     */
    public static int CURLVERSION_FIFTH() {
        return CURLVERSION_FIFTH;
    }
    private static final int CURLVERSION_SIXTH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_SIXTH = 5
     * }
     */
    public static int CURLVERSION_SIXTH() {
        return CURLVERSION_SIXTH;
    }
    private static final int CURLVERSION_SEVENTH = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_SEVENTH = 6
     * }
     */
    public static int CURLVERSION_SEVENTH() {
        return CURLVERSION_SEVENTH;
    }
    private static final int CURLVERSION_EIGHTH = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_EIGHTH = 7
     * }
     */
    public static int CURLVERSION_EIGHTH() {
        return CURLVERSION_EIGHTH;
    }
    private static final int CURLVERSION_NINTH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_NINTH = 8
     * }
     */
    public static int CURLVERSION_NINTH() {
        return CURLVERSION_NINTH;
    }
    private static final int CURLVERSION_TENTH = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_TENTH = 9
     * }
     */
    public static int CURLVERSION_TENTH() {
        return CURLVERSION_TENTH;
    }
    private static final int CURLVERSION_ELEVENTH = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_ELEVENTH = 10
     * }
     */
    public static int CURLVERSION_ELEVENTH() {
        return CURLVERSION_ELEVENTH;
    }
    private static final int CURLVERSION_TWELFTH = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_TWELFTH = 11
     * }
     */
    public static int CURLVERSION_TWELFTH() {
        return CURLVERSION_TWELFTH;
    }
    private static final int CURLVERSION_LAST = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLVERSION_LAST = 12
     * }
     */
    public static int CURLVERSION_LAST() {
        return CURLVERSION_LAST;
    }

    private static class curl_version_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_version_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * curl_version_info_data *curl_version_info(CURLversion)
     * }
     */
    public static FunctionDescriptor curl_version_info$descriptor() {
        return curl_version_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * curl_version_info_data *curl_version_info(CURLversion)
     * }
     */
    public static MethodHandle curl_version_info$handle() {
        return curl_version_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * curl_version_info_data *curl_version_info(CURLversion)
     * }
     */
    public static MemorySegment curl_version_info$address() {
        return curl_version_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * curl_version_info_data *curl_version_info(CURLversion)
     * }
     */
    public static MemorySegment curl_version_info(int x0) {
        var mh$ = curl_version_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_version_info", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_strerror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *curl_easy_strerror(CURLcode)
     * }
     */
    public static FunctionDescriptor curl_easy_strerror$descriptor() {
        return curl_easy_strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *curl_easy_strerror(CURLcode)
     * }
     */
    public static MethodHandle curl_easy_strerror$handle() {
        return curl_easy_strerror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *curl_easy_strerror(CURLcode)
     * }
     */
    public static MemorySegment curl_easy_strerror$address() {
        return curl_easy_strerror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *curl_easy_strerror(CURLcode)
     * }
     */
    public static MemorySegment curl_easy_strerror(int x0) {
        var mh$ = curl_easy_strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_strerror", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_share_strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_share_strerror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *curl_share_strerror(CURLSHcode)
     * }
     */
    public static FunctionDescriptor curl_share_strerror$descriptor() {
        return curl_share_strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *curl_share_strerror(CURLSHcode)
     * }
     */
    public static MethodHandle curl_share_strerror$handle() {
        return curl_share_strerror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *curl_share_strerror(CURLSHcode)
     * }
     */
    public static MemorySegment curl_share_strerror$address() {
        return curl_share_strerror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *curl_share_strerror(CURLSHcode)
     * }
     */
    public static MemorySegment curl_share_strerror(int x0) {
        var mh$ = curl_share_strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_share_strerror", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_pause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_pause");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_easy_pause(CURL *handle, int bitmask)
     * }
     */
    public static FunctionDescriptor curl_easy_pause$descriptor() {
        return curl_easy_pause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_easy_pause(CURL *handle, int bitmask)
     * }
     */
    public static MethodHandle curl_easy_pause$handle() {
        return curl_easy_pause.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_easy_pause(CURL *handle, int bitmask)
     * }
     */
    public static MemorySegment curl_easy_pause$address() {
        return curl_easy_pause.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_easy_pause(CURL *handle, int bitmask)
     * }
     */
    public static int curl_easy_pause(MemorySegment handle, int bitmask) {
        var mh$ = curl_easy_pause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_pause", handle, bitmask);
            }
            return (int)mh$.invokeExact(handle, bitmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER    );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURL *curl_easy_init()
     * }
     */
    public static FunctionDescriptor curl_easy_init$descriptor() {
        return curl_easy_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURL *curl_easy_init()
     * }
     */
    public static MethodHandle curl_easy_init$handle() {
        return curl_easy_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURL *curl_easy_init()
     * }
     */
    public static MemorySegment curl_easy_init$address() {
        return curl_easy_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURL *curl_easy_init()
     * }
     */
    public static MemorySegment curl_easy_init() {
        var mh$ = curl_easy_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_init");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...)
     * }
     */
    public static class curl_easy_setopt {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER,
                curl_h.C_INT
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_setopt");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_easy_setopt(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...)
         * }
         */
        public static curl_easy_setopt makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_easy_setopt(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment curl, int option, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_easy_setopt", curl, option, x2);
                }
                return (int)spreader.invokeExact(curl, option, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class curl_easy_perform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_perform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_easy_perform(CURL *curl)
     * }
     */
    public static FunctionDescriptor curl_easy_perform$descriptor() {
        return curl_easy_perform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_easy_perform(CURL *curl)
     * }
     */
    public static MethodHandle curl_easy_perform$handle() {
        return curl_easy_perform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_easy_perform(CURL *curl)
     * }
     */
    public static MemorySegment curl_easy_perform$address() {
        return curl_easy_perform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_easy_perform(CURL *curl)
     * }
     */
    public static int curl_easy_perform(MemorySegment curl) {
        var mh$ = curl_easy_perform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_perform", curl);
            }
            return (int)mh$.invokeExact(curl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_cleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_cleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void curl_easy_cleanup(CURL *curl)
     * }
     */
    public static FunctionDescriptor curl_easy_cleanup$descriptor() {
        return curl_easy_cleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void curl_easy_cleanup(CURL *curl)
     * }
     */
    public static MethodHandle curl_easy_cleanup$handle() {
        return curl_easy_cleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void curl_easy_cleanup(CURL *curl)
     * }
     */
    public static MemorySegment curl_easy_cleanup$address() {
        return curl_easy_cleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void curl_easy_cleanup(CURL *curl)
     * }
     */
    public static void curl_easy_cleanup(MemorySegment curl) {
        var mh$ = curl_easy_cleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_cleanup", curl);
            }
            mh$.invokeExact(curl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...)
     * }
     */
    public static class curl_easy_getinfo {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER,
                curl_h.C_INT
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_getinfo");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_easy_getinfo(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...)
         * }
         */
        public static curl_easy_getinfo makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_easy_getinfo(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment curl, int info, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_easy_getinfo", curl, info, x2);
                }
                return (int)spreader.invokeExact(curl, info, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class curl_easy_duphandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_duphandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURL *curl_easy_duphandle(CURL *curl)
     * }
     */
    public static FunctionDescriptor curl_easy_duphandle$descriptor() {
        return curl_easy_duphandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURL *curl_easy_duphandle(CURL *curl)
     * }
     */
    public static MethodHandle curl_easy_duphandle$handle() {
        return curl_easy_duphandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURL *curl_easy_duphandle(CURL *curl)
     * }
     */
    public static MemorySegment curl_easy_duphandle$address() {
        return curl_easy_duphandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURL *curl_easy_duphandle(CURL *curl)
     * }
     */
    public static MemorySegment curl_easy_duphandle(MemorySegment curl) {
        var mh$ = curl_easy_duphandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_duphandle", curl);
            }
            return (MemorySegment)mh$.invokeExact(curl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void curl_easy_reset(CURL *curl)
     * }
     */
    public static FunctionDescriptor curl_easy_reset$descriptor() {
        return curl_easy_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void curl_easy_reset(CURL *curl)
     * }
     */
    public static MethodHandle curl_easy_reset$handle() {
        return curl_easy_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void curl_easy_reset(CURL *curl)
     * }
     */
    public static MemorySegment curl_easy_reset$address() {
        return curl_easy_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void curl_easy_reset(CURL *curl)
     * }
     */
    public static void curl_easy_reset(MemorySegment curl) {
        var mh$ = curl_easy_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_reset", curl);
            }
            mh$.invokeExact(curl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_recv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_LONG,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_recv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_easy_recv(CURL *curl, void *buffer, size_t buflen, size_t *n)
     * }
     */
    public static FunctionDescriptor curl_easy_recv$descriptor() {
        return curl_easy_recv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_easy_recv(CURL *curl, void *buffer, size_t buflen, size_t *n)
     * }
     */
    public static MethodHandle curl_easy_recv$handle() {
        return curl_easy_recv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_easy_recv(CURL *curl, void *buffer, size_t buflen, size_t *n)
     * }
     */
    public static MemorySegment curl_easy_recv$address() {
        return curl_easy_recv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_easy_recv(CURL *curl, void *buffer, size_t buflen, size_t *n)
     * }
     */
    public static int curl_easy_recv(MemorySegment curl, MemorySegment buffer, long buflen, MemorySegment n) {
        var mh$ = curl_easy_recv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_recv", curl, buffer, buflen, n);
            }
            return (int)mh$.invokeExact(curl, buffer, buflen, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_send {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_LONG,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_send");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_easy_send(CURL *curl, const void *buffer, size_t buflen, size_t *n)
     * }
     */
    public static FunctionDescriptor curl_easy_send$descriptor() {
        return curl_easy_send.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_easy_send(CURL *curl, const void *buffer, size_t buflen, size_t *n)
     * }
     */
    public static MethodHandle curl_easy_send$handle() {
        return curl_easy_send.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_easy_send(CURL *curl, const void *buffer, size_t buflen, size_t *n)
     * }
     */
    public static MemorySegment curl_easy_send$address() {
        return curl_easy_send.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_easy_send(CURL *curl, const void *buffer, size_t buflen, size_t *n)
     * }
     */
    public static int curl_easy_send(MemorySegment curl, MemorySegment buffer, long buflen, MemorySegment n) {
        var mh$ = curl_easy_send.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_send", curl, buffer, buflen, n);
            }
            return (int)mh$.invokeExact(curl, buffer, buflen, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_upkeep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_upkeep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_easy_upkeep(CURL *curl)
     * }
     */
    public static FunctionDescriptor curl_easy_upkeep$descriptor() {
        return curl_easy_upkeep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_easy_upkeep(CURL *curl)
     * }
     */
    public static MethodHandle curl_easy_upkeep$handle() {
        return curl_easy_upkeep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_easy_upkeep(CURL *curl)
     * }
     */
    public static MemorySegment curl_easy_upkeep$address() {
        return curl_easy_upkeep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_easy_upkeep(CURL *curl)
     * }
     */
    public static int curl_easy_upkeep(MemorySegment curl) {
        var mh$ = curl_easy_upkeep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_upkeep", curl);
            }
            return (int)mh$.invokeExact(curl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLM_CALL_MULTI_PERFORM = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_CALL_MULTI_PERFORM = -1
     * }
     */
    public static int CURLM_CALL_MULTI_PERFORM() {
        return CURLM_CALL_MULTI_PERFORM;
    }
    private static final int CURLM_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_OK = 0
     * }
     */
    public static int CURLM_OK() {
        return CURLM_OK;
    }
    private static final int CURLM_BAD_HANDLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_BAD_HANDLE = 1
     * }
     */
    public static int CURLM_BAD_HANDLE() {
        return CURLM_BAD_HANDLE;
    }
    private static final int CURLM_BAD_EASY_HANDLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_BAD_EASY_HANDLE = 2
     * }
     */
    public static int CURLM_BAD_EASY_HANDLE() {
        return CURLM_BAD_EASY_HANDLE;
    }
    private static final int CURLM_OUT_OF_MEMORY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_OUT_OF_MEMORY = 3
     * }
     */
    public static int CURLM_OUT_OF_MEMORY() {
        return CURLM_OUT_OF_MEMORY;
    }
    private static final int CURLM_INTERNAL_ERROR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_INTERNAL_ERROR = 4
     * }
     */
    public static int CURLM_INTERNAL_ERROR() {
        return CURLM_INTERNAL_ERROR;
    }
    private static final int CURLM_BAD_SOCKET = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_BAD_SOCKET = 5
     * }
     */
    public static int CURLM_BAD_SOCKET() {
        return CURLM_BAD_SOCKET;
    }
    private static final int CURLM_UNKNOWN_OPTION = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_UNKNOWN_OPTION = 6
     * }
     */
    public static int CURLM_UNKNOWN_OPTION() {
        return CURLM_UNKNOWN_OPTION;
    }
    private static final int CURLM_ADDED_ALREADY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_ADDED_ALREADY = 7
     * }
     */
    public static int CURLM_ADDED_ALREADY() {
        return CURLM_ADDED_ALREADY;
    }
    private static final int CURLM_RECURSIVE_API_CALL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_RECURSIVE_API_CALL = 8
     * }
     */
    public static int CURLM_RECURSIVE_API_CALL() {
        return CURLM_RECURSIVE_API_CALL;
    }
    private static final int CURLM_WAKEUP_FAILURE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_WAKEUP_FAILURE = 9
     * }
     */
    public static int CURLM_WAKEUP_FAILURE() {
        return CURLM_WAKEUP_FAILURE;
    }
    private static final int CURLM_BAD_FUNCTION_ARGUMENT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_BAD_FUNCTION_ARGUMENT = 10
     * }
     */
    public static int CURLM_BAD_FUNCTION_ARGUMENT() {
        return CURLM_BAD_FUNCTION_ARGUMENT;
    }
    private static final int CURLM_ABORTED_BY_CALLBACK = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_ABORTED_BY_CALLBACK = 11
     * }
     */
    public static int CURLM_ABORTED_BY_CALLBACK() {
        return CURLM_ABORTED_BY_CALLBACK;
    }
    private static final int CURLM_UNRECOVERABLE_POLL = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_UNRECOVERABLE_POLL = 12
     * }
     */
    public static int CURLM_UNRECOVERABLE_POLL() {
        return CURLM_UNRECOVERABLE_POLL;
    }
    private static final int CURLM_LAST = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLM_LAST = 13
     * }
     */
    public static int CURLM_LAST() {
        return CURLM_LAST;
    }
    private static final int CURLMSG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMSG_NONE = 0
     * }
     */
    public static int CURLMSG_NONE() {
        return CURLMSG_NONE;
    }
    private static final int CURLMSG_DONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMSG_DONE = 1
     * }
     */
    public static int CURLMSG_DONE() {
        return CURLMSG_DONE;
    }
    private static final int CURLMSG_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMSG_LAST = 2
     * }
     */
    public static int CURLMSG_LAST() {
        return CURLMSG_LAST;
    }

    private static class curl_multi_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER    );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLM *curl_multi_init()
     * }
     */
    public static FunctionDescriptor curl_multi_init$descriptor() {
        return curl_multi_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLM *curl_multi_init()
     * }
     */
    public static MethodHandle curl_multi_init$handle() {
        return curl_multi_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLM *curl_multi_init()
     * }
     */
    public static MemorySegment curl_multi_init$address() {
        return curl_multi_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLM *curl_multi_init()
     * }
     */
    public static MemorySegment curl_multi_init() {
        var mh$ = curl_multi_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_init");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_add_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_add_handle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_add_handle(CURLM *multi_handle, CURL *curl_handle)
     * }
     */
    public static FunctionDescriptor curl_multi_add_handle$descriptor() {
        return curl_multi_add_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_add_handle(CURLM *multi_handle, CURL *curl_handle)
     * }
     */
    public static MethodHandle curl_multi_add_handle$handle() {
        return curl_multi_add_handle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_add_handle(CURLM *multi_handle, CURL *curl_handle)
     * }
     */
    public static MemorySegment curl_multi_add_handle$address() {
        return curl_multi_add_handle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_add_handle(CURLM *multi_handle, CURL *curl_handle)
     * }
     */
    public static int curl_multi_add_handle(MemorySegment multi_handle, MemorySegment curl_handle) {
        var mh$ = curl_multi_add_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_add_handle", multi_handle, curl_handle);
            }
            return (int)mh$.invokeExact(multi_handle, curl_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_remove_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_remove_handle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_remove_handle(CURLM *multi_handle, CURL *curl_handle)
     * }
     */
    public static FunctionDescriptor curl_multi_remove_handle$descriptor() {
        return curl_multi_remove_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_remove_handle(CURLM *multi_handle, CURL *curl_handle)
     * }
     */
    public static MethodHandle curl_multi_remove_handle$handle() {
        return curl_multi_remove_handle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_remove_handle(CURLM *multi_handle, CURL *curl_handle)
     * }
     */
    public static MemorySegment curl_multi_remove_handle$address() {
        return curl_multi_remove_handle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_remove_handle(CURLM *multi_handle, CURL *curl_handle)
     * }
     */
    public static int curl_multi_remove_handle(MemorySegment multi_handle, MemorySegment curl_handle) {
        var mh$ = curl_multi_remove_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_remove_handle", multi_handle, curl_handle);
            }
            return (int)mh$.invokeExact(multi_handle, curl_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_fdset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_fdset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_fdset(CURLM *multi_handle, fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set, int *max_fd)
     * }
     */
    public static FunctionDescriptor curl_multi_fdset$descriptor() {
        return curl_multi_fdset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_fdset(CURLM *multi_handle, fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set, int *max_fd)
     * }
     */
    public static MethodHandle curl_multi_fdset$handle() {
        return curl_multi_fdset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_fdset(CURLM *multi_handle, fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set, int *max_fd)
     * }
     */
    public static MemorySegment curl_multi_fdset$address() {
        return curl_multi_fdset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_fdset(CURLM *multi_handle, fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set, int *max_fd)
     * }
     */
    public static int curl_multi_fdset(MemorySegment multi_handle, MemorySegment read_fd_set, MemorySegment write_fd_set, MemorySegment exc_fd_set, MemorySegment max_fd) {
        var mh$ = curl_multi_fdset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_fdset", multi_handle, read_fd_set, write_fd_set, exc_fd_set, max_fd);
            }
            return (int)mh$.invokeExact(multi_handle, read_fd_set, write_fd_set, exc_fd_set, max_fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_wait");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_wait(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)
     * }
     */
    public static FunctionDescriptor curl_multi_wait$descriptor() {
        return curl_multi_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_wait(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)
     * }
     */
    public static MethodHandle curl_multi_wait$handle() {
        return curl_multi_wait.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_wait(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)
     * }
     */
    public static MemorySegment curl_multi_wait$address() {
        return curl_multi_wait.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_wait(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)
     * }
     */
    public static int curl_multi_wait(MemorySegment multi_handle, MemorySegment extra_fds, int extra_nfds, int timeout_ms, MemorySegment ret) {
        var mh$ = curl_multi_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_wait", multi_handle, extra_fds, extra_nfds, timeout_ms, ret);
            }
            return (int)mh$.invokeExact(multi_handle, extra_fds, extra_nfds, timeout_ms, ret);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_poll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_poll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_poll(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)
     * }
     */
    public static FunctionDescriptor curl_multi_poll$descriptor() {
        return curl_multi_poll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_poll(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)
     * }
     */
    public static MethodHandle curl_multi_poll$handle() {
        return curl_multi_poll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_poll(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)
     * }
     */
    public static MemorySegment curl_multi_poll$address() {
        return curl_multi_poll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_poll(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)
     * }
     */
    public static int curl_multi_poll(MemorySegment multi_handle, MemorySegment extra_fds, int extra_nfds, int timeout_ms, MemorySegment ret) {
        var mh$ = curl_multi_poll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_poll", multi_handle, extra_fds, extra_nfds, timeout_ms, ret);
            }
            return (int)mh$.invokeExact(multi_handle, extra_fds, extra_nfds, timeout_ms, ret);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_wakeup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_wakeup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_wakeup(CURLM *multi_handle)
     * }
     */
    public static FunctionDescriptor curl_multi_wakeup$descriptor() {
        return curl_multi_wakeup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_wakeup(CURLM *multi_handle)
     * }
     */
    public static MethodHandle curl_multi_wakeup$handle() {
        return curl_multi_wakeup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_wakeup(CURLM *multi_handle)
     * }
     */
    public static MemorySegment curl_multi_wakeup$address() {
        return curl_multi_wakeup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_wakeup(CURLM *multi_handle)
     * }
     */
    public static int curl_multi_wakeup(MemorySegment multi_handle) {
        var mh$ = curl_multi_wakeup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_wakeup", multi_handle);
            }
            return (int)mh$.invokeExact(multi_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_perform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_perform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_perform(CURLM *multi_handle, int *running_handles)
     * }
     */
    public static FunctionDescriptor curl_multi_perform$descriptor() {
        return curl_multi_perform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_perform(CURLM *multi_handle, int *running_handles)
     * }
     */
    public static MethodHandle curl_multi_perform$handle() {
        return curl_multi_perform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_perform(CURLM *multi_handle, int *running_handles)
     * }
     */
    public static MemorySegment curl_multi_perform$address() {
        return curl_multi_perform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_perform(CURLM *multi_handle, int *running_handles)
     * }
     */
    public static int curl_multi_perform(MemorySegment multi_handle, MemorySegment running_handles) {
        var mh$ = curl_multi_perform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_perform", multi_handle, running_handles);
            }
            return (int)mh$.invokeExact(multi_handle, running_handles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_cleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_cleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_cleanup(CURLM *multi_handle)
     * }
     */
    public static FunctionDescriptor curl_multi_cleanup$descriptor() {
        return curl_multi_cleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_cleanup(CURLM *multi_handle)
     * }
     */
    public static MethodHandle curl_multi_cleanup$handle() {
        return curl_multi_cleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_cleanup(CURLM *multi_handle)
     * }
     */
    public static MemorySegment curl_multi_cleanup$address() {
        return curl_multi_cleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_cleanup(CURLM *multi_handle)
     * }
     */
    public static int curl_multi_cleanup(MemorySegment multi_handle) {
        var mh$ = curl_multi_cleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_cleanup", multi_handle);
            }
            return (int)mh$.invokeExact(multi_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_info_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_info_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMsg *curl_multi_info_read(CURLM *multi_handle, int *msgs_in_queue)
     * }
     */
    public static FunctionDescriptor curl_multi_info_read$descriptor() {
        return curl_multi_info_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMsg *curl_multi_info_read(CURLM *multi_handle, int *msgs_in_queue)
     * }
     */
    public static MethodHandle curl_multi_info_read$handle() {
        return curl_multi_info_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMsg *curl_multi_info_read(CURLM *multi_handle, int *msgs_in_queue)
     * }
     */
    public static MemorySegment curl_multi_info_read$address() {
        return curl_multi_info_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMsg *curl_multi_info_read(CURLM *multi_handle, int *msgs_in_queue)
     * }
     */
    public static MemorySegment curl_multi_info_read(MemorySegment multi_handle, MemorySegment msgs_in_queue) {
        var mh$ = curl_multi_info_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_info_read", multi_handle, msgs_in_queue);
            }
            return (MemorySegment)mh$.invokeExact(multi_handle, msgs_in_queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_strerror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *curl_multi_strerror(CURLMcode)
     * }
     */
    public static FunctionDescriptor curl_multi_strerror$descriptor() {
        return curl_multi_strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *curl_multi_strerror(CURLMcode)
     * }
     */
    public static MethodHandle curl_multi_strerror$handle() {
        return curl_multi_strerror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *curl_multi_strerror(CURLMcode)
     * }
     */
    public static MemorySegment curl_multi_strerror$address() {
        return curl_multi_strerror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *curl_multi_strerror(CURLMcode)
     * }
     */
    public static MemorySegment curl_multi_strerror(int x0) {
        var mh$ = curl_multi_strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_strerror", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_socket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_socket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket(CURLM *multi_handle, curl_socket_t s, int *running_handles)
     * }
     */
    public static FunctionDescriptor curl_multi_socket$descriptor() {
        return curl_multi_socket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket(CURLM *multi_handle, curl_socket_t s, int *running_handles)
     * }
     */
    public static MethodHandle curl_multi_socket$handle() {
        return curl_multi_socket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket(CURLM *multi_handle, curl_socket_t s, int *running_handles)
     * }
     */
    public static MemorySegment curl_multi_socket$address() {
        return curl_multi_socket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket(CURLM *multi_handle, curl_socket_t s, int *running_handles)
     * }
     */
    public static int curl_multi_socket(MemorySegment multi_handle, int s, MemorySegment running_handles) {
        var mh$ = curl_multi_socket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_socket", multi_handle, s, running_handles);
            }
            return (int)mh$.invokeExact(multi_handle, s, running_handles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_socket_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_socket_action");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket_action(CURLM *multi_handle, curl_socket_t s, int ev_bitmask, int *running_handles)
     * }
     */
    public static FunctionDescriptor curl_multi_socket_action$descriptor() {
        return curl_multi_socket_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket_action(CURLM *multi_handle, curl_socket_t s, int ev_bitmask, int *running_handles)
     * }
     */
    public static MethodHandle curl_multi_socket_action$handle() {
        return curl_multi_socket_action.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket_action(CURLM *multi_handle, curl_socket_t s, int ev_bitmask, int *running_handles)
     * }
     */
    public static MemorySegment curl_multi_socket_action$address() {
        return curl_multi_socket_action.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket_action(CURLM *multi_handle, curl_socket_t s, int ev_bitmask, int *running_handles)
     * }
     */
    public static int curl_multi_socket_action(MemorySegment multi_handle, int s, int ev_bitmask, MemorySegment running_handles) {
        var mh$ = curl_multi_socket_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_socket_action", multi_handle, s, ev_bitmask, running_handles);
            }
            return (int)mh$.invokeExact(multi_handle, s, ev_bitmask, running_handles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_socket_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_socket_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket_all(CURLM *multi_handle, int *running_handles)
     * }
     */
    public static FunctionDescriptor curl_multi_socket_all$descriptor() {
        return curl_multi_socket_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket_all(CURLM *multi_handle, int *running_handles)
     * }
     */
    public static MethodHandle curl_multi_socket_all$handle() {
        return curl_multi_socket_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket_all(CURLM *multi_handle, int *running_handles)
     * }
     */
    public static MemorySegment curl_multi_socket_all$address() {
        return curl_multi_socket_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_socket_all(CURLM *multi_handle, int *running_handles)
     * }
     */
    public static int curl_multi_socket_all(MemorySegment multi_handle, MemorySegment running_handles) {
        var mh$ = curl_multi_socket_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_socket_all", multi_handle, running_handles);
            }
            return (int)mh$.invokeExact(multi_handle, running_handles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_timeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_timeout(CURLM *multi_handle, long *milliseconds)
     * }
     */
    public static FunctionDescriptor curl_multi_timeout$descriptor() {
        return curl_multi_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_timeout(CURLM *multi_handle, long *milliseconds)
     * }
     */
    public static MethodHandle curl_multi_timeout$handle() {
        return curl_multi_timeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_timeout(CURLM *multi_handle, long *milliseconds)
     * }
     */
    public static MemorySegment curl_multi_timeout$address() {
        return curl_multi_timeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_timeout(CURLM *multi_handle, long *milliseconds)
     * }
     */
    public static int curl_multi_timeout(MemorySegment multi_handle, MemorySegment milliseconds) {
        var mh$ = curl_multi_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_timeout", multi_handle, milliseconds);
            }
            return (int)mh$.invokeExact(multi_handle, milliseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLMOPT_SOCKETFUNCTION = (int)20001L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_SOCKETFUNCTION = 20001
     * }
     */
    public static int CURLMOPT_SOCKETFUNCTION() {
        return CURLMOPT_SOCKETFUNCTION;
    }
    private static final int CURLMOPT_SOCKETDATA = (int)10002L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_SOCKETDATA = 10002
     * }
     */
    public static int CURLMOPT_SOCKETDATA() {
        return CURLMOPT_SOCKETDATA;
    }
    private static final int CURLMOPT_PIPELINING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_PIPELINING = 3
     * }
     */
    public static int CURLMOPT_PIPELINING() {
        return CURLMOPT_PIPELINING;
    }
    private static final int CURLMOPT_TIMERFUNCTION = (int)20004L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_TIMERFUNCTION = 20004
     * }
     */
    public static int CURLMOPT_TIMERFUNCTION() {
        return CURLMOPT_TIMERFUNCTION;
    }
    private static final int CURLMOPT_TIMERDATA = (int)10005L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_TIMERDATA = 10005
     * }
     */
    public static int CURLMOPT_TIMERDATA() {
        return CURLMOPT_TIMERDATA;
    }
    private static final int CURLMOPT_MAXCONNECTS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_MAXCONNECTS = 6
     * }
     */
    public static int CURLMOPT_MAXCONNECTS() {
        return CURLMOPT_MAXCONNECTS;
    }
    private static final int CURLMOPT_MAX_HOST_CONNECTIONS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_MAX_HOST_CONNECTIONS = 7
     * }
     */
    public static int CURLMOPT_MAX_HOST_CONNECTIONS() {
        return CURLMOPT_MAX_HOST_CONNECTIONS;
    }
    private static final int CURLMOPT_MAX_PIPELINE_LENGTH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_MAX_PIPELINE_LENGTH = 8
     * }
     */
    public static int CURLMOPT_MAX_PIPELINE_LENGTH() {
        return CURLMOPT_MAX_PIPELINE_LENGTH;
    }
    private static final int CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE = (int)30009L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE = 30009
     * }
     */
    public static int CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE() {
        return CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE;
    }
    private static final int CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE = (int)30010L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE = 30010
     * }
     */
    public static int CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE() {
        return CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE;
    }
    private static final int CURLMOPT_PIPELINING_SITE_BL = (int)10011L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_PIPELINING_SITE_BL = 10011
     * }
     */
    public static int CURLMOPT_PIPELINING_SITE_BL() {
        return CURLMOPT_PIPELINING_SITE_BL;
    }
    private static final int CURLMOPT_PIPELINING_SERVER_BL = (int)10012L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_PIPELINING_SERVER_BL = 10012
     * }
     */
    public static int CURLMOPT_PIPELINING_SERVER_BL() {
        return CURLMOPT_PIPELINING_SERVER_BL;
    }
    private static final int CURLMOPT_MAX_TOTAL_CONNECTIONS = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_MAX_TOTAL_CONNECTIONS = 13
     * }
     */
    public static int CURLMOPT_MAX_TOTAL_CONNECTIONS() {
        return CURLMOPT_MAX_TOTAL_CONNECTIONS;
    }
    private static final int CURLMOPT_PUSHFUNCTION = (int)20014L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_PUSHFUNCTION = 20014
     * }
     */
    public static int CURLMOPT_PUSHFUNCTION() {
        return CURLMOPT_PUSHFUNCTION;
    }
    private static final int CURLMOPT_PUSHDATA = (int)10015L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_PUSHDATA = 10015
     * }
     */
    public static int CURLMOPT_PUSHDATA() {
        return CURLMOPT_PUSHDATA;
    }
    private static final int CURLMOPT_MAX_CONCURRENT_STREAMS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_MAX_CONCURRENT_STREAMS = 16
     * }
     */
    public static int CURLMOPT_MAX_CONCURRENT_STREAMS() {
        return CURLMOPT_MAX_CONCURRENT_STREAMS;
    }
    private static final int CURLMOPT_LASTENTRY = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLMOPT_LASTENTRY = 17
     * }
     */
    public static int CURLMOPT_LASTENTRY() {
        return CURLMOPT_LASTENTRY;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_setopt(CURLM *multi_handle, CURLMoption option, ...)
     * }
     */
    public static class curl_multi_setopt {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER,
                curl_h.C_INT
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_setopt");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_multi_setopt(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CURLMcode curl_multi_setopt(CURLM *multi_handle, CURLMoption option, ...)
         * }
         */
        public static curl_multi_setopt makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_multi_setopt(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment multi_handle, int option, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_multi_setopt", multi_handle, option, x2);
                }
                return (int)spreader.invokeExact(multi_handle, option, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class curl_multi_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_assign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_assign(CURLM *multi_handle, curl_socket_t sockfd, void *sockp)
     * }
     */
    public static FunctionDescriptor curl_multi_assign$descriptor() {
        return curl_multi_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_assign(CURLM *multi_handle, curl_socket_t sockfd, void *sockp)
     * }
     */
    public static MethodHandle curl_multi_assign$handle() {
        return curl_multi_assign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_assign(CURLM *multi_handle, curl_socket_t sockfd, void *sockp)
     * }
     */
    public static MemorySegment curl_multi_assign$address() {
        return curl_multi_assign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_assign(CURLM *multi_handle, curl_socket_t sockfd, void *sockp)
     * }
     */
    public static int curl_multi_assign(MemorySegment multi_handle, int sockfd, MemorySegment sockp) {
        var mh$ = curl_multi_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_assign", multi_handle, sockfd, sockp);
            }
            return (int)mh$.invokeExact(multi_handle, sockfd, sockp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_get_handles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_get_handles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURL **curl_multi_get_handles(CURLM *multi_handle)
     * }
     */
    public static FunctionDescriptor curl_multi_get_handles$descriptor() {
        return curl_multi_get_handles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURL **curl_multi_get_handles(CURLM *multi_handle)
     * }
     */
    public static MethodHandle curl_multi_get_handles$handle() {
        return curl_multi_get_handles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURL **curl_multi_get_handles(CURLM *multi_handle)
     * }
     */
    public static MemorySegment curl_multi_get_handles$address() {
        return curl_multi_get_handles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURL **curl_multi_get_handles(CURLM *multi_handle)
     * }
     */
    public static MemorySegment curl_multi_get_handles(MemorySegment multi_handle) {
        var mh$ = curl_multi_get_handles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_get_handles", multi_handle);
            }
            return (MemorySegment)mh$.invokeExact(multi_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_pushheader_bynum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_LONG
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_pushheader_bynum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_pushheader_bynum(struct curl_pushheaders *h, size_t num)
     * }
     */
    public static FunctionDescriptor curl_pushheader_bynum$descriptor() {
        return curl_pushheader_bynum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_pushheader_bynum(struct curl_pushheaders *h, size_t num)
     * }
     */
    public static MethodHandle curl_pushheader_bynum$handle() {
        return curl_pushheader_bynum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_pushheader_bynum(struct curl_pushheaders *h, size_t num)
     * }
     */
    public static MemorySegment curl_pushheader_bynum$address() {
        return curl_pushheader_bynum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_pushheader_bynum(struct curl_pushheaders *h, size_t num)
     * }
     */
    public static MemorySegment curl_pushheader_bynum(MemorySegment h, long num) {
        var mh$ = curl_pushheader_bynum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_pushheader_bynum", h, num);
            }
            return (MemorySegment)mh$.invokeExact(h, num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_pushheader_byname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_pushheader_byname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_pushheader_byname(struct curl_pushheaders *h, const char *name)
     * }
     */
    public static FunctionDescriptor curl_pushheader_byname$descriptor() {
        return curl_pushheader_byname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_pushheader_byname(struct curl_pushheaders *h, const char *name)
     * }
     */
    public static MethodHandle curl_pushheader_byname$handle() {
        return curl_pushheader_byname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_pushheader_byname(struct curl_pushheaders *h, const char *name)
     * }
     */
    public static MemorySegment curl_pushheader_byname$address() {
        return curl_pushheader_byname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_pushheader_byname(struct curl_pushheaders *h, const char *name)
     * }
     */
    public static MemorySegment curl_pushheader_byname(MemorySegment h, MemorySegment name) {
        var mh$ = curl_pushheader_byname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_pushheader_byname", h, name);
            }
            return (MemorySegment)mh$.invokeExact(h, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_multi_waitfds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_multi_waitfds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_waitfds(CURLM *multi, struct curl_waitfd *ufds, unsigned int size, unsigned int *fd_count)
     * }
     */
    public static FunctionDescriptor curl_multi_waitfds$descriptor() {
        return curl_multi_waitfds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_waitfds(CURLM *multi, struct curl_waitfd *ufds, unsigned int size, unsigned int *fd_count)
     * }
     */
    public static MethodHandle curl_multi_waitfds$handle() {
        return curl_multi_waitfds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLMcode curl_multi_waitfds(CURLM *multi, struct curl_waitfd *ufds, unsigned int size, unsigned int *fd_count)
     * }
     */
    public static MemorySegment curl_multi_waitfds$address() {
        return curl_multi_waitfds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLMcode curl_multi_waitfds(CURLM *multi, struct curl_waitfd *ufds, unsigned int size, unsigned int *fd_count)
     * }
     */
    public static int curl_multi_waitfds(MemorySegment multi, MemorySegment ufds, int size, MemorySegment fd_count) {
        var mh$ = curl_multi_waitfds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_multi_waitfds", multi, ufds, size, fd_count);
            }
            return (int)mh$.invokeExact(multi, ufds, size, fd_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLUE_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_OK = 0
     * }
     */
    public static int CURLUE_OK() {
        return CURLUE_OK;
    }
    private static final int CURLUE_BAD_HANDLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_HANDLE = 1
     * }
     */
    public static int CURLUE_BAD_HANDLE() {
        return CURLUE_BAD_HANDLE;
    }
    private static final int CURLUE_BAD_PARTPOINTER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_PARTPOINTER = 2
     * }
     */
    public static int CURLUE_BAD_PARTPOINTER() {
        return CURLUE_BAD_PARTPOINTER;
    }
    private static final int CURLUE_MALFORMED_INPUT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_MALFORMED_INPUT = 3
     * }
     */
    public static int CURLUE_MALFORMED_INPUT() {
        return CURLUE_MALFORMED_INPUT;
    }
    private static final int CURLUE_BAD_PORT_NUMBER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_PORT_NUMBER = 4
     * }
     */
    public static int CURLUE_BAD_PORT_NUMBER() {
        return CURLUE_BAD_PORT_NUMBER;
    }
    private static final int CURLUE_UNSUPPORTED_SCHEME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_UNSUPPORTED_SCHEME = 5
     * }
     */
    public static int CURLUE_UNSUPPORTED_SCHEME() {
        return CURLUE_UNSUPPORTED_SCHEME;
    }
    private static final int CURLUE_URLDECODE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_URLDECODE = 6
     * }
     */
    public static int CURLUE_URLDECODE() {
        return CURLUE_URLDECODE;
    }
    private static final int CURLUE_OUT_OF_MEMORY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_OUT_OF_MEMORY = 7
     * }
     */
    public static int CURLUE_OUT_OF_MEMORY() {
        return CURLUE_OUT_OF_MEMORY;
    }
    private static final int CURLUE_USER_NOT_ALLOWED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_USER_NOT_ALLOWED = 8
     * }
     */
    public static int CURLUE_USER_NOT_ALLOWED() {
        return CURLUE_USER_NOT_ALLOWED;
    }
    private static final int CURLUE_UNKNOWN_PART = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_UNKNOWN_PART = 9
     * }
     */
    public static int CURLUE_UNKNOWN_PART() {
        return CURLUE_UNKNOWN_PART;
    }
    private static final int CURLUE_NO_SCHEME = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_SCHEME = 10
     * }
     */
    public static int CURLUE_NO_SCHEME() {
        return CURLUE_NO_SCHEME;
    }
    private static final int CURLUE_NO_USER = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_USER = 11
     * }
     */
    public static int CURLUE_NO_USER() {
        return CURLUE_NO_USER;
    }
    private static final int CURLUE_NO_PASSWORD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_PASSWORD = 12
     * }
     */
    public static int CURLUE_NO_PASSWORD() {
        return CURLUE_NO_PASSWORD;
    }
    private static final int CURLUE_NO_OPTIONS = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_OPTIONS = 13
     * }
     */
    public static int CURLUE_NO_OPTIONS() {
        return CURLUE_NO_OPTIONS;
    }
    private static final int CURLUE_NO_HOST = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_HOST = 14
     * }
     */
    public static int CURLUE_NO_HOST() {
        return CURLUE_NO_HOST;
    }
    private static final int CURLUE_NO_PORT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_PORT = 15
     * }
     */
    public static int CURLUE_NO_PORT() {
        return CURLUE_NO_PORT;
    }
    private static final int CURLUE_NO_QUERY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_QUERY = 16
     * }
     */
    public static int CURLUE_NO_QUERY() {
        return CURLUE_NO_QUERY;
    }
    private static final int CURLUE_NO_FRAGMENT = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_FRAGMENT = 17
     * }
     */
    public static int CURLUE_NO_FRAGMENT() {
        return CURLUE_NO_FRAGMENT;
    }
    private static final int CURLUE_NO_ZONEID = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_NO_ZONEID = 18
     * }
     */
    public static int CURLUE_NO_ZONEID() {
        return CURLUE_NO_ZONEID;
    }
    private static final int CURLUE_BAD_FILE_URL = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_FILE_URL = 19
     * }
     */
    public static int CURLUE_BAD_FILE_URL() {
        return CURLUE_BAD_FILE_URL;
    }
    private static final int CURLUE_BAD_FRAGMENT = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_FRAGMENT = 20
     * }
     */
    public static int CURLUE_BAD_FRAGMENT() {
        return CURLUE_BAD_FRAGMENT;
    }
    private static final int CURLUE_BAD_HOSTNAME = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_HOSTNAME = 21
     * }
     */
    public static int CURLUE_BAD_HOSTNAME() {
        return CURLUE_BAD_HOSTNAME;
    }
    private static final int CURLUE_BAD_IPV6 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_IPV6 = 22
     * }
     */
    public static int CURLUE_BAD_IPV6() {
        return CURLUE_BAD_IPV6;
    }
    private static final int CURLUE_BAD_LOGIN = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_LOGIN = 23
     * }
     */
    public static int CURLUE_BAD_LOGIN() {
        return CURLUE_BAD_LOGIN;
    }
    private static final int CURLUE_BAD_PASSWORD = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_PASSWORD = 24
     * }
     */
    public static int CURLUE_BAD_PASSWORD() {
        return CURLUE_BAD_PASSWORD;
    }
    private static final int CURLUE_BAD_PATH = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_PATH = 25
     * }
     */
    public static int CURLUE_BAD_PATH() {
        return CURLUE_BAD_PATH;
    }
    private static final int CURLUE_BAD_QUERY = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_QUERY = 26
     * }
     */
    public static int CURLUE_BAD_QUERY() {
        return CURLUE_BAD_QUERY;
    }
    private static final int CURLUE_BAD_SCHEME = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_SCHEME = 27
     * }
     */
    public static int CURLUE_BAD_SCHEME() {
        return CURLUE_BAD_SCHEME;
    }
    private static final int CURLUE_BAD_SLASHES = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_SLASHES = 28
     * }
     */
    public static int CURLUE_BAD_SLASHES() {
        return CURLUE_BAD_SLASHES;
    }
    private static final int CURLUE_BAD_USER = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_BAD_USER = 29
     * }
     */
    public static int CURLUE_BAD_USER() {
        return CURLUE_BAD_USER;
    }
    private static final int CURLUE_LACKS_IDN = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_LACKS_IDN = 30
     * }
     */
    public static int CURLUE_LACKS_IDN() {
        return CURLUE_LACKS_IDN;
    }
    private static final int CURLUE_TOO_LARGE = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_TOO_LARGE = 31
     * }
     */
    public static int CURLUE_TOO_LARGE() {
        return CURLUE_TOO_LARGE;
    }
    private static final int CURLUE_LAST = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUE_LAST = 32
     * }
     */
    public static int CURLUE_LAST() {
        return CURLUE_LAST;
    }
    private static final int CURLUPART_URL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_URL = 0
     * }
     */
    public static int CURLUPART_URL() {
        return CURLUPART_URL;
    }
    private static final int CURLUPART_SCHEME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_SCHEME = 1
     * }
     */
    public static int CURLUPART_SCHEME() {
        return CURLUPART_SCHEME;
    }
    private static final int CURLUPART_USER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_USER = 2
     * }
     */
    public static int CURLUPART_USER() {
        return CURLUPART_USER;
    }
    private static final int CURLUPART_PASSWORD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_PASSWORD = 3
     * }
     */
    public static int CURLUPART_PASSWORD() {
        return CURLUPART_PASSWORD;
    }
    private static final int CURLUPART_OPTIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_OPTIONS = 4
     * }
     */
    public static int CURLUPART_OPTIONS() {
        return CURLUPART_OPTIONS;
    }
    private static final int CURLUPART_HOST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_HOST = 5
     * }
     */
    public static int CURLUPART_HOST() {
        return CURLUPART_HOST;
    }
    private static final int CURLUPART_PORT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_PORT = 6
     * }
     */
    public static int CURLUPART_PORT() {
        return CURLUPART_PORT;
    }
    private static final int CURLUPART_PATH = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_PATH = 7
     * }
     */
    public static int CURLUPART_PATH() {
        return CURLUPART_PATH;
    }
    private static final int CURLUPART_QUERY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_QUERY = 8
     * }
     */
    public static int CURLUPART_QUERY() {
        return CURLUPART_QUERY;
    }
    private static final int CURLUPART_FRAGMENT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_FRAGMENT = 9
     * }
     */
    public static int CURLUPART_FRAGMENT() {
        return CURLUPART_FRAGMENT;
    }
    private static final int CURLUPART_ZONEID = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLUPART_ZONEID = 10
     * }
     */
    public static int CURLUPART_ZONEID() {
        return CURLUPART_ZONEID;
    }

    private static class curl_url {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER    );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_url");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLU *curl_url()
     * }
     */
    public static FunctionDescriptor curl_url$descriptor() {
        return curl_url.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLU *curl_url()
     * }
     */
    public static MethodHandle curl_url$handle() {
        return curl_url.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLU *curl_url()
     * }
     */
    public static MemorySegment curl_url$address() {
        return curl_url.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLU *curl_url()
     * }
     */
    public static MemorySegment curl_url() {
        var mh$ = curl_url.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_url");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_url_cleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_url_cleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void curl_url_cleanup(CURLU *handle)
     * }
     */
    public static FunctionDescriptor curl_url_cleanup$descriptor() {
        return curl_url_cleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void curl_url_cleanup(CURLU *handle)
     * }
     */
    public static MethodHandle curl_url_cleanup$handle() {
        return curl_url_cleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void curl_url_cleanup(CURLU *handle)
     * }
     */
    public static MemorySegment curl_url_cleanup$address() {
        return curl_url_cleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void curl_url_cleanup(CURLU *handle)
     * }
     */
    public static void curl_url_cleanup(MemorySegment handle) {
        var mh$ = curl_url_cleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_url_cleanup", handle);
            }
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_url_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_url_dup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLU *curl_url_dup(const CURLU *in)
     * }
     */
    public static FunctionDescriptor curl_url_dup$descriptor() {
        return curl_url_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLU *curl_url_dup(const CURLU *in)
     * }
     */
    public static MethodHandle curl_url_dup$handle() {
        return curl_url_dup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLU *curl_url_dup(const CURLU *in)
     * }
     */
    public static MemorySegment curl_url_dup$address() {
        return curl_url_dup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLU *curl_url_dup(const CURLU *in)
     * }
     */
    public static MemorySegment curl_url_dup(MemorySegment in) {
        var mh$ = curl_url_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_url_dup", in);
            }
            return (MemorySegment)mh$.invokeExact(in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_url_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_url_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLUcode curl_url_get(const CURLU *handle, CURLUPart what, char **part, unsigned int flags)
     * }
     */
    public static FunctionDescriptor curl_url_get$descriptor() {
        return curl_url_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLUcode curl_url_get(const CURLU *handle, CURLUPart what, char **part, unsigned int flags)
     * }
     */
    public static MethodHandle curl_url_get$handle() {
        return curl_url_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLUcode curl_url_get(const CURLU *handle, CURLUPart what, char **part, unsigned int flags)
     * }
     */
    public static MemorySegment curl_url_get$address() {
        return curl_url_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLUcode curl_url_get(const CURLU *handle, CURLUPart what, char **part, unsigned int flags)
     * }
     */
    public static int curl_url_get(MemorySegment handle, int what, MemorySegment part, int flags) {
        var mh$ = curl_url_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_url_get", handle, what, part, flags);
            }
            return (int)mh$.invokeExact(handle, what, part, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_url_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_url_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLUcode curl_url_set(CURLU *handle, CURLUPart what, const char *part, unsigned int flags)
     * }
     */
    public static FunctionDescriptor curl_url_set$descriptor() {
        return curl_url_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLUcode curl_url_set(CURLU *handle, CURLUPart what, const char *part, unsigned int flags)
     * }
     */
    public static MethodHandle curl_url_set$handle() {
        return curl_url_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLUcode curl_url_set(CURLU *handle, CURLUPart what, const char *part, unsigned int flags)
     * }
     */
    public static MemorySegment curl_url_set$address() {
        return curl_url_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLUcode curl_url_set(CURLU *handle, CURLUPart what, const char *part, unsigned int flags)
     * }
     */
    public static int curl_url_set(MemorySegment handle, int what, MemorySegment part, int flags) {
        var mh$ = curl_url_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_url_set", handle, what, part, flags);
            }
            return (int)mh$.invokeExact(handle, what, part, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_url_strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_url_strerror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *curl_url_strerror(CURLUcode)
     * }
     */
    public static FunctionDescriptor curl_url_strerror$descriptor() {
        return curl_url_strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *curl_url_strerror(CURLUcode)
     * }
     */
    public static MethodHandle curl_url_strerror$handle() {
        return curl_url_strerror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *curl_url_strerror(CURLUcode)
     * }
     */
    public static MemorySegment curl_url_strerror$address() {
        return curl_url_strerror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *curl_url_strerror(CURLUcode)
     * }
     */
    public static MemorySegment curl_url_strerror(int x0) {
        var mh$ = curl_url_strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_url_strerror", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLOT_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_LONG = 0
     * }
     */
    public static int CURLOT_LONG() {
        return CURLOT_LONG;
    }
    private static final int CURLOT_VALUES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_VALUES = 1
     * }
     */
    public static int CURLOT_VALUES() {
        return CURLOT_VALUES;
    }
    private static final int CURLOT_OFF_T = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_OFF_T = 2
     * }
     */
    public static int CURLOT_OFF_T() {
        return CURLOT_OFF_T;
    }
    private static final int CURLOT_OBJECT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_OBJECT = 3
     * }
     */
    public static int CURLOT_OBJECT() {
        return CURLOT_OBJECT;
    }
    private static final int CURLOT_STRING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_STRING = 4
     * }
     */
    public static int CURLOT_STRING() {
        return CURLOT_STRING;
    }
    private static final int CURLOT_SLIST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_SLIST = 5
     * }
     */
    public static int CURLOT_SLIST() {
        return CURLOT_SLIST;
    }
    private static final int CURLOT_CBPTR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_CBPTR = 6
     * }
     */
    public static int CURLOT_CBPTR() {
        return CURLOT_CBPTR;
    }
    private static final int CURLOT_BLOB = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_BLOB = 7
     * }
     */
    public static int CURLOT_BLOB() {
        return CURLOT_BLOB;
    }
    private static final int CURLOT_FUNCTION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLOT_FUNCTION = 8
     * }
     */
    public static int CURLOT_FUNCTION() {
        return CURLOT_FUNCTION;
    }

    private static class curl_easy_option_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_option_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_by_name(const char *name)
     * }
     */
    public static FunctionDescriptor curl_easy_option_by_name$descriptor() {
        return curl_easy_option_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_by_name(const char *name)
     * }
     */
    public static MethodHandle curl_easy_option_by_name$handle() {
        return curl_easy_option_by_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_by_name(const char *name)
     * }
     */
    public static MemorySegment curl_easy_option_by_name$address() {
        return curl_easy_option_by_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_by_name(const char *name)
     * }
     */
    public static MemorySegment curl_easy_option_by_name(MemorySegment name) {
        var mh$ = curl_easy_option_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_option_by_name", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_option_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_option_by_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_by_id(CURLoption id)
     * }
     */
    public static FunctionDescriptor curl_easy_option_by_id$descriptor() {
        return curl_easy_option_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_by_id(CURLoption id)
     * }
     */
    public static MethodHandle curl_easy_option_by_id$handle() {
        return curl_easy_option_by_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_by_id(CURLoption id)
     * }
     */
    public static MemorySegment curl_easy_option_by_id$address() {
        return curl_easy_option_by_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_by_id(CURLoption id)
     * }
     */
    public static MemorySegment curl_easy_option_by_id(int id) {
        var mh$ = curl_easy_option_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_option_by_id", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_option_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_option_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_next(const struct curl_easyoption *prev)
     * }
     */
    public static FunctionDescriptor curl_easy_option_next$descriptor() {
        return curl_easy_option_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_next(const struct curl_easyoption *prev)
     * }
     */
    public static MethodHandle curl_easy_option_next$handle() {
        return curl_easy_option_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_next(const struct curl_easyoption *prev)
     * }
     */
    public static MemorySegment curl_easy_option_next$address() {
        return curl_easy_option_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const struct curl_easyoption *curl_easy_option_next(const struct curl_easyoption *prev)
     * }
     */
    public static MemorySegment curl_easy_option_next(MemorySegment prev) {
        var mh$ = curl_easy_option_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_option_next", prev);
            }
            return (MemorySegment)mh$.invokeExact(prev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CURLHE_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLHE_OK = 0
     * }
     */
    public static int CURLHE_OK() {
        return CURLHE_OK;
    }
    private static final int CURLHE_BADINDEX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLHE_BADINDEX = 1
     * }
     */
    public static int CURLHE_BADINDEX() {
        return CURLHE_BADINDEX;
    }
    private static final int CURLHE_MISSING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLHE_MISSING = 2
     * }
     */
    public static int CURLHE_MISSING() {
        return CURLHE_MISSING;
    }
    private static final int CURLHE_NOHEADERS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLHE_NOHEADERS = 3
     * }
     */
    public static int CURLHE_NOHEADERS() {
        return CURLHE_NOHEADERS;
    }
    private static final int CURLHE_NOREQUEST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLHE_NOREQUEST = 4
     * }
     */
    public static int CURLHE_NOREQUEST() {
        return CURLHE_NOREQUEST;
    }
    private static final int CURLHE_OUT_OF_MEMORY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLHE_OUT_OF_MEMORY = 5
     * }
     */
    public static int CURLHE_OUT_OF_MEMORY() {
        return CURLHE_OUT_OF_MEMORY;
    }
    private static final int CURLHE_BAD_ARGUMENT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLHE_BAD_ARGUMENT = 6
     * }
     */
    public static int CURLHE_BAD_ARGUMENT() {
        return CURLHE_BAD_ARGUMENT;
    }
    private static final int CURLHE_NOT_BUILT_IN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CURLHE_NOT_BUILT_IN = 7
     * }
     */
    public static int CURLHE_NOT_BUILT_IN() {
        return CURLHE_NOT_BUILT_IN;
    }

    private static class curl_easy_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_LONG,
            curl_h.C_INT,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_header");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLHcode curl_easy_header(CURL *easy, const char *name, size_t index, unsigned int origin, int request, struct curl_header **hout)
     * }
     */
    public static FunctionDescriptor curl_easy_header$descriptor() {
        return curl_easy_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLHcode curl_easy_header(CURL *easy, const char *name, size_t index, unsigned int origin, int request, struct curl_header **hout)
     * }
     */
    public static MethodHandle curl_easy_header$handle() {
        return curl_easy_header.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLHcode curl_easy_header(CURL *easy, const char *name, size_t index, unsigned int origin, int request, struct curl_header **hout)
     * }
     */
    public static MemorySegment curl_easy_header$address() {
        return curl_easy_header.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLHcode curl_easy_header(CURL *easy, const char *name, size_t index, unsigned int origin, int request, struct curl_header **hout)
     * }
     */
    public static int curl_easy_header(MemorySegment easy, MemorySegment name, long index, int origin, int request, MemorySegment hout) {
        var mh$ = curl_easy_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_header", easy, name, index, origin, request, hout);
            }
            return (int)mh$.invokeExact(easy, name, index, origin, request, hout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_easy_nextheader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_INT,
            curl_h.C_INT,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_easy_nextheader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct curl_header *curl_easy_nextheader(CURL *easy, unsigned int origin, int request, struct curl_header *prev)
     * }
     */
    public static FunctionDescriptor curl_easy_nextheader$descriptor() {
        return curl_easy_nextheader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct curl_header *curl_easy_nextheader(CURL *easy, unsigned int origin, int request, struct curl_header *prev)
     * }
     */
    public static MethodHandle curl_easy_nextheader$handle() {
        return curl_easy_nextheader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct curl_header *curl_easy_nextheader(CURL *easy, unsigned int origin, int request, struct curl_header *prev)
     * }
     */
    public static MemorySegment curl_easy_nextheader$address() {
        return curl_easy_nextheader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct curl_header *curl_easy_nextheader(CURL *easy, unsigned int origin, int request, struct curl_header *prev)
     * }
     */
    public static MemorySegment curl_easy_nextheader(MemorySegment easy, int origin, int request, MemorySegment prev) {
        var mh$ = curl_easy_nextheader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_easy_nextheader", easy, origin, request, prev);
            }
            return (MemorySegment)mh$.invokeExact(easy, origin, request, prev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_ws_recv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_LONG,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_ws_recv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_ws_recv(CURL *curl, void *buffer, size_t buflen, size_t *recv, const struct curl_ws_frame **metap)
     * }
     */
    public static FunctionDescriptor curl_ws_recv$descriptor() {
        return curl_ws_recv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_ws_recv(CURL *curl, void *buffer, size_t buflen, size_t *recv, const struct curl_ws_frame **metap)
     * }
     */
    public static MethodHandle curl_ws_recv$handle() {
        return curl_ws_recv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_ws_recv(CURL *curl, void *buffer, size_t buflen, size_t *recv, const struct curl_ws_frame **metap)
     * }
     */
    public static MemorySegment curl_ws_recv$address() {
        return curl_ws_recv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_ws_recv(CURL *curl, void *buffer, size_t buflen, size_t *recv, const struct curl_ws_frame **metap)
     * }
     */
    public static int curl_ws_recv(MemorySegment curl, MemorySegment buffer, long buflen, MemorySegment recv, MemorySegment metap) {
        var mh$ = curl_ws_recv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_ws_recv", curl, buffer, buflen, recv, metap);
            }
            return (int)mh$.invokeExact(curl, buffer, buflen, recv, metap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_ws_send {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_LONG,
            curl_h.C_POINTER,
            curl_h.C_LONG,
            curl_h.C_INT
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_ws_send");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CURLcode curl_ws_send(CURL *curl, const void *buffer, size_t buflen, size_t *sent, curl_off_t fragsize, unsigned int flags)
     * }
     */
    public static FunctionDescriptor curl_ws_send$descriptor() {
        return curl_ws_send.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CURLcode curl_ws_send(CURL *curl, const void *buffer, size_t buflen, size_t *sent, curl_off_t fragsize, unsigned int flags)
     * }
     */
    public static MethodHandle curl_ws_send$handle() {
        return curl_ws_send.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CURLcode curl_ws_send(CURL *curl, const void *buffer, size_t buflen, size_t *sent, curl_off_t fragsize, unsigned int flags)
     * }
     */
    public static MemorySegment curl_ws_send$address() {
        return curl_ws_send.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CURLcode curl_ws_send(CURL *curl, const void *buffer, size_t buflen, size_t *sent, curl_off_t fragsize, unsigned int flags)
     * }
     */
    public static int curl_ws_send(MemorySegment curl, MemorySegment buffer, long buflen, MemorySegment sent, long fragsize, int flags) {
        var mh$ = curl_ws_send.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_ws_send", curl, buffer, buflen, sent, fragsize, flags);
            }
            return (int)mh$.invokeExact(curl, buffer, buflen, sent, fragsize, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_ws_meta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_ws_meta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct curl_ws_frame *curl_ws_meta(CURL *curl)
     * }
     */
    public static FunctionDescriptor curl_ws_meta$descriptor() {
        return curl_ws_meta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct curl_ws_frame *curl_ws_meta(CURL *curl)
     * }
     */
    public static MethodHandle curl_ws_meta$handle() {
        return curl_ws_meta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const struct curl_ws_frame *curl_ws_meta(CURL *curl)
     * }
     */
    public static MemorySegment curl_ws_meta$address() {
        return curl_ws_meta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const struct curl_ws_frame *curl_ws_meta(CURL *curl)
     * }
     */
    public static MemorySegment curl_ws_meta(MemorySegment curl) {
        var mh$ = curl_ws_meta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_ws_meta", curl);
            }
            return (MemorySegment)mh$.invokeExact(curl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int curl_mprintf(const char *format, ...)
     * }
     */
    public static class curl_mprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_mprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_mprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int curl_mprintf(const char *format, ...)
         * }
         */
        public static curl_mprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_mprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_mprintf", format, x1);
                }
                return (int)spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int curl_mfprintf(FILE *fd, const char *format, ...)
     * }
     */
    public static class curl_mfprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER,
                curl_h.C_POINTER
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_mfprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_mfprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int curl_mfprintf(FILE *fd, const char *format, ...)
         * }
         */
        public static curl_mfprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_mfprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment fd, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_mfprintf", fd, format, x2);
                }
                return (int)spreader.invokeExact(fd, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int curl_msprintf(char *buffer, const char *format, ...)
     * }
     */
    public static class curl_msprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER,
                curl_h.C_POINTER
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_msprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_msprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int curl_msprintf(char *buffer, const char *format, ...)
         * }
         */
        public static curl_msprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_msprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buffer, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_msprintf", buffer, format, x2);
                }
                return (int)spreader.invokeExact(buffer, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int curl_msnprintf(char *buffer, size_t maxlength, const char *format, ...)
     * }
     */
    public static class curl_msnprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_INT,
                curl_h.C_POINTER,
                curl_h.C_LONG,
                curl_h.C_POINTER
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_msnprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_msnprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int curl_msnprintf(char *buffer, size_t maxlength, const char *format, ...)
         * }
         */
        public static curl_msnprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_msnprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buffer, long maxlength, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_msnprintf", buffer, maxlength, format, x3);
                }
                return (int)spreader.invokeExact(buffer, maxlength, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class curl_mvprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mvprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int curl_mvprintf(const char *format, va_list args)
     * }
     */
    public static FunctionDescriptor curl_mvprintf$descriptor() {
        return curl_mvprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int curl_mvprintf(const char *format, va_list args)
     * }
     */
    public static MethodHandle curl_mvprintf$handle() {
        return curl_mvprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int curl_mvprintf(const char *format, va_list args)
     * }
     */
    public static MemorySegment curl_mvprintf$address() {
        return curl_mvprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int curl_mvprintf(const char *format, va_list args)
     * }
     */
    public static int curl_mvprintf(MemorySegment format, MemorySegment args) {
        var mh$ = curl_mvprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mvprintf", format, args);
            }
            return (int)mh$.invokeExact(format, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mvfprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mvfprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int curl_mvfprintf(FILE *fd, const char *format, va_list args)
     * }
     */
    public static FunctionDescriptor curl_mvfprintf$descriptor() {
        return curl_mvfprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int curl_mvfprintf(FILE *fd, const char *format, va_list args)
     * }
     */
    public static MethodHandle curl_mvfprintf$handle() {
        return curl_mvfprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int curl_mvfprintf(FILE *fd, const char *format, va_list args)
     * }
     */
    public static MemorySegment curl_mvfprintf$address() {
        return curl_mvfprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int curl_mvfprintf(FILE *fd, const char *format, va_list args)
     * }
     */
    public static int curl_mvfprintf(MemorySegment fd, MemorySegment format, MemorySegment args) {
        var mh$ = curl_mvfprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mvfprintf", fd, format, args);
            }
            return (int)mh$.invokeExact(fd, format, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mvsprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mvsprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int curl_mvsprintf(char *buffer, const char *format, va_list args)
     * }
     */
    public static FunctionDescriptor curl_mvsprintf$descriptor() {
        return curl_mvsprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int curl_mvsprintf(char *buffer, const char *format, va_list args)
     * }
     */
    public static MethodHandle curl_mvsprintf$handle() {
        return curl_mvsprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int curl_mvsprintf(char *buffer, const char *format, va_list args)
     * }
     */
    public static MemorySegment curl_mvsprintf$address() {
        return curl_mvsprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int curl_mvsprintf(char *buffer, const char *format, va_list args)
     * }
     */
    public static int curl_mvsprintf(MemorySegment buffer, MemorySegment format, MemorySegment args) {
        var mh$ = curl_mvsprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mvsprintf", buffer, format, args);
            }
            return (int)mh$.invokeExact(buffer, format, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class curl_mvsnprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_INT,
            curl_h.C_POINTER,
            curl_h.C_LONG,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mvsnprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int curl_mvsnprintf(char *buffer, size_t maxlength, const char *format, va_list args)
     * }
     */
    public static FunctionDescriptor curl_mvsnprintf$descriptor() {
        return curl_mvsnprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int curl_mvsnprintf(char *buffer, size_t maxlength, const char *format, va_list args)
     * }
     */
    public static MethodHandle curl_mvsnprintf$handle() {
        return curl_mvsnprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int curl_mvsnprintf(char *buffer, size_t maxlength, const char *format, va_list args)
     * }
     */
    public static MemorySegment curl_mvsnprintf$address() {
        return curl_mvsnprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int curl_mvsnprintf(char *buffer, size_t maxlength, const char *format, va_list args)
     * }
     */
    public static int curl_mvsnprintf(MemorySegment buffer, long maxlength, MemorySegment format, MemorySegment args) {
        var mh$ = curl_mvsnprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mvsnprintf", buffer, maxlength, format, args);
            }
            return (int)mh$.invokeExact(buffer, maxlength, format, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * char *curl_maprintf(const char *format, ...)
     * }
     */
    public static class curl_maprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                curl_h.C_POINTER,
                curl_h.C_POINTER
            );
        private static final MemorySegment ADDR = curl_h.findOrThrow("curl_maprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private curl_maprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * char *curl_maprintf(const char *format, ...)
         * }
         */
        public static curl_maprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new curl_maprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("curl_maprintf", format, x1);
                }
                return (MemorySegment)spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class curl_mvaprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            curl_h.C_POINTER,
            curl_h.C_POINTER,
            curl_h.C_POINTER
        );

        public static final MemorySegment ADDR = curl_h.findOrThrow("curl_mvaprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *curl_mvaprintf(const char *format, va_list args)
     * }
     */
    public static FunctionDescriptor curl_mvaprintf$descriptor() {
        return curl_mvaprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *curl_mvaprintf(const char *format, va_list args)
     * }
     */
    public static MethodHandle curl_mvaprintf$handle() {
        return curl_mvaprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *curl_mvaprintf(const char *format, va_list args)
     * }
     */
    public static MemorySegment curl_mvaprintf$address() {
        return curl_mvaprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *curl_mvaprintf(const char *format, va_list args)
     * }
     */
    public static MemorySegment curl_mvaprintf(MemorySegment format, MemorySegment args) {
        var mh$ = curl_mvaprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("curl_mvaprintf", format, args);
            }
            return (MemorySegment)mh$.invokeExact(format, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define LIBCURL_COPYRIGHT "Daniel Stenberg, <daniel@haxx.se>."
     * }
     */
    public static MemorySegment LIBCURL_COPYRIGHT() {
        class Holder {
            static final MemorySegment LIBCURL_COPYRIGHT
                = curl_h.LIBRARY_ARENA.allocateFrom("Daniel Stenberg, <daniel@haxx.se>.");
        }
        return Holder.LIBCURL_COPYRIGHT;
    }
    /**
     * {@snippet lang=c :
     * #define LIBCURL_VERSION "8.10.1"
     * }
     */
    public static MemorySegment LIBCURL_VERSION() {
        class Holder {
            static final MemorySegment LIBCURL_VERSION
                = curl_h.LIBRARY_ARENA.allocateFrom("8.10.1");
        }
        return Holder.LIBCURL_VERSION;
    }
    /**
     * {@snippet lang=c :
     * #define LIBCURL_TIMESTAMP "2024-09-18"
     * }
     */
    public static MemorySegment LIBCURL_TIMESTAMP() {
        class Holder {
            static final MemorySegment LIBCURL_TIMESTAMP
                = curl_h.LIBRARY_ARENA.allocateFrom("2024-09-18");
        }
        return Holder.LIBCURL_TIMESTAMP;
    }
    /**
     * {@snippet lang=c :
     * #define CURL_FORMAT_CURL_OFF_T "ld"
     * }
     */
    public static MemorySegment CURL_FORMAT_CURL_OFF_T() {
        class Holder {
            static final MemorySegment CURL_FORMAT_CURL_OFF_T
                = curl_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.CURL_FORMAT_CURL_OFF_T;
    }
    /**
     * {@snippet lang=c :
     * #define CURL_FORMAT_CURL_OFF_TU "lu"
     * }
     */
    public static MemorySegment CURL_FORMAT_CURL_OFF_TU() {
        class Holder {
            static final MemorySegment CURL_FORMAT_CURL_OFF_TU
                = curl_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.CURL_FORMAT_CURL_OFF_TU;
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    private static final int PF_UNIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PF_UNIX 1
     * }
     */
    public static int PF_UNIX() {
        return PF_UNIX;
    }
    private static final int PF_FILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PF_FILE 1
     * }
     */
    public static int PF_FILE() {
        return PF_FILE;
    }
    private static final int PF_ROUTE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PF_ROUTE 16
     * }
     */
    public static int PF_ROUTE() {
        return PF_ROUTE;
    }
    private static final int AF_UNSPEC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define AF_UNSPEC 0
     * }
     */
    public static int AF_UNSPEC() {
        return AF_UNSPEC;
    }
    private static final int AF_LOCAL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define AF_LOCAL 1
     * }
     */
    public static int AF_LOCAL() {
        return AF_LOCAL;
    }
    private static final int AF_UNIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define AF_UNIX 1
     * }
     */
    public static int AF_UNIX() {
        return AF_UNIX;
    }
    private static final int AF_FILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define AF_FILE 1
     * }
     */
    public static int AF_FILE() {
        return AF_FILE;
    }
    private static final int AF_INET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define AF_INET 2
     * }
     */
    public static int AF_INET() {
        return AF_INET;
    }
    private static final int AF_AX25 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define AF_AX25 3
     * }
     */
    public static int AF_AX25() {
        return AF_AX25;
    }
    private static final int AF_IPX = (int)4L;
    /**
     * {@snippet lang=c :
     * #define AF_IPX 4
     * }
     */
    public static int AF_IPX() {
        return AF_IPX;
    }
    private static final int AF_APPLETALK = (int)5L;
    /**
     * {@snippet lang=c :
     * #define AF_APPLETALK 5
     * }
     */
    public static int AF_APPLETALK() {
        return AF_APPLETALK;
    }
    private static final int AF_NETROM = (int)6L;
    /**
     * {@snippet lang=c :
     * #define AF_NETROM 6
     * }
     */
    public static int AF_NETROM() {
        return AF_NETROM;
    }
    private static final int AF_BRIDGE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define AF_BRIDGE 7
     * }
     */
    public static int AF_BRIDGE() {
        return AF_BRIDGE;
    }
    private static final int AF_ATMPVC = (int)8L;
    /**
     * {@snippet lang=c :
     * #define AF_ATMPVC 8
     * }
     */
    public static int AF_ATMPVC() {
        return AF_ATMPVC;
    }
    private static final int AF_X25 = (int)9L;
    /**
     * {@snippet lang=c :
     * #define AF_X25 9
     * }
     */
    public static int AF_X25() {
        return AF_X25;
    }
    private static final int AF_INET6 = (int)10L;
    /**
     * {@snippet lang=c :
     * #define AF_INET6 10
     * }
     */
    public static int AF_INET6() {
        return AF_INET6;
    }
    private static final int AF_ROSE = (int)11L;
    /**
     * {@snippet lang=c :
     * #define AF_ROSE 11
     * }
     */
    public static int AF_ROSE() {
        return AF_ROSE;
    }
    private static final int AF_DECnet = (int)12L;
    /**
     * {@snippet lang=c :
     * #define AF_DECnet 12
     * }
     */
    public static int AF_DECnet() {
        return AF_DECnet;
    }
    private static final int AF_NETBEUI = (int)13L;
    /**
     * {@snippet lang=c :
     * #define AF_NETBEUI 13
     * }
     */
    public static int AF_NETBEUI() {
        return AF_NETBEUI;
    }
    private static final int AF_SECURITY = (int)14L;
    /**
     * {@snippet lang=c :
     * #define AF_SECURITY 14
     * }
     */
    public static int AF_SECURITY() {
        return AF_SECURITY;
    }
    private static final int AF_KEY = (int)15L;
    /**
     * {@snippet lang=c :
     * #define AF_KEY 15
     * }
     */
    public static int AF_KEY() {
        return AF_KEY;
    }
    private static final int AF_NETLINK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define AF_NETLINK 16
     * }
     */
    public static int AF_NETLINK() {
        return AF_NETLINK;
    }
    private static final int AF_ROUTE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define AF_ROUTE 16
     * }
     */
    public static int AF_ROUTE() {
        return AF_ROUTE;
    }
    private static final int AF_PACKET = (int)17L;
    /**
     * {@snippet lang=c :
     * #define AF_PACKET 17
     * }
     */
    public static int AF_PACKET() {
        return AF_PACKET;
    }
    private static final int AF_ASH = (int)18L;
    /**
     * {@snippet lang=c :
     * #define AF_ASH 18
     * }
     */
    public static int AF_ASH() {
        return AF_ASH;
    }
    private static final int AF_ECONET = (int)19L;
    /**
     * {@snippet lang=c :
     * #define AF_ECONET 19
     * }
     */
    public static int AF_ECONET() {
        return AF_ECONET;
    }
    private static final int AF_ATMSVC = (int)20L;
    /**
     * {@snippet lang=c :
     * #define AF_ATMSVC 20
     * }
     */
    public static int AF_ATMSVC() {
        return AF_ATMSVC;
    }
    private static final int AF_RDS = (int)21L;
    /**
     * {@snippet lang=c :
     * #define AF_RDS 21
     * }
     */
    public static int AF_RDS() {
        return AF_RDS;
    }
    private static final int AF_SNA = (int)22L;
    /**
     * {@snippet lang=c :
     * #define AF_SNA 22
     * }
     */
    public static int AF_SNA() {
        return AF_SNA;
    }
    private static final int AF_IRDA = (int)23L;
    /**
     * {@snippet lang=c :
     * #define AF_IRDA 23
     * }
     */
    public static int AF_IRDA() {
        return AF_IRDA;
    }
    private static final int AF_PPPOX = (int)24L;
    /**
     * {@snippet lang=c :
     * #define AF_PPPOX 24
     * }
     */
    public static int AF_PPPOX() {
        return AF_PPPOX;
    }
    private static final int AF_WANPIPE = (int)25L;
    /**
     * {@snippet lang=c :
     * #define AF_WANPIPE 25
     * }
     */
    public static int AF_WANPIPE() {
        return AF_WANPIPE;
    }
    private static final int AF_LLC = (int)26L;
    /**
     * {@snippet lang=c :
     * #define AF_LLC 26
     * }
     */
    public static int AF_LLC() {
        return AF_LLC;
    }
    private static final int AF_IB = (int)27L;
    /**
     * {@snippet lang=c :
     * #define AF_IB 27
     * }
     */
    public static int AF_IB() {
        return AF_IB;
    }
    private static final int AF_MPLS = (int)28L;
    /**
     * {@snippet lang=c :
     * #define AF_MPLS 28
     * }
     */
    public static int AF_MPLS() {
        return AF_MPLS;
    }
    private static final int AF_CAN = (int)29L;
    /**
     * {@snippet lang=c :
     * #define AF_CAN 29
     * }
     */
    public static int AF_CAN() {
        return AF_CAN;
    }
    private static final int AF_TIPC = (int)30L;
    /**
     * {@snippet lang=c :
     * #define AF_TIPC 30
     * }
     */
    public static int AF_TIPC() {
        return AF_TIPC;
    }
    private static final int AF_BLUETOOTH = (int)31L;
    /**
     * {@snippet lang=c :
     * #define AF_BLUETOOTH 31
     * }
     */
    public static int AF_BLUETOOTH() {
        return AF_BLUETOOTH;
    }
    private static final int AF_IUCV = (int)32L;
    /**
     * {@snippet lang=c :
     * #define AF_IUCV 32
     * }
     */
    public static int AF_IUCV() {
        return AF_IUCV;
    }
    private static final int AF_RXRPC = (int)33L;
    /**
     * {@snippet lang=c :
     * #define AF_RXRPC 33
     * }
     */
    public static int AF_RXRPC() {
        return AF_RXRPC;
    }
    private static final int AF_ISDN = (int)34L;
    /**
     * {@snippet lang=c :
     * #define AF_ISDN 34
     * }
     */
    public static int AF_ISDN() {
        return AF_ISDN;
    }
    private static final int AF_PHONET = (int)35L;
    /**
     * {@snippet lang=c :
     * #define AF_PHONET 35
     * }
     */
    public static int AF_PHONET() {
        return AF_PHONET;
    }
    private static final int AF_IEEE802154 = (int)36L;
    /**
     * {@snippet lang=c :
     * #define AF_IEEE802154 36
     * }
     */
    public static int AF_IEEE802154() {
        return AF_IEEE802154;
    }
    private static final int AF_CAIF = (int)37L;
    /**
     * {@snippet lang=c :
     * #define AF_CAIF 37
     * }
     */
    public static int AF_CAIF() {
        return AF_CAIF;
    }
    private static final int AF_ALG = (int)38L;
    /**
     * {@snippet lang=c :
     * #define AF_ALG 38
     * }
     */
    public static int AF_ALG() {
        return AF_ALG;
    }
    private static final int AF_NFC = (int)39L;
    /**
     * {@snippet lang=c :
     * #define AF_NFC 39
     * }
     */
    public static int AF_NFC() {
        return AF_NFC;
    }
    private static final int AF_VSOCK = (int)40L;
    /**
     * {@snippet lang=c :
     * #define AF_VSOCK 40
     * }
     */
    public static int AF_VSOCK() {
        return AF_VSOCK;
    }
    private static final int AF_KCM = (int)41L;
    /**
     * {@snippet lang=c :
     * #define AF_KCM 41
     * }
     */
    public static int AF_KCM() {
        return AF_KCM;
    }
    private static final int AF_QIPCRTR = (int)42L;
    /**
     * {@snippet lang=c :
     * #define AF_QIPCRTR 42
     * }
     */
    public static int AF_QIPCRTR() {
        return AF_QIPCRTR;
    }
    private static final int AF_SMC = (int)43L;
    /**
     * {@snippet lang=c :
     * #define AF_SMC 43
     * }
     */
    public static int AF_SMC() {
        return AF_SMC;
    }
    private static final int AF_XDP = (int)44L;
    /**
     * {@snippet lang=c :
     * #define AF_XDP 44
     * }
     */
    public static int AF_XDP() {
        return AF_XDP;
    }
    private static final int AF_MCTP = (int)45L;
    /**
     * {@snippet lang=c :
     * #define AF_MCTP 45
     * }
     */
    public static int AF_MCTP() {
        return AF_MCTP;
    }
    private static final int AF_MAX = (int)46L;
    /**
     * {@snippet lang=c :
     * #define AF_MAX 46
     * }
     */
    public static int AF_MAX() {
        return AF_MAX;
    }
    private static final long __SOCKADDR_COMMON_SIZE = 2L;
    /**
     * {@snippet lang=c :
     * #define __SOCKADDR_COMMON_SIZE 2
     * }
     */
    public static long __SOCKADDR_COMMON_SIZE() {
        return __SOCKADDR_COMMON_SIZE;
    }
    private static final long _SS_PADSIZE = 118L;
    /**
     * {@snippet lang=c :
     * #define _SS_PADSIZE 118
     * }
     */
    public static long _SS_PADSIZE() {
        return _SS_PADSIZE;
    }
    private static final int SO_GET_FILTER = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SO_GET_FILTER 26
     * }
     */
    public static int SO_GET_FILTER() {
        return SO_GET_FILTER;
    }
    private static final int SCM_WIFI_STATUS = (int)41L;
    /**
     * {@snippet lang=c :
     * #define SCM_WIFI_STATUS 41
     * }
     */
    public static int SCM_WIFI_STATUS() {
        return SCM_WIFI_STATUS;
    }
    private static final int SO_DETACH_BPF = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SO_DETACH_BPF 27
     * }
     */
    public static int SO_DETACH_BPF() {
        return SO_DETACH_BPF;
    }
    private static final int SCM_TXTIME = (int)61L;
    /**
     * {@snippet lang=c :
     * #define SCM_TXTIME 61
     * }
     */
    public static int SCM_TXTIME() {
        return SCM_TXTIME;
    }
    private static final int SO_TIMESTAMP = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMP 29
     * }
     */
    public static int SO_TIMESTAMP() {
        return SO_TIMESTAMP;
    }
    private static final int SO_TIMESTAMPNS = (int)35L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPNS 35
     * }
     */
    public static int SO_TIMESTAMPNS() {
        return SO_TIMESTAMPNS;
    }
    private static final int SO_TIMESTAMPING = (int)37L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPING 37
     * }
     */
    public static int SO_TIMESTAMPING() {
        return SO_TIMESTAMPING;
    }
    private static final int SO_RCVTIMEO = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVTIMEO 20
     * }
     */
    public static int SO_RCVTIMEO() {
        return SO_RCVTIMEO;
    }
    private static final int SO_SNDTIMEO = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDTIMEO 21
     * }
     */
    public static int SO_SNDTIMEO() {
        return SO_SNDTIMEO;
    }
    private static final int SCM_TIMESTAMP = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMP 29
     * }
     */
    public static int SCM_TIMESTAMP() {
        return SCM_TIMESTAMP;
    }
    private static final int SCM_TIMESTAMPNS = (int)35L;
    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMPNS 35
     * }
     */
    public static int SCM_TIMESTAMPNS() {
        return SCM_TIMESTAMPNS;
    }
    private static final int SCM_TIMESTAMPING = (int)37L;
    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMPING 37
     * }
     */
    public static int SCM_TIMESTAMPING() {
        return SCM_TIMESTAMPING;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = curl_h.LIBRARY_ARENA.allocateFrom("/tmp");
        }
        return Holder.P_tmpdir;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final int PTHREAD_DESTRUCTOR_ITERATIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return PTHREAD_DESTRUCTOR_ITERATIONS;
    }
    private static final int SEM_VALUE_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SEM_VALUE_MAX 2147483647
     * }
     */
    public static int SEM_VALUE_MAX() {
        return SEM_VALUE_MAX;
    }
    private static final long SSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return SSIZE_MAX;
    }
    private static final int BC_BASE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return BC_BASE_MAX;
    }
    private static final int BC_DIM_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return BC_DIM_MAX;
    }
    private static final int BC_SCALE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return BC_SCALE_MAX;
    }
    private static final int BC_STRING_MAX = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return BC_STRING_MAX;
    }
    private static final int EXPR_NEST_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return EXPR_NEST_MAX;
    }
    private static final int LINE_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return LINE_MAX;
    }
    private static final int RE_DUP_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define RE_DUP_MAX 32767
     * }
     */
    public static int RE_DUP_MAX() {
        return RE_DUP_MAX;
    }
    private static final int SCHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return SCHAR_MAX;
    }
    private static final int SHRT_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return SHRT_MAX;
    }
    private static final int INT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return INT_MAX;
    }
    private static final long LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return LONG_MAX;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final long LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return LONG_MIN;
    }
    private static final int UCHAR_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return UCHAR_MAX;
    }
    private static final int USHRT_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return USHRT_MAX;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final long ULONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final int CHAR_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return CHAR_BIT;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final long CLOCKS_PER_SEC = 1000000L;
    /**
     * {@snippet lang=c :
     * #define CLOCKS_PER_SEC 1000000
     * }
     */
    public static long CLOCKS_PER_SEC() {
        return CLOCKS_PER_SEC;
    }
    private static final int CURL_SOCKET_BAD = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define CURL_SOCKET_BAD -1
     * }
     */
    public static int CURL_SOCKET_BAD() {
        return CURL_SOCKET_BAD;
    }
    private static final int CURLSSLBACKEND_AWSLC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLBACKEND_AWSLC 1
     * }
     */
    public static int CURLSSLBACKEND_AWSLC() {
        return CURLSSLBACKEND_AWSLC;
    }
    private static final int CURLSSLBACKEND_BORINGSSL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLBACKEND_BORINGSSL 1
     * }
     */
    public static int CURLSSLBACKEND_BORINGSSL() {
        return CURLSSLBACKEND_BORINGSSL;
    }
    private static final int CURLSSLBACKEND_LIBRESSL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLBACKEND_LIBRESSL 1
     * }
     */
    public static int CURLSSLBACKEND_LIBRESSL() {
        return CURLSSLBACKEND_LIBRESSL;
    }
    private static final int CURLSSLBACKEND_CYASSL = (int)7L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLBACKEND_CYASSL 7
     * }
     */
    public static int CURLSSLBACKEND_CYASSL() {
        return CURLSSLBACKEND_CYASSL;
    }
    private static final int CURLSSLBACKEND_DARWINSSL = (int)9L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLBACKEND_DARWINSSL 9
     * }
     */
    public static int CURLSSLBACKEND_DARWINSSL() {
        return CURLSSLBACKEND_DARWINSSL;
    }
    private static final int CURL_HTTPPOST_FILENAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURL_HTTPPOST_FILENAME 1
     * }
     */
    public static int CURL_HTTPPOST_FILENAME() {
        return CURL_HTTPPOST_FILENAME;
    }
    private static final int CURL_HTTPPOST_READFILE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CURL_HTTPPOST_READFILE 2
     * }
     */
    public static int CURL_HTTPPOST_READFILE() {
        return CURL_HTTPPOST_READFILE;
    }
    private static final int CURL_HTTPPOST_PTRNAME = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CURL_HTTPPOST_PTRNAME 4
     * }
     */
    public static int CURL_HTTPPOST_PTRNAME() {
        return CURL_HTTPPOST_PTRNAME;
    }
    private static final int CURL_HTTPPOST_PTRCONTENTS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CURL_HTTPPOST_PTRCONTENTS 8
     * }
     */
    public static int CURL_HTTPPOST_PTRCONTENTS() {
        return CURL_HTTPPOST_PTRCONTENTS;
    }
    private static final int CURL_HTTPPOST_BUFFER = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CURL_HTTPPOST_BUFFER 16
     * }
     */
    public static int CURL_HTTPPOST_BUFFER() {
        return CURL_HTTPPOST_BUFFER;
    }
    private static final int CURL_HTTPPOST_PTRBUFFER = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CURL_HTTPPOST_PTRBUFFER 32
     * }
     */
    public static int CURL_HTTPPOST_PTRBUFFER() {
        return CURL_HTTPPOST_PTRBUFFER;
    }
    private static final int CURL_HTTPPOST_CALLBACK = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CURL_HTTPPOST_CALLBACK 64
     * }
     */
    public static int CURL_HTTPPOST_CALLBACK() {
        return CURL_HTTPPOST_CALLBACK;
    }
    private static final int CURL_HTTPPOST_LARGE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define CURL_HTTPPOST_LARGE 128
     * }
     */
    public static int CURL_HTTPPOST_LARGE() {
        return CURL_HTTPPOST_LARGE;
    }
    private static final int CURL_MAX_READ_SIZE = (int)10485760L;
    /**
     * {@snippet lang=c :
     * #define CURL_MAX_READ_SIZE 10485760
     * }
     */
    public static int CURL_MAX_READ_SIZE() {
        return CURL_MAX_READ_SIZE;
    }
    private static final int CURL_MAX_HTTP_HEADER = (int)102400L;
    /**
     * {@snippet lang=c :
     * #define CURL_MAX_HTTP_HEADER 102400
     * }
     */
    public static int CURL_MAX_HTTP_HEADER() {
        return CURL_MAX_HTTP_HEADER;
    }
    private static final int CURL_WRITEFUNC_ERROR = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define CURL_WRITEFUNC_ERROR 4294967295
     * }
     */
    public static int CURL_WRITEFUNC_ERROR() {
        return CURL_WRITEFUNC_ERROR;
    }
    private static final int CURLFINFOFLAG_KNOWN_FILENAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLFINFOFLAG_KNOWN_FILENAME 1
     * }
     */
    public static int CURLFINFOFLAG_KNOWN_FILENAME() {
        return CURLFINFOFLAG_KNOWN_FILENAME;
    }
    private static final int CURLFINFOFLAG_KNOWN_FILETYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CURLFINFOFLAG_KNOWN_FILETYPE 2
     * }
     */
    public static int CURLFINFOFLAG_KNOWN_FILETYPE() {
        return CURLFINFOFLAG_KNOWN_FILETYPE;
    }
    private static final int CURLFINFOFLAG_KNOWN_TIME = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CURLFINFOFLAG_KNOWN_TIME 4
     * }
     */
    public static int CURLFINFOFLAG_KNOWN_TIME() {
        return CURLFINFOFLAG_KNOWN_TIME;
    }
    private static final int CURLFINFOFLAG_KNOWN_PERM = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CURLFINFOFLAG_KNOWN_PERM 8
     * }
     */
    public static int CURLFINFOFLAG_KNOWN_PERM() {
        return CURLFINFOFLAG_KNOWN_PERM;
    }
    private static final int CURLFINFOFLAG_KNOWN_UID = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CURLFINFOFLAG_KNOWN_UID 16
     * }
     */
    public static int CURLFINFOFLAG_KNOWN_UID() {
        return CURLFINFOFLAG_KNOWN_UID;
    }
    private static final int CURLFINFOFLAG_KNOWN_GID = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CURLFINFOFLAG_KNOWN_GID 32
     * }
     */
    public static int CURLFINFOFLAG_KNOWN_GID() {
        return CURLFINFOFLAG_KNOWN_GID;
    }
    private static final int CURLFINFOFLAG_KNOWN_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CURLFINFOFLAG_KNOWN_SIZE 64
     * }
     */
    public static int CURLFINFOFLAG_KNOWN_SIZE() {
        return CURLFINFOFLAG_KNOWN_SIZE;
    }
    private static final int CURLFINFOFLAG_KNOWN_HLINKCOUNT = (int)128L;
    /**
     * {@snippet lang=c :
     * #define CURLFINFOFLAG_KNOWN_HLINKCOUNT 128
     * }
     */
    public static int CURLFINFOFLAG_KNOWN_HLINKCOUNT() {
        return CURLFINFOFLAG_KNOWN_HLINKCOUNT;
    }
    private static final int CURLE_OBSOLETE16 = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CURLE_OBSOLETE16 16
     * }
     */
    public static int CURLE_OBSOLETE16() {
        return CURLE_OBSOLETE16;
    }
    private static final int CURLE_OBSOLETE10 = (int)10L;
    /**
     * {@snippet lang=c :
     * #define CURLE_OBSOLETE10 10
     * }
     */
    public static int CURLE_OBSOLETE10() {
        return CURLE_OBSOLETE10;
    }
    private static final int CURLE_OBSOLETE12 = (int)12L;
    /**
     * {@snippet lang=c :
     * #define CURLE_OBSOLETE12 12
     * }
     */
    public static int CURLE_OBSOLETE12() {
        return CURLE_OBSOLETE12;
    }
    private static final int CURLOPT_ENCODING = (int)10102L;
    /**
     * {@snippet lang=c :
     * #define CURLOPT_ENCODING 10102
     * }
     */
    public static int CURLOPT_ENCODING() {
        return CURLOPT_ENCODING;
    }
    private static final int CURLE_FTP_WEIRD_SERVER_REPLY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_WEIRD_SERVER_REPLY 8
     * }
     */
    public static int CURLE_FTP_WEIRD_SERVER_REPLY() {
        return CURLE_FTP_WEIRD_SERVER_REPLY;
    }
    private static final int CURLE_SSL_CACERT = (int)60L;
    /**
     * {@snippet lang=c :
     * #define CURLE_SSL_CACERT 60
     * }
     */
    public static int CURLE_SSL_CACERT() {
        return CURLE_SSL_CACERT;
    }
    private static final int CURLE_UNKNOWN_TELNET_OPTION = (int)48L;
    /**
     * {@snippet lang=c :
     * #define CURLE_UNKNOWN_TELNET_OPTION 48
     * }
     */
    public static int CURLE_UNKNOWN_TELNET_OPTION() {
        return CURLE_UNKNOWN_TELNET_OPTION;
    }
    private static final int CURLE_TELNET_OPTION_SYNTAX = (int)49L;
    /**
     * {@snippet lang=c :
     * #define CURLE_TELNET_OPTION_SYNTAX 49
     * }
     */
    public static int CURLE_TELNET_OPTION_SYNTAX() {
        return CURLE_TELNET_OPTION_SYNTAX;
    }
    private static final int CURLE_SSL_PEER_CERTIFICATE = (int)60L;
    /**
     * {@snippet lang=c :
     * #define CURLE_SSL_PEER_CERTIFICATE 60
     * }
     */
    public static int CURLE_SSL_PEER_CERTIFICATE() {
        return CURLE_SSL_PEER_CERTIFICATE;
    }
    private static final int CURLE_OBSOLETE = (int)50L;
    /**
     * {@snippet lang=c :
     * #define CURLE_OBSOLETE 50
     * }
     */
    public static int CURLE_OBSOLETE() {
        return CURLE_OBSOLETE;
    }
    private static final int CURLE_BAD_PASSWORD_ENTERED = (int)46L;
    /**
     * {@snippet lang=c :
     * #define CURLE_BAD_PASSWORD_ENTERED 46
     * }
     */
    public static int CURLE_BAD_PASSWORD_ENTERED() {
        return CURLE_BAD_PASSWORD_ENTERED;
    }
    private static final int CURLE_BAD_CALLING_ORDER = (int)44L;
    /**
     * {@snippet lang=c :
     * #define CURLE_BAD_CALLING_ORDER 44
     * }
     */
    public static int CURLE_BAD_CALLING_ORDER() {
        return CURLE_BAD_CALLING_ORDER;
    }
    private static final int CURLE_FTP_USER_PASSWORD_INCORRECT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_USER_PASSWORD_INCORRECT 10
     * }
     */
    public static int CURLE_FTP_USER_PASSWORD_INCORRECT() {
        return CURLE_FTP_USER_PASSWORD_INCORRECT;
    }
    private static final int CURLE_FTP_CANT_RECONNECT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_CANT_RECONNECT 16
     * }
     */
    public static int CURLE_FTP_CANT_RECONNECT() {
        return CURLE_FTP_CANT_RECONNECT;
    }
    private static final int CURLE_FTP_COULDNT_GET_SIZE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_COULDNT_GET_SIZE 32
     * }
     */
    public static int CURLE_FTP_COULDNT_GET_SIZE() {
        return CURLE_FTP_COULDNT_GET_SIZE;
    }
    private static final int CURLE_FTP_COULDNT_SET_ASCII = (int)29L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_COULDNT_SET_ASCII 29
     * }
     */
    public static int CURLE_FTP_COULDNT_SET_ASCII() {
        return CURLE_FTP_COULDNT_SET_ASCII;
    }
    private static final int CURLE_FTP_WEIRD_USER_REPLY = (int)12L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_WEIRD_USER_REPLY 12
     * }
     */
    public static int CURLE_FTP_WEIRD_USER_REPLY() {
        return CURLE_FTP_WEIRD_USER_REPLY;
    }
    private static final int CURLE_FTP_WRITE_ERROR = (int)20L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_WRITE_ERROR 20
     * }
     */
    public static int CURLE_FTP_WRITE_ERROR() {
        return CURLE_FTP_WRITE_ERROR;
    }
    private static final int CURLE_LIBRARY_NOT_FOUND = (int)40L;
    /**
     * {@snippet lang=c :
     * #define CURLE_LIBRARY_NOT_FOUND 40
     * }
     */
    public static int CURLE_LIBRARY_NOT_FOUND() {
        return CURLE_LIBRARY_NOT_FOUND;
    }
    private static final int CURLE_MALFORMAT_USER = (int)24L;
    /**
     * {@snippet lang=c :
     * #define CURLE_MALFORMAT_USER 24
     * }
     */
    public static int CURLE_MALFORMAT_USER() {
        return CURLE_MALFORMAT_USER;
    }
    private static final int CURLE_SHARE_IN_USE = (int)57L;
    /**
     * {@snippet lang=c :
     * #define CURLE_SHARE_IN_USE 57
     * }
     */
    public static int CURLE_SHARE_IN_USE() {
        return CURLE_SHARE_IN_USE;
    }
    private static final int CURLE_URL_MALFORMAT_USER = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CURLE_URL_MALFORMAT_USER 4
     * }
     */
    public static int CURLE_URL_MALFORMAT_USER() {
        return CURLE_URL_MALFORMAT_USER;
    }
    private static final int CURLE_FTP_ACCESS_DENIED = (int)9L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_ACCESS_DENIED 9
     * }
     */
    public static int CURLE_FTP_ACCESS_DENIED() {
        return CURLE_FTP_ACCESS_DENIED;
    }
    private static final int CURLE_FTP_COULDNT_SET_BINARY = (int)17L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_COULDNT_SET_BINARY 17
     * }
     */
    public static int CURLE_FTP_COULDNT_SET_BINARY() {
        return CURLE_FTP_COULDNT_SET_BINARY;
    }
    private static final int CURLE_FTP_QUOTE_ERROR = (int)21L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_QUOTE_ERROR 21
     * }
     */
    public static int CURLE_FTP_QUOTE_ERROR() {
        return CURLE_FTP_QUOTE_ERROR;
    }
    private static final int CURLE_TFTP_DISKFULL = (int)70L;
    /**
     * {@snippet lang=c :
     * #define CURLE_TFTP_DISKFULL 70
     * }
     */
    public static int CURLE_TFTP_DISKFULL() {
        return CURLE_TFTP_DISKFULL;
    }
    private static final int CURLE_TFTP_EXISTS = (int)73L;
    /**
     * {@snippet lang=c :
     * #define CURLE_TFTP_EXISTS 73
     * }
     */
    public static int CURLE_TFTP_EXISTS() {
        return CURLE_TFTP_EXISTS;
    }
    private static final int CURLE_HTTP_RANGE_ERROR = (int)33L;
    /**
     * {@snippet lang=c :
     * #define CURLE_HTTP_RANGE_ERROR 33
     * }
     */
    public static int CURLE_HTTP_RANGE_ERROR() {
        return CURLE_HTTP_RANGE_ERROR;
    }
    private static final int CURLE_FTP_SSL_FAILED = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_SSL_FAILED 64
     * }
     */
    public static int CURLE_FTP_SSL_FAILED() {
        return CURLE_FTP_SSL_FAILED;
    }
    private static final int CURLE_OPERATION_TIMEOUTED = (int)28L;
    /**
     * {@snippet lang=c :
     * #define CURLE_OPERATION_TIMEOUTED 28
     * }
     */
    public static int CURLE_OPERATION_TIMEOUTED() {
        return CURLE_OPERATION_TIMEOUTED;
    }
    private static final int CURLE_HTTP_NOT_FOUND = (int)22L;
    /**
     * {@snippet lang=c :
     * #define CURLE_HTTP_NOT_FOUND 22
     * }
     */
    public static int CURLE_HTTP_NOT_FOUND() {
        return CURLE_HTTP_NOT_FOUND;
    }
    private static final int CURLE_HTTP_PORT_FAILED = (int)45L;
    /**
     * {@snippet lang=c :
     * #define CURLE_HTTP_PORT_FAILED 45
     * }
     */
    public static int CURLE_HTTP_PORT_FAILED() {
        return CURLE_HTTP_PORT_FAILED;
    }
    private static final int CURLE_FTP_COULDNT_STOR_FILE = (int)25L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_COULDNT_STOR_FILE 25
     * }
     */
    public static int CURLE_FTP_COULDNT_STOR_FILE() {
        return CURLE_FTP_COULDNT_STOR_FILE;
    }
    private static final int CURLE_FTP_PARTIAL_FILE = (int)18L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_PARTIAL_FILE 18
     * }
     */
    public static int CURLE_FTP_PARTIAL_FILE() {
        return CURLE_FTP_PARTIAL_FILE;
    }
    private static final int CURLE_FTP_BAD_DOWNLOAD_RESUME = (int)36L;
    /**
     * {@snippet lang=c :
     * #define CURLE_FTP_BAD_DOWNLOAD_RESUME 36
     * }
     */
    public static int CURLE_FTP_BAD_DOWNLOAD_RESUME() {
        return CURLE_FTP_BAD_DOWNLOAD_RESUME;
    }
    private static final int CURLE_LDAP_INVALID_URL = (int)62L;
    /**
     * {@snippet lang=c :
     * #define CURLE_LDAP_INVALID_URL 62
     * }
     */
    public static int CURLE_LDAP_INVALID_URL() {
        return CURLE_LDAP_INVALID_URL;
    }
    private static final int CURLE_CONV_REQD = (int)76L;
    /**
     * {@snippet lang=c :
     * #define CURLE_CONV_REQD 76
     * }
     */
    public static int CURLE_CONV_REQD() {
        return CURLE_CONV_REQD;
    }
    private static final int CURLE_CONV_FAILED = (int)75L;
    /**
     * {@snippet lang=c :
     * #define CURLE_CONV_FAILED 75
     * }
     */
    public static int CURLE_CONV_FAILED() {
        return CURLE_CONV_FAILED;
    }
    private static final int CURLOPT_FILE = (int)10001L;
    /**
     * {@snippet lang=c :
     * #define CURLOPT_FILE 10001
     * }
     */
    public static int CURLOPT_FILE() {
        return CURLOPT_FILE;
    }
    private static final int CURLOPT_INFILE = (int)10009L;
    /**
     * {@snippet lang=c :
     * #define CURLOPT_INFILE 10009
     * }
     */
    public static int CURLOPT_INFILE() {
        return CURLOPT_INFILE;
    }
    private static final int CURLOPT_WRITEHEADER = (int)10029L;
    /**
     * {@snippet lang=c :
     * #define CURLOPT_WRITEHEADER 10029
     * }
     */
    public static int CURLOPT_WRITEHEADER() {
        return CURLOPT_WRITEHEADER;
    }
    private static final int CURLOPT_WRITEINFO = (int)9999L;
    /**
     * {@snippet lang=c :
     * #define CURLOPT_WRITEINFO 9999
     * }
     */
    public static int CURLOPT_WRITEINFO() {
        return CURLOPT_WRITEINFO;
    }
    private static final int CURLOPT_CLOSEPOLICY = (int)9999L;
    /**
     * {@snippet lang=c :
     * #define CURLOPT_CLOSEPOLICY 9999
     * }
     */
    public static int CURLOPT_CLOSEPOLICY() {
        return CURLOPT_CLOSEPOLICY;
    }
    private static final long CURLAUTH_NONE = 0L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_NONE 0
     * }
     */
    public static long CURLAUTH_NONE() {
        return CURLAUTH_NONE;
    }
    private static final long CURLAUTH_BASIC = 1L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_BASIC 1
     * }
     */
    public static long CURLAUTH_BASIC() {
        return CURLAUTH_BASIC;
    }
    private static final long CURLAUTH_DIGEST = 2L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_DIGEST 2
     * }
     */
    public static long CURLAUTH_DIGEST() {
        return CURLAUTH_DIGEST;
    }
    private static final long CURLAUTH_NEGOTIATE = 4L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_NEGOTIATE 4
     * }
     */
    public static long CURLAUTH_NEGOTIATE() {
        return CURLAUTH_NEGOTIATE;
    }
    private static final long CURLAUTH_GSSNEGOTIATE = 4L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_GSSNEGOTIATE 4
     * }
     */
    public static long CURLAUTH_GSSNEGOTIATE() {
        return CURLAUTH_GSSNEGOTIATE;
    }
    private static final long CURLAUTH_GSSAPI = 4L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_GSSAPI 4
     * }
     */
    public static long CURLAUTH_GSSAPI() {
        return CURLAUTH_GSSAPI;
    }
    private static final long CURLAUTH_NTLM = 8L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_NTLM 8
     * }
     */
    public static long CURLAUTH_NTLM() {
        return CURLAUTH_NTLM;
    }
    private static final long CURLAUTH_DIGEST_IE = 16L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_DIGEST_IE 16
     * }
     */
    public static long CURLAUTH_DIGEST_IE() {
        return CURLAUTH_DIGEST_IE;
    }
    private static final long CURLAUTH_NTLM_WB = 32L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_NTLM_WB 32
     * }
     */
    public static long CURLAUTH_NTLM_WB() {
        return CURLAUTH_NTLM_WB;
    }
    private static final long CURLAUTH_BEARER = 64L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_BEARER 64
     * }
     */
    public static long CURLAUTH_BEARER() {
        return CURLAUTH_BEARER;
    }
    private static final long CURLAUTH_AWS_SIGV4 = 128L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_AWS_SIGV4 128
     * }
     */
    public static long CURLAUTH_AWS_SIGV4() {
        return CURLAUTH_AWS_SIGV4;
    }
    private static final long CURLAUTH_ONLY = 2147483648L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_ONLY 2147483648
     * }
     */
    public static long CURLAUTH_ONLY() {
        return CURLAUTH_ONLY;
    }
    private static final long CURLAUTH_ANY = -17L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_ANY -17
     * }
     */
    public static long CURLAUTH_ANY() {
        return CURLAUTH_ANY;
    }
    private static final long CURLAUTH_ANYSAFE = -18L;
    /**
     * {@snippet lang=c :
     * #define CURLAUTH_ANYSAFE -18
     * }
     */
    public static long CURLAUTH_ANYSAFE() {
        return CURLAUTH_ANYSAFE;
    }
    private static final int CURLSSH_AUTH_ANY = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define CURLSSH_AUTH_ANY -1
     * }
     */
    public static int CURLSSH_AUTH_ANY() {
        return CURLSSH_AUTH_ANY;
    }
    private static final int CURLSSH_AUTH_PUBLICKEY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLSSH_AUTH_PUBLICKEY 1
     * }
     */
    public static int CURLSSH_AUTH_PUBLICKEY() {
        return CURLSSH_AUTH_PUBLICKEY;
    }
    private static final int CURLSSH_AUTH_PASSWORD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CURLSSH_AUTH_PASSWORD 2
     * }
     */
    public static int CURLSSH_AUTH_PASSWORD() {
        return CURLSSH_AUTH_PASSWORD;
    }
    private static final int CURLSSH_AUTH_HOST = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CURLSSH_AUTH_HOST 4
     * }
     */
    public static int CURLSSH_AUTH_HOST() {
        return CURLSSH_AUTH_HOST;
    }
    private static final int CURLSSH_AUTH_KEYBOARD = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CURLSSH_AUTH_KEYBOARD 8
     * }
     */
    public static int CURLSSH_AUTH_KEYBOARD() {
        return CURLSSH_AUTH_KEYBOARD;
    }
    private static final int CURLSSH_AUTH_AGENT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CURLSSH_AUTH_AGENT 16
     * }
     */
    public static int CURLSSH_AUTH_AGENT() {
        return CURLSSH_AUTH_AGENT;
    }
    private static final int CURLSSH_AUTH_GSSAPI = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CURLSSH_AUTH_GSSAPI 32
     * }
     */
    public static int CURLSSH_AUTH_GSSAPI() {
        return CURLSSH_AUTH_GSSAPI;
    }
    private static final int CURLSSH_AUTH_DEFAULT = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define CURLSSH_AUTH_DEFAULT -1
     * }
     */
    public static int CURLSSH_AUTH_DEFAULT() {
        return CURLSSH_AUTH_DEFAULT;
    }
    private static final int CURLGSSAPI_DELEGATION_POLICY_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLGSSAPI_DELEGATION_POLICY_FLAG 1
     * }
     */
    public static int CURLGSSAPI_DELEGATION_POLICY_FLAG() {
        return CURLGSSAPI_DELEGATION_POLICY_FLAG;
    }
    private static final int CURLGSSAPI_DELEGATION_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CURLGSSAPI_DELEGATION_FLAG 2
     * }
     */
    public static int CURLGSSAPI_DELEGATION_FLAG() {
        return CURLGSSAPI_DELEGATION_FLAG;
    }
    private static final int CURLSSLOPT_ALLOW_BEAST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLOPT_ALLOW_BEAST 1
     * }
     */
    public static int CURLSSLOPT_ALLOW_BEAST() {
        return CURLSSLOPT_ALLOW_BEAST;
    }
    private static final int CURLSSLOPT_NO_REVOKE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLOPT_NO_REVOKE 2
     * }
     */
    public static int CURLSSLOPT_NO_REVOKE() {
        return CURLSSLOPT_NO_REVOKE;
    }
    private static final int CURLSSLOPT_NO_PARTIALCHAIN = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLOPT_NO_PARTIALCHAIN 4
     * }
     */
    public static int CURLSSLOPT_NO_PARTIALCHAIN() {
        return CURLSSLOPT_NO_PARTIALCHAIN;
    }
    private static final int CURLSSLOPT_REVOKE_BEST_EFFORT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLOPT_REVOKE_BEST_EFFORT 8
     * }
     */
    public static int CURLSSLOPT_REVOKE_BEST_EFFORT() {
        return CURLSSLOPT_REVOKE_BEST_EFFORT;
    }
    private static final int CURLSSLOPT_NATIVE_CA = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLOPT_NATIVE_CA 16
     * }
     */
    public static int CURLSSLOPT_NATIVE_CA() {
        return CURLSSLOPT_NATIVE_CA;
    }
    private static final int CURLSSLOPT_AUTO_CLIENT_CERT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CURLSSLOPT_AUTO_CLIENT_CERT 32
     * }
     */
    public static int CURLSSLOPT_AUTO_CLIENT_CERT() {
        return CURLSSLOPT_AUTO_CLIENT_CERT;
    }
    private static final long CURL_HET_DEFAULT = 200L;
    /**
     * {@snippet lang=c :
     * #define CURL_HET_DEFAULT 200
     * }
     */
    public static long CURL_HET_DEFAULT() {
        return CURL_HET_DEFAULT;
    }
    private static final long CURL_UPKEEP_INTERVAL_DEFAULT = 60000L;
    /**
     * {@snippet lang=c :
     * #define CURL_UPKEEP_INTERVAL_DEFAULT 60000
     * }
     */
    public static long CURL_UPKEEP_INTERVAL_DEFAULT() {
        return CURL_UPKEEP_INTERVAL_DEFAULT;
    }
    private static final int CURLFTPSSL_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CURLFTPSSL_NONE 0
     * }
     */
    public static int CURLFTPSSL_NONE() {
        return CURLFTPSSL_NONE;
    }
    private static final int CURLFTPSSL_TRY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLFTPSSL_TRY 1
     * }
     */
    public static int CURLFTPSSL_TRY() {
        return CURLFTPSSL_TRY;
    }
    private static final int CURLFTPSSL_CONTROL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CURLFTPSSL_CONTROL 2
     * }
     */
    public static int CURLFTPSSL_CONTROL() {
        return CURLFTPSSL_CONTROL;
    }
    private static final int CURLFTPSSL_ALL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CURLFTPSSL_ALL 3
     * }
     */
    public static int CURLFTPSSL_ALL() {
        return CURLFTPSSL_ALL;
    }
    private static final int CURLFTPSSL_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CURLFTPSSL_LAST 4
     * }
     */
    public static int CURLFTPSSL_LAST() {
        return CURLFTPSSL_LAST;
    }
    private static final int CURLHEADER_SEPARATE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLHEADER_SEPARATE 1
     * }
     */
    public static int CURLHEADER_SEPARATE() {
        return CURLHEADER_SEPARATE;
    }
    private static final int CURLALTSVC_READONLYFILE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CURLALTSVC_READONLYFILE 4
     * }
     */
    public static int CURLALTSVC_READONLYFILE() {
        return CURLALTSVC_READONLYFILE;
    }
    private static final int CURLALTSVC_H1 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CURLALTSVC_H1 8
     * }
     */
    public static int CURLALTSVC_H1() {
        return CURLALTSVC_H1;
    }
    private static final int CURLALTSVC_H2 = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CURLALTSVC_H2 16
     * }
     */
    public static int CURLALTSVC_H2() {
        return CURLALTSVC_H2;
    }
    private static final int CURLALTSVC_H3 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CURLALTSVC_H3 32
     * }
     */
    public static int CURLALTSVC_H3() {
        return CURLALTSVC_H3;
    }
    private static final long CURLHSTS_ENABLE = 1L;
    /**
     * {@snippet lang=c :
     * #define CURLHSTS_ENABLE 1
     * }
     */
    public static long CURLHSTS_ENABLE() {
        return CURLHSTS_ENABLE;
    }
    private static final long CURLHSTS_READONLYFILE = 2L;
    /**
     * {@snippet lang=c :
     * #define CURLHSTS_READONLYFILE 2
     * }
     */
    public static long CURLHSTS_READONLYFILE() {
        return CURLHSTS_READONLYFILE;
    }
    private static final int CURLPROTO_HTTP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_HTTP 1
     * }
     */
    public static int CURLPROTO_HTTP() {
        return CURLPROTO_HTTP;
    }
    private static final int CURLPROTO_HTTPS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_HTTPS 2
     * }
     */
    public static int CURLPROTO_HTTPS() {
        return CURLPROTO_HTTPS;
    }
    private static final int CURLPROTO_FTP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_FTP 4
     * }
     */
    public static int CURLPROTO_FTP() {
        return CURLPROTO_FTP;
    }
    private static final int CURLPROTO_FTPS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_FTPS 8
     * }
     */
    public static int CURLPROTO_FTPS() {
        return CURLPROTO_FTPS;
    }
    private static final int CURLPROTO_SCP = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_SCP 16
     * }
     */
    public static int CURLPROTO_SCP() {
        return CURLPROTO_SCP;
    }
    private static final int CURLPROTO_SFTP = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_SFTP 32
     * }
     */
    public static int CURLPROTO_SFTP() {
        return CURLPROTO_SFTP;
    }
    private static final int CURLPROTO_TELNET = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_TELNET 64
     * }
     */
    public static int CURLPROTO_TELNET() {
        return CURLPROTO_TELNET;
    }
    private static final int CURLPROTO_LDAP = (int)128L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_LDAP 128
     * }
     */
    public static int CURLPROTO_LDAP() {
        return CURLPROTO_LDAP;
    }
    private static final int CURLPROTO_LDAPS = (int)256L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_LDAPS 256
     * }
     */
    public static int CURLPROTO_LDAPS() {
        return CURLPROTO_LDAPS;
    }
    private static final int CURLPROTO_DICT = (int)512L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_DICT 512
     * }
     */
    public static int CURLPROTO_DICT() {
        return CURLPROTO_DICT;
    }
    private static final int CURLPROTO_FILE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_FILE 1024
     * }
     */
    public static int CURLPROTO_FILE() {
        return CURLPROTO_FILE;
    }
    private static final int CURLPROTO_TFTP = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_TFTP 2048
     * }
     */
    public static int CURLPROTO_TFTP() {
        return CURLPROTO_TFTP;
    }
    private static final int CURLPROTO_IMAP = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_IMAP 4096
     * }
     */
    public static int CURLPROTO_IMAP() {
        return CURLPROTO_IMAP;
    }
    private static final int CURLPROTO_IMAPS = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_IMAPS 8192
     * }
     */
    public static int CURLPROTO_IMAPS() {
        return CURLPROTO_IMAPS;
    }
    private static final int CURLPROTO_POP3 = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_POP3 16384
     * }
     */
    public static int CURLPROTO_POP3() {
        return CURLPROTO_POP3;
    }
    private static final int CURLPROTO_POP3S = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_POP3S 32768
     * }
     */
    public static int CURLPROTO_POP3S() {
        return CURLPROTO_POP3S;
    }
    private static final int CURLPROTO_SMTP = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_SMTP 65536
     * }
     */
    public static int CURLPROTO_SMTP() {
        return CURLPROTO_SMTP;
    }
    private static final int CURLPROTO_SMTPS = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_SMTPS 131072
     * }
     */
    public static int CURLPROTO_SMTPS() {
        return CURLPROTO_SMTPS;
    }
    private static final int CURLPROTO_RTSP = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_RTSP 262144
     * }
     */
    public static int CURLPROTO_RTSP() {
        return CURLPROTO_RTSP;
    }
    private static final int CURLPROTO_RTMP = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_RTMP 524288
     * }
     */
    public static int CURLPROTO_RTMP() {
        return CURLPROTO_RTMP;
    }
    private static final int CURLPROTO_RTMPT = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_RTMPT 1048576
     * }
     */
    public static int CURLPROTO_RTMPT() {
        return CURLPROTO_RTMPT;
    }
    private static final int CURLPROTO_RTMPE = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_RTMPE 2097152
     * }
     */
    public static int CURLPROTO_RTMPE() {
        return CURLPROTO_RTMPE;
    }
    private static final int CURLPROTO_RTMPTE = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_RTMPTE 4194304
     * }
     */
    public static int CURLPROTO_RTMPTE() {
        return CURLPROTO_RTMPTE;
    }
    private static final int CURLPROTO_RTMPS = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_RTMPS 8388608
     * }
     */
    public static int CURLPROTO_RTMPS() {
        return CURLPROTO_RTMPS;
    }
    private static final int CURLPROTO_RTMPTS = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_RTMPTS 16777216
     * }
     */
    public static int CURLPROTO_RTMPTS() {
        return CURLPROTO_RTMPTS;
    }
    private static final int CURLPROTO_GOPHER = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_GOPHER 33554432
     * }
     */
    public static int CURLPROTO_GOPHER() {
        return CURLPROTO_GOPHER;
    }
    private static final int CURLPROTO_SMB = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_SMB 67108864
     * }
     */
    public static int CURLPROTO_SMB() {
        return CURLPROTO_SMB;
    }
    private static final int CURLPROTO_SMBS = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_SMBS 134217728
     * }
     */
    public static int CURLPROTO_SMBS() {
        return CURLPROTO_SMBS;
    }
    private static final int CURLPROTO_MQTT = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_MQTT 268435456
     * }
     */
    public static int CURLPROTO_MQTT() {
        return CURLPROTO_MQTT;
    }
    private static final int CURLPROTO_GOPHERS = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_GOPHERS 536870912
     * }
     */
    public static int CURLPROTO_GOPHERS() {
        return CURLPROTO_GOPHERS;
    }
    private static final int CURLPROTO_ALL = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define CURLPROTO_ALL -1
     * }
     */
    public static int CURLPROTO_ALL() {
        return CURLPROTO_ALL;
    }
    private static final int CURLOPTTYPE_STRINGPOINT = (int)10000L;
    /**
     * {@snippet lang=c :
     * #define CURLOPTTYPE_STRINGPOINT 10000
     * }
     */
    public static int CURLOPTTYPE_STRINGPOINT() {
        return CURLOPTTYPE_STRINGPOINT;
    }
    private static final int CURLOPTTYPE_SLISTPOINT = (int)10000L;
    /**
     * {@snippet lang=c :
     * #define CURLOPTTYPE_SLISTPOINT 10000
     * }
     */
    public static int CURLOPTTYPE_SLISTPOINT() {
        return CURLOPTTYPE_SLISTPOINT;
    }
    private static final int CURLOPTTYPE_CBPOINT = (int)10000L;
    /**
     * {@snippet lang=c :
     * #define CURLOPTTYPE_CBPOINT 10000
     * }
     */
    public static int CURLOPTTYPE_CBPOINT() {
        return CURLOPTTYPE_CBPOINT;
    }
}

